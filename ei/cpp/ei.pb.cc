// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ei.proto

#include "ei.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionKeyValuePair_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactInventoryItem_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsClientInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ArtifactsDB_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Backup_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_AchievementInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_ActiveBoost_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Backup_Artifacts_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Backup_Game_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Misc_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Backup_Mission_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_MissionInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_NewsHeadline_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_OwnedBoost_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_ResearchItem_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Settings_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Shells_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Backup_Simulation_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Stats_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Tutorial_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompleteArtifact_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CompleteMissionResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeArtifactRequest_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeArtifactResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Contract_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_Goal_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Contract_GoalSet_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contract_GradeSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractCoopStatusResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractEvaluation_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractEvaluationBatch_Pair_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractPlayerInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractSimConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractsResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopBuffState_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopChickenRunEntry_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CraftArtifactRequest_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CraftArtifactResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyFlowLog_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DLCCatalog_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DLCItem_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EggIncCurrentEvents_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EggIncEvent_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FarmProductionParams_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameModifier_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenericAction_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IAPSaleEntry_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InGameMail_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventorySlot_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardAnalysis_Chunk_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardInfo_Season_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardResponse_Entry_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LiveConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiveConfig_BoostsConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiveConfig_GiftConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_MiscConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalContract_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailDB_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailState_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailState_TipState_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionInfo_Fuel_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MissionRequest_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MyContracts_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlayerFarmInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reward_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SalesInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerGift_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetArtifactRequest_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetArtifactResponse_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShellDB_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ChickenConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShellDB_FarmConfiguration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellDB_LightingConfig_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellConfiguration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellElementStatus_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellSetConfiguration_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellStatus_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellGroupSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellObjectSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellObjectSpec_LODPiece_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellPopularityStats_Entry_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellSetSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellSetSpec_VariationSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellShowcaseListingInfo_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellSpec_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellSpec_ShellPiece_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellsActionLog_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_ei_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ei_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector4_ei_2eproto;
namespace ei {
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class Vector4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector4> _instance;
} _Vector4_default_instance_;
class Backup_SettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Settings> _instance;
} _Backup_Settings_default_instance_;
class Backup_TutorialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Tutorial> _instance;
} _Backup_Tutorial_default_instance_;
class Backup_StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Stats> _instance;
} _Backup_Stats_default_instance_;
class Backup_GameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Game> _instance;
} _Backup_Game_default_instance_;
class Backup_ArtifactsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Artifacts> _instance;
} _Backup_Artifacts_default_instance_;
class Backup_ShellsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Shells> _instance;
} _Backup_Shells_default_instance_;
class Backup_SimulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Simulation> _instance;
} _Backup_Simulation_default_instance_;
class Backup_MissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Mission> _instance;
} _Backup_Mission_default_instance_;
class Backup_MiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_Misc> _instance;
} _Backup_Misc_default_instance_;
class Backup_ResearchItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_ResearchItem> _instance;
} _Backup_ResearchItem_default_instance_;
class Backup_NewsHeadlineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_NewsHeadline> _instance;
} _Backup_NewsHeadline_default_instance_;
class Backup_AchievementInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_AchievementInfo> _instance;
} _Backup_AchievementInfo_default_instance_;
class Backup_ActiveBoostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_ActiveBoost> _instance;
} _Backup_ActiveBoost_default_instance_;
class Backup_OwnedBoostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_OwnedBoost> _instance;
} _Backup_OwnedBoost_default_instance_;
class Backup_MissionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup_MissionInfo> _instance;
} _Backup_MissionInfo_default_instance_;
class BackupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Backup> _instance;
} _Backup_default_instance_;
class EggIncFirstContactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EggIncFirstContactRequest> _instance;
} _EggIncFirstContactRequest_default_instance_;
class EggIncFirstContactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EggIncFirstContactResponse> _instance;
} _EggIncFirstContactResponse_default_instance_;
class EggIncAdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EggIncAdConfig> _instance;
} _EggIncAdConfig_default_instance_;
class DailyGiftInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DailyGiftInfo> _instance;
} _DailyGiftInfo_default_instance_;
class SalesInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SalesInfoRequest> _instance;
} _SalesInfoRequest_default_instance_;
class IAPSaleEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IAPSaleEntry> _instance;
} _IAPSaleEntry_default_instance_;
class SalesInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SalesInfo> _instance;
} _SalesInfo_default_instance_;
class EggIncEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EggIncEvent> _instance;
} _EggIncEvent_default_instance_;
class EggIncCurrentEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EggIncCurrentEvents> _instance;
} _EggIncCurrentEvents_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class AppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInfo> _instance;
} _AppInfo_default_instance_;
class ActionKeyValuePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionKeyValuePair> _instance;
} _ActionKeyValuePair_default_instance_;
class GenericActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericAction> _instance;
} _GenericAction_default_instance_;
class GenericActionBatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericActionBatchRequest> _instance;
} _GenericActionBatchRequest_default_instance_;
class VerifyPurchaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyPurchaseRequest> _instance;
} _VerifyPurchaseRequest_default_instance_;
class VerifyPurchaseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyPurchaseResponse> _instance;
} _VerifyPurchaseResponse_default_instance_;
class CurrencyFlowLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyFlowLog> _instance;
} _CurrencyFlowLog_default_instance_;
class CurrencyFlowBatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyFlowBatchRequest> _instance;
} _CurrencyFlowBatchRequest_default_instance_;
class RewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reward> _instance;
} _Reward_default_instance_;
class GameModifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameModifier> _instance;
} _GameModifier_default_instance_;
class Contract_GoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract_Goal> _instance;
} _Contract_Goal_default_instance_;
class Contract_GoalSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract_GoalSet> _instance;
} _Contract_GoalSet_default_instance_;
class Contract_GradeSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract_GradeSpec> _instance;
} _Contract_GradeSpec_default_instance_;
class ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract> _instance;
} _Contract_default_instance_;
class ContractPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractPlayerInfo> _instance;
} _ContractPlayerInfo_default_instance_;
class ContractEvaluationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractEvaluation> _instance;
} _ContractEvaluation_default_instance_;
class ContractCitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCitation> _instance;
} _ContractCitation_default_instance_;
class ContractEvaluationBatch_PairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractEvaluationBatch_Pair> _instance;
} _ContractEvaluationBatch_Pair_default_instance_;
class ContractEvaluationBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractEvaluationBatch> _instance;
} _ContractEvaluationBatch_default_instance_;
class CoopCompletionSnapshot_ContributorSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopCompletionSnapshot_ContributorSnapshot> _instance;
} _CoopCompletionSnapshot_ContributorSnapshot_default_instance_;
class CoopCompletionSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopCompletionSnapshot> _instance;
} _CoopCompletionSnapshot_default_instance_;
class BasicRequestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicRequestInfo> _instance;
} _BasicRequestInfo_default_instance_;
class ContractSimConfig_ContractGradeSimConfig_GoalParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimConfig_ContractGradeSimConfig_GoalParams> _instance;
} _ContractSimConfig_ContractGradeSimConfig_GoalParams_default_instance_;
class ContractSimConfig_ContractGradeSimConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimConfig_ContractGradeSimConfig> _instance;
} _ContractSimConfig_ContractGradeSimConfig_default_instance_;
class ContractSimConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimConfig> _instance;
} _ContractSimConfig_default_instance_;
class ContractSimPollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimPoll> _instance;
} _ContractSimPoll_default_instance_;
class ContractSimPollResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimPollResponse> _instance;
} _ContractSimPollResponse_default_instance_;
class ContractSimResultUpdate_GoalInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimResultUpdate_GoalInfo> _instance;
} _ContractSimResultUpdate_GoalInfo_default_instance_;
class ContractSimResultUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractSimResultUpdate> _instance;
} _ContractSimResultUpdate_default_instance_;
class ContractsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractsRequest> _instance;
} _ContractsRequest_default_instance_;
class ContractsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractsResponse> _instance;
} _ContractsResponse_default_instance_;
class ContractCoopStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusRequest> _instance;
} _ContractCoopStatusRequest_default_instance_;
class FarmProductionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FarmProductionParams> _instance;
} _FarmProductionParams_default_instance_;
class PlayerFarmInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerFarmInfo> _instance;
} _PlayerFarmInfo_default_instance_;
class ContractCoopStatusResponse_ContributionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusResponse_ContributionInfo> _instance;
} _ContractCoopStatusResponse_ContributionInfo_default_instance_;
class ContractCoopStatusResponse_CoopGiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusResponse_CoopGift> _instance;
} _ContractCoopStatusResponse_CoopGift_default_instance_;
class ContractCoopStatusResponse_ChickenRunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusResponse_ChickenRun> _instance;
} _ContractCoopStatusResponse_ChickenRun_default_instance_;
class ContractCoopStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusResponse> _instance;
} _ContractCoopStatusResponse_default_instance_;
class LocalContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalContract> _instance;
} _LocalContract_default_instance_;
class MyContractsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyContracts> _instance;
} _MyContracts_default_instance_;
class QueryCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryCoopRequest> _instance;
} _QueryCoopRequest_default_instance_;
class QueryCoopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryCoopResponse> _instance;
} _QueryCoopResponse_default_instance_;
class CreateCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCoopRequest> _instance;
} _CreateCoopRequest_default_instance_;
class CreateCoopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCoopResponse> _instance;
} _CreateCoopResponse_default_instance_;
class JoinCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinCoopRequest> _instance;
} _JoinCoopRequest_default_instance_;
class JoinCoopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinCoopResponse> _instance;
} _JoinCoopResponse_default_instance_;
class AutoJoinCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoJoinCoopRequest> _instance;
} _AutoJoinCoopRequest_default_instance_;
class UpdateCoopPermissionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCoopPermissionsRequest> _instance;
} _UpdateCoopPermissionsRequest_default_instance_;
class UpdateCoopPermissionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCoopPermissionsResponse> _instance;
} _UpdateCoopPermissionsResponse_default_instance_;
class LeaveCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveCoopRequest> _instance;
} _LeaveCoopRequest_default_instance_;
class GiftPlayerCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GiftPlayerCoopRequest> _instance;
} _GiftPlayerCoopRequest_default_instance_;
class SendChickenRunCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendChickenRunCoopRequest> _instance;
} _SendChickenRunCoopRequest_default_instance_;
class ReportPlayerCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportPlayerCoopRequest> _instance;
} _ReportPlayerCoopRequest_default_instance_;
class KickPlayerCoopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickPlayerCoopRequest> _instance;
} _KickPlayerCoopRequest_default_instance_;
class ContractCoopStatusUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusUpdateRequest> _instance;
} _ContractCoopStatusUpdateRequest_default_instance_;
class ContractCoopStatusUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractCoopStatusUpdateResponse> _instance;
} _ContractCoopStatusUpdateResponse_default_instance_;
class CoopBuffStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopBuffState> _instance;
} _CoopBuffState_default_instance_;
class CoopBuffHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopBuffHistory> _instance;
} _CoopBuffHistory_default_instance_;
class CoopChickenRunEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopChickenRunEntry> _instance;
} _CoopChickenRunEntry_default_instance_;
class CoopLastChickenRunTimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoopLastChickenRunTimes> _instance;
} _CoopLastChickenRunTimes_default_instance_;
class LeaderboardAnalysis_ChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardAnalysis_Chunk> _instance;
} _LeaderboardAnalysis_Chunk_default_instance_;
class LeaderboardAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardAnalysis> _instance;
} _LeaderboardAnalysis_default_instance_;
class LeaderboardInfo_SeasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardInfo_Season> _instance;
} _LeaderboardInfo_Season_default_instance_;
class LeaderboardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardInfo> _instance;
} _LeaderboardInfo_default_instance_;
class LeaderboardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardRequest> _instance;
} _LeaderboardRequest_default_instance_;
class LeaderboardResponse_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardResponse_Entry> _instance;
} _LeaderboardResponse_Entry_default_instance_;
class LeaderboardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardResponse> _instance;
} _LeaderboardResponse_default_instance_;
class ContractsArchiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractsArchive> _instance;
} _ContractsArchive_default_instance_;
class ContractActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractAction> _instance;
} _ContractAction_default_instance_;
class UserDataInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDataInfoRequest> _instance;
} _UserDataInfoRequest_default_instance_;
class UserDataInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDataInfoResponse> _instance;
} _UserDataInfoResponse_default_instance_;
class ClearAllUserDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearAllUserDataRequest> _instance;
} _ClearAllUserDataRequest_default_instance_;
class ServerGiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerGift> _instance;
} _ServerGift_default_instance_;
class LiveConfig_BoostsConfig_ItemConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_BoostsConfig_ItemConfig> _instance;
} _LiveConfig_BoostsConfig_ItemConfig_default_instance_;
class LiveConfig_BoostsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_BoostsConfig> _instance;
} _LiveConfig_BoostsConfig_default_instance_;
class LiveConfig_GiftConfig_GiftValueConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_GiftConfig_GiftValueConfig> _instance;
} _LiveConfig_GiftConfig_GiftValueConfig_default_instance_;
class LiveConfig_GiftConfig_GiftMuConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_GiftConfig_GiftMuConfig> _instance;
} _LiveConfig_GiftConfig_GiftMuConfig_default_instance_;
class LiveConfig_GiftConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_GiftConfig> _instance;
} _LiveConfig_GiftConfig_default_instance_;
class LiveConfig_MiscConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig_MiscConfig> _instance;
} _LiveConfig_MiscConfig_default_instance_;
class LiveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveConfig> _instance;
} _LiveConfig_default_instance_;
class InGameMailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InGameMail> _instance;
} _InGameMail_default_instance_;
class MailDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MailDB> _instance;
} _MailDB_default_instance_;
class TipsDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TipsDB> _instance;
} _TipsDB_default_instance_;
class MailState_TipStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MailState_TipState> _instance;
} _MailState_TipState_default_instance_;
class MailStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MailState> _instance;
} _MailState_default_instance_;
class PeriodicalsResponse_RoyaltyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodicalsResponse_RoyaltyInfo> _instance;
} _PeriodicalsResponse_RoyaltyInfo_default_instance_;
class PeriodicalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodicalsResponse> _instance;
} _PeriodicalsResponse_default_instance_;
class GetPeriodicalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeriodicalsRequest> _instance;
} _GetPeriodicalsRequest_default_instance_;
class ConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigRequest> _instance;
} _ConfigRequest_default_instance_;
class ConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigResponse> _instance;
} _ConfigResponse_default_instance_;
class AdAttributionRawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdAttributionRawData> _instance;
} _AdAttributionRawData_default_instance_;
class AdAttributionRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdAttributionRow> _instance;
} _AdAttributionRow_default_instance_;
class AdAttributionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdAttributionInfo> _instance;
} _AdAttributionInfo_default_instance_;
class ArtifactsClientInfo_LaunchCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsClientInfo_LaunchCount> _instance;
} _ArtifactsClientInfo_LaunchCount_default_instance_;
class ArtifactsClientInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsClientInfo> _instance;
} _ArtifactsClientInfo_default_instance_;
class MissionInfo_FuelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionInfo_Fuel> _instance;
} _MissionInfo_Fuel_default_instance_;
class MissionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionInfo> _instance;
} _MissionInfo_default_instance_;
class ArtifactSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactSpec> _instance;
} _ArtifactSpec_default_instance_;
class CompleteArtifactDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteArtifact> _instance;
} _CompleteArtifact_default_instance_;
class ArtifactInventoryItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactInventoryItem> _instance;
} _ArtifactInventoryItem_default_instance_;
class InventorySlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InventorySlot> _instance;
} _InventorySlot_default_instance_;
class ArtifactsConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationRequest> _instance;
} _ArtifactsConfigurationRequest_default_instance_;
class ArtifactsConfigurationResponse_MissionParameters_DurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationResponse_MissionParameters_Duration> _instance;
} _ArtifactsConfigurationResponse_MissionParameters_Duration_default_instance_;
class ArtifactsConfigurationResponse_MissionParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationResponse_MissionParameters> _instance;
} _ArtifactsConfigurationResponse_MissionParameters_default_instance_;
class ArtifactsConfigurationResponse_ArtifactParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationResponse_ArtifactParameters> _instance;
} _ArtifactsConfigurationResponse_ArtifactParameters_default_instance_;
class ArtifactsConfigurationResponse_CraftingLevelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationResponse_CraftingLevelInfo> _instance;
} _ArtifactsConfigurationResponse_CraftingLevelInfo_default_instance_;
class ArtifactsConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsConfigurationResponse> _instance;
} _ArtifactsConfigurationResponse_default_instance_;
class MissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionRequest> _instance;
} _MissionRequest_default_instance_;
class MissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionResponse> _instance;
} _MissionResponse_default_instance_;
class CompleteMissionResponse_SecureArtifactSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteMissionResponse_SecureArtifactSpec> _instance;
} _CompleteMissionResponse_SecureArtifactSpec_default_instance_;
class CompleteMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteMissionResponse> _instance;
} _CompleteMissionResponse_default_instance_;
class CollectContractArtifactRewardsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectContractArtifactRewardsRequest> _instance;
} _CollectContractArtifactRewardsRequest_default_instance_;
class CraftArtifactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CraftArtifactRequest> _instance;
} _CraftArtifactRequest_default_instance_;
class CraftArtifactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CraftArtifactResponse> _instance;
} _CraftArtifactResponse_default_instance_;
class ConsumeArtifactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsumeArtifactRequest> _instance;
} _ConsumeArtifactRequest_default_instance_;
class ConsumeArtifactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsumeArtifactResponse> _instance;
} _ConsumeArtifactResponse_default_instance_;
class AuthenticateArtifactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateArtifactResponse> _instance;
} _AuthenticateArtifactResponse_default_instance_;
class SetArtifactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetArtifactRequest> _instance;
} _SetArtifactRequest_default_instance_;
class SetArtifactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetArtifactResponse> _instance;
} _SetArtifactResponse_default_instance_;
class ArtifactsDB_ActiveArtifactSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsDB_ActiveArtifactSlot> _instance;
} _ArtifactsDB_ActiveArtifactSlot_default_instance_;
class ArtifactsDB_ActiveArtifactSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsDB_ActiveArtifactSet> _instance;
} _ArtifactsDB_ActiveArtifactSet_default_instance_;
class ArtifactsDB_CraftableArtifactDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsDB_CraftableArtifact> _instance;
} _ArtifactsDB_CraftableArtifact_default_instance_;
class ArtifactsDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtifactsDB> _instance;
} _ArtifactsDB_default_instance_;
class AuthenticatedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticatedMessage> _instance;
} _AuthenticatedMessage_default_instance_;
class LogCompleteMissionPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogCompleteMissionPayload> _instance;
} _LogCompleteMissionPayload_default_instance_;
class LogCraftArtifactPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogCraftArtifactPayload> _instance;
} _LogCraftArtifactPayload_default_instance_;
class LogConsumeArtifactPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogConsumeArtifactPayload> _instance;
} _LogConsumeArtifactPayload_default_instance_;
class LogSetArtifactPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogSetArtifactPayload> _instance;
} _LogSetArtifactPayload_default_instance_;
class AccountTransferPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountTransferPayload> _instance;
} _AccountTransferPayload_default_instance_;
class SaveBackupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveBackupResponse> _instance;
} _SaveBackupResponse_default_instance_;
class CleanAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanAccountRequest> _instance;
} _CleanAccountRequest_default_instance_;
class ReturnEDTPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReturnEDTPayload> _instance;
} _ReturnEDTPayload_default_instance_;
class DLCItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DLCItem> _instance;
} _DLCItem_default_instance_;
class ShellSpec_ShellPieceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellSpec_ShellPiece> _instance;
} _ShellSpec_ShellPiece_default_instance_;
class ShellSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellSpec> _instance;
} _ShellSpec_default_instance_;
class ShellSetSpec_VariationSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellSetSpec_VariationSpec> _instance;
} _ShellSetSpec_VariationSpec_default_instance_;
class ShellSetSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellSetSpec> _instance;
} _ShellSetSpec_default_instance_;
class ShellObjectSpec_LODPieceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellObjectSpec_LODPiece> _instance;
} _ShellObjectSpec_LODPiece_default_instance_;
class ShellObjectSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellObjectSpec> _instance;
} _ShellObjectSpec_default_instance_;
class ShellGroupSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellGroupSpec> _instance;
} _ShellGroupSpec_default_instance_;
class DLCCatalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DLCCatalog> _instance;
} _DLCCatalog_default_instance_;
class ShellDB_ShellStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellStatus> _instance;
} _ShellDB_ShellStatus_default_instance_;
class ShellDB_ShellElementStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellElementStatus> _instance;
} _ShellDB_ShellElementStatus_default_instance_;
class ShellDB_ShellSetVariationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellSetVariationStatus> _instance;
} _ShellDB_ShellSetVariationStatus_default_instance_;
class ShellDB_FarmConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_FarmConfiguration> _instance;
} _ShellDB_FarmConfiguration_default_instance_;
class ShellDB_SavedFarmConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_SavedFarmConfiguration> _instance;
} _ShellDB_SavedFarmConfiguration_default_instance_;
class ShellDB_ShellConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellConfiguration> _instance;
} _ShellDB_ShellConfiguration_default_instance_;
class ShellDB_ShellSetConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellSetConfiguration> _instance;
} _ShellDB_ShellSetConfiguration_default_instance_;
class ShellDB_ShellGroupConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ShellGroupConfiguration> _instance;
} _ShellDB_ShellGroupConfiguration_default_instance_;
class ShellDB_ChickenConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_ChickenConfig> _instance;
} _ShellDB_ChickenConfig_default_instance_;
class ShellDB_LightingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB_LightingConfig> _instance;
} _ShellDB_LightingConfig_default_instance_;
class ShellDBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellDB> _instance;
} _ShellDB_default_instance_;
class ShellPopularityStats_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellPopularityStats_Entry> _instance;
} _ShellPopularityStats_Entry_default_instance_;
class ShellPopularityStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellPopularityStats> _instance;
} _ShellPopularityStats_default_instance_;
class ShellsActionLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellsActionLog> _instance;
} _ShellsActionLog_default_instance_;
class SubmitShellShowcaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitShellShowcaseRequest> _instance;
} _SubmitShellShowcaseRequest_default_instance_;
class ShellShowcaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellShowcase> _instance;
} _ShellShowcase_default_instance_;
class ShellShowcaseListingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellShowcaseListingInfo> _instance;
} _ShellShowcaseListingInfo_default_instance_;
class ShowcaseRoyaltyDeliveryConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowcaseRoyaltyDeliveryConfirmation> _instance;
} _ShowcaseRoyaltyDeliveryConfirmation_default_instance_;
class ShellShowcaseListingSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellShowcaseListingSet> _instance;
} _ShellShowcaseListingSet_default_instance_;
class ShellsActionBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellsActionBatch> _instance;
} _ShellsActionBatch_default_instance_;
class UserVerificationAnalysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserVerificationAnalysis> _instance;
} _UserVerificationAnalysis_default_instance_;
class UserSubscriptionInfo_HistoryEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSubscriptionInfo_HistoryEntry> _instance;
} _UserSubscriptionInfo_HistoryEntry_default_instance_;
class UserSubscriptionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSubscriptionInfo> _instance;
} _UserSubscriptionInfo_default_instance_;
class SubscriptionChangeHintRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionChangeHintRequest> _instance;
} _SubscriptionChangeHintRequest_default_instance_;
class CXPEvalRolloutInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CXPEvalRolloutInfo> _instance;
} _CXPEvalRolloutInfo_default_instance_;
}  // namespace ei
static void InitDefaultsscc_info_AccountTransferPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AccountTransferPayload_default_instance_;
    new (ptr) ::ei::AccountTransferPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AccountTransferPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountTransferPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountTransferPayload_ei_2eproto}, {}};

static void InitDefaultsscc_info_ActionKeyValuePair_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ActionKeyValuePair_default_instance_;
    new (ptr) ::ei::ActionKeyValuePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ActionKeyValuePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionKeyValuePair_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActionKeyValuePair_ei_2eproto}, {}};

static void InitDefaultsscc_info_AdAttributionInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AdAttributionInfo_default_instance_;
    new (ptr) ::ei::AdAttributionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AdAttributionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdAttributionInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdAttributionInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_AdAttributionRawData_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AdAttributionRawData_default_instance_;
    new (ptr) ::ei::AdAttributionRawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AdAttributionRawData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdAttributionRawData_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdAttributionRawData_ei_2eproto}, {}};

static void InitDefaultsscc_info_AdAttributionRow_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AdAttributionRow_default_instance_;
    new (ptr) ::ei::AdAttributionRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AdAttributionRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdAttributionRow_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdAttributionRow_ei_2eproto}, {}};

static void InitDefaultsscc_info_AppInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AppInfo_default_instance_;
    new (ptr) ::ei::AppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactInventoryItem_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactInventoryItem_default_instance_;
    new (ptr) ::ei::ArtifactInventoryItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactInventoryItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactInventoryItem_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactInventoryItem_ei_2eproto}, {
      &scc_info_CompleteArtifact_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactSpec_default_instance_;
    new (ptr) ::ei::ArtifactSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtifactSpec_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactsClientInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsClientInfo_default_instance_;
    new (ptr) ::ei::ArtifactsClientInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsClientInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsClientInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsClientInfo_ei_2eproto}, {
      &scc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsClientInfo_LaunchCount_default_instance_;
    new (ptr) ::ei::ArtifactsClientInfo_LaunchCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsClientInfo_LaunchCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactsConfigurationRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationRequest_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsConfigurationRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsConfigurationRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsConfigurationResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationResponse_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ArtifactsConfigurationResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ArtifactsConfigurationResponse_ei_2eproto}, {
      &scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto.base,
      &scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto.base,
      &scc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationResponse_ArtifactParameters_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationResponse_ArtifactParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationResponse_ArtifactParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto}, {
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationResponse_CraftingLevelInfo_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationResponse_CraftingLevelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationResponse_CraftingLevelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationResponse_MissionParameters_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationResponse_MissionParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationResponse_MissionParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto}, {
      &scc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsConfigurationResponse_MissionParameters_Duration_default_instance_;
    new (ptr) ::ei::ArtifactsConfigurationResponse_MissionParameters_Duration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsConfigurationResponse_MissionParameters_Duration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactsDB_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsDB_default_instance_;
    new (ptr) ::ei::ArtifactsDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ArtifactsDB_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ArtifactsDB_ei_2eproto}, {
      &scc_info_ArtifactInventoryItem_ei_2eproto.base,
      &scc_info_InventorySlot_ei_2eproto.base,
      &scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto.base,
      &scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto.base,
      &scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto.base,
      &scc_info_MissionInfo_ei_2eproto.base,
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsDB_ActiveArtifactSet_default_instance_;
    new (ptr) ::ei::ArtifactsDB_ActiveArtifactSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsDB_ActiveArtifactSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto}, {
      &scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto.base,}};

static void InitDefaultsscc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsDB_ActiveArtifactSlot_default_instance_;
    new (ptr) ::ei::ArtifactsDB_ActiveArtifactSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsDB_ActiveArtifactSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto}, {}};

static void InitDefaultsscc_info_ArtifactsDB_CraftableArtifact_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ArtifactsDB_CraftableArtifact_default_instance_;
    new (ptr) ::ei::ArtifactsDB_CraftableArtifact();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ArtifactsDB_CraftableArtifact::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArtifactsDB_CraftableArtifact_ei_2eproto}, {
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateArtifactResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AuthenticateArtifactResponse_default_instance_;
    new (ptr) ::ei::AuthenticateArtifactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AuthenticateArtifactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateArtifactResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticateArtifactResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_AuthenticatedMessage_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AuthenticatedMessage_default_instance_;
    new (ptr) ::ei::AuthenticatedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AuthenticatedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticatedMessage_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticatedMessage_ei_2eproto}, {}};

static void InitDefaultsscc_info_AutoJoinCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_AutoJoinCoopRequest_default_instance_;
    new (ptr) ::ei::AutoJoinCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::AutoJoinCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoJoinCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoJoinCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_default_instance_;
    new (ptr) ::ei::Backup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Backup_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_Backup_ei_2eproto}, {
      &scc_info_Backup_Settings_ei_2eproto.base,
      &scc_info_Backup_Tutorial_ei_2eproto.base,
      &scc_info_Backup_Stats_ei_2eproto.base,
      &scc_info_Backup_Game_ei_2eproto.base,
      &scc_info_Backup_Artifacts_ei_2eproto.base,
      &scc_info_Backup_Shells_ei_2eproto.base,
      &scc_info_Backup_Simulation_ei_2eproto.base,
      &scc_info_Backup_Mission_ei_2eproto.base,
      &scc_info_Backup_Misc_ei_2eproto.base,
      &scc_info_MyContracts_ei_2eproto.base,
      &scc_info_ArtifactsDB_ei_2eproto.base,
      &scc_info_ShellDB_ei_2eproto.base,
      &scc_info_MailState_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_AchievementInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_AchievementInfo_default_instance_;
    new (ptr) ::ei::Backup_AchievementInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_AchievementInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_AchievementInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_AchievementInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_ActiveBoost_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_ActiveBoost_default_instance_;
    new (ptr) ::ei::Backup_ActiveBoost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_ActiveBoost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_ActiveBoost_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_ActiveBoost_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Artifacts_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Artifacts_default_instance_;
    new (ptr) ::ei::Backup_Artifacts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Artifacts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Backup_Artifacts_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Backup_Artifacts_ei_2eproto}, {
      &scc_info_ArtifactInventoryItem_ei_2eproto.base,
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_Game_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Game_default_instance_;
    new (ptr) ::ei::Backup_Game();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Game::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Backup_Game_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Backup_Game_ei_2eproto}, {
      &scc_info_Backup_ResearchItem_ei_2eproto.base,
      &scc_info_Backup_NewsHeadline_ei_2eproto.base,
      &scc_info_Backup_AchievementInfo_ei_2eproto.base,
      &scc_info_Backup_OwnedBoost_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_Misc_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Misc_default_instance_;
    new (ptr) ::ei::Backup_Misc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Misc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Misc_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_Misc_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Mission_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Mission_default_instance_;
    new (ptr) ::ei::Backup_Mission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Mission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Backup_Mission_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Backup_Mission_ei_2eproto}, {
      &scc_info_Backup_MissionInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_MissionInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_MissionInfo_default_instance_;
    new (ptr) ::ei::Backup_MissionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_MissionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_MissionInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_MissionInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_NewsHeadline_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_NewsHeadline_default_instance_;
    new (ptr) ::ei::Backup_NewsHeadline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_NewsHeadline::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_NewsHeadline_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_NewsHeadline_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_OwnedBoost_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_OwnedBoost_default_instance_;
    new (ptr) ::ei::Backup_OwnedBoost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_OwnedBoost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_OwnedBoost_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_OwnedBoost_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_ResearchItem_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_ResearchItem_default_instance_;
    new (ptr) ::ei::Backup_ResearchItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_ResearchItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_ResearchItem_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_ResearchItem_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Settings_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Settings_default_instance_;
    new (ptr) ::ei::Backup_Settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Settings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Settings_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_Settings_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Shells_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Shells_default_instance_;
    new (ptr) ::ei::Backup_Shells();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Shells::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Shells_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_Shells_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Simulation_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Simulation_default_instance_;
    new (ptr) ::ei::Backup_Simulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Simulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Backup_Simulation_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Backup_Simulation_ei_2eproto}, {
      &scc_info_Backup_ResearchItem_ei_2eproto.base,
      &scc_info_Backup_ActiveBoost_ei_2eproto.base,}};

static void InitDefaultsscc_info_Backup_Stats_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Stats_default_instance_;
    new (ptr) ::ei::Backup_Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Stats_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_Stats_ei_2eproto}, {}};

static void InitDefaultsscc_info_Backup_Tutorial_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Backup_Tutorial_default_instance_;
    new (ptr) ::ei::Backup_Tutorial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Backup_Tutorial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Backup_Tutorial_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Backup_Tutorial_ei_2eproto}, {}};

static void InitDefaultsscc_info_BasicRequestInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_BasicRequestInfo_default_instance_;
    new (ptr) ::ei::BasicRequestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::BasicRequestInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicRequestInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicRequestInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_CXPEvalRolloutInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CXPEvalRolloutInfo_default_instance_;
    new (ptr) ::ei::CXPEvalRolloutInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CXPEvalRolloutInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CXPEvalRolloutInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CXPEvalRolloutInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_CleanAccountRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CleanAccountRequest_default_instance_;
    new (ptr) ::ei::CleanAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CleanAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanAccountRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CleanAccountRequest_ei_2eproto}, {}};

static void InitDefaultsscc_info_ClearAllUserDataRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ClearAllUserDataRequest_default_instance_;
    new (ptr) ::ei::ClearAllUserDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ClearAllUserDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearAllUserDataRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClearAllUserDataRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_CollectContractArtifactRewardsRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CollectContractArtifactRewardsRequest_default_instance_;
    new (ptr) ::ei::CollectContractArtifactRewardsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CollectContractArtifactRewardsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectContractArtifactRewardsRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CollectContractArtifactRewardsRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_CompleteArtifact_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CompleteArtifact_default_instance_;
    new (ptr) ::ei::CompleteArtifact();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CompleteArtifact::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompleteArtifact_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompleteArtifact_ei_2eproto}, {
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_CompleteMissionResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CompleteMissionResponse_default_instance_;
    new (ptr) ::ei::CompleteMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CompleteMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CompleteMissionResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CompleteMissionResponse_ei_2eproto}, {
      &scc_info_MissionInfo_ei_2eproto.base,
      &scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto.base,
      &scc_info_Reward_ei_2eproto.base,}};

static void InitDefaultsscc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CompleteMissionResponse_SecureArtifactSpec_default_instance_;
    new (ptr) ::ei::CompleteMissionResponse_SecureArtifactSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CompleteMissionResponse_SecureArtifactSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto}, {
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_ConfigRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ConfigRequest_default_instance_;
    new (ptr) ::ei::ConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ConfigResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ConfigResponse_default_instance_;
    new (ptr) ::ei::ConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigResponse_ei_2eproto}, {
      &scc_info_LiveConfig_ei_2eproto.base,
      &scc_info_MailDB_ei_2eproto.base,
      &scc_info_DLCCatalog_ei_2eproto.base,}};

static void InitDefaultsscc_info_ConsumeArtifactRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ConsumeArtifactRequest_default_instance_;
    new (ptr) ::ei::ConsumeArtifactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ConsumeArtifactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeArtifactRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsumeArtifactRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_ConsumeArtifactResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ConsumeArtifactResponse_default_instance_;
    new (ptr) ::ei::ConsumeArtifactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ConsumeArtifactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeArtifactResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsumeArtifactResponse_ei_2eproto}, {
      &scc_info_ArtifactSpec_ei_2eproto.base,
      &scc_info_Reward_ei_2eproto.base,}};

static void InitDefaultsscc_info_Contract_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Contract_default_instance_;
    new (ptr) ::ei::Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Contract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Contract_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Contract_ei_2eproto}, {
      &scc_info_Contract_Goal_ei_2eproto.base,
      &scc_info_Contract_GoalSet_ei_2eproto.base,
      &scc_info_Contract_GradeSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_Contract_Goal_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Contract_Goal_default_instance_;
    new (ptr) ::ei::Contract_Goal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Contract_Goal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_Goal_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Contract_Goal_ei_2eproto}, {}};

static void InitDefaultsscc_info_Contract_GoalSet_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Contract_GoalSet_default_instance_;
    new (ptr) ::ei::Contract_GoalSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Contract_GoalSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Contract_GoalSet_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Contract_GoalSet_ei_2eproto}, {
      &scc_info_Contract_Goal_ei_2eproto.base,}};

static void InitDefaultsscc_info_Contract_GradeSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Contract_GradeSpec_default_instance_;
    new (ptr) ::ei::Contract_GradeSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Contract_GradeSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contract_GradeSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Contract_GradeSpec_ei_2eproto}, {
      &scc_info_Contract_Goal_ei_2eproto.base,
      &scc_info_GameModifier_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractAction_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractAction_default_instance_;
    new (ptr) ::ei::ContractAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractAction_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractAction_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractCitation_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCitation_default_instance_;
    new (ptr) ::ei::ContractCitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCitation_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractCitation_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractCoopStatusRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusRequest_default_instance_;
    new (ptr) ::ei::ContractCoopStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractCoopStatusRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractCoopStatusRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractCoopStatusResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusResponse_default_instance_;
    new (ptr) ::ei::ContractCoopStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractCoopStatusResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContractCoopStatusResponse_ei_2eproto}, {
      &scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto.base,
      &scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto.base,
      &scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusResponse_ChickenRun_default_instance_;
    new (ptr) ::ei::ContractCoopStatusResponse_ChickenRun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusResponse_ChickenRun::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusResponse_ContributionInfo_default_instance_;
    new (ptr) ::ei::ContractCoopStatusResponse_ContributionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusResponse_ContributionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto}, {
      &scc_info_FarmProductionParams_ei_2eproto.base,
      &scc_info_PlayerFarmInfo_ei_2eproto.base,
      &scc_info_CoopBuffState_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusResponse_CoopGift_default_instance_;
    new (ptr) ::ei::ContractCoopStatusResponse_CoopGift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusResponse_CoopGift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractCoopStatusUpdateRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusUpdateRequest_default_instance_;
    new (ptr) ::ei::ContractCoopStatusUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractCoopStatusUpdateRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContractCoopStatusUpdateRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_FarmProductionParams_ei_2eproto.base,
      &scc_info_PlayerFarmInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractCoopStatusUpdateResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractCoopStatusUpdateResponse_default_instance_;
    new (ptr) ::ei::ContractCoopStatusUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractCoopStatusUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractCoopStatusUpdateResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractCoopStatusUpdateResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractEvaluation_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractEvaluation_default_instance_;
    new (ptr) ::ei::ContractEvaluation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractEvaluation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractEvaluation_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractEvaluation_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractEvaluationBatch_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractEvaluationBatch_default_instance_;
    new (ptr) ::ei::ContractEvaluationBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractEvaluationBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractEvaluationBatch_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractEvaluationBatch_ei_2eproto}, {
      &scc_info_ContractEvaluationBatch_Pair_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractEvaluationBatch_Pair_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractEvaluationBatch_Pair_default_instance_;
    new (ptr) ::ei::ContractEvaluationBatch_Pair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractEvaluationBatch_Pair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractEvaluationBatch_Pair_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractEvaluationBatch_Pair_ei_2eproto}, {
      &scc_info_ContractEvaluation_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractPlayerInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractPlayerInfo_default_instance_;
    new (ptr) ::ei::ContractPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractPlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractPlayerInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractPlayerInfo_ei_2eproto}, {
      &scc_info_ContractEvaluation_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractSimConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimConfig_default_instance_;
    new (ptr) ::ei::ContractSimConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractSimConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractSimConfig_ei_2eproto}, {
      &scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimConfig_ContractGradeSimConfig_default_instance_;
    new (ptr) ::ei::ContractSimConfig_ContractGradeSimConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimConfig_ContractGradeSimConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto}, {
      &scc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimConfig_ContractGradeSimConfig_GoalParams_default_instance_;
    new (ptr) ::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractSimPoll_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimPoll_default_instance_;
    new (ptr) ::ei::ContractSimPoll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimPoll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractSimPoll_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractSimPoll_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractSimPollResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimPollResponse_default_instance_;
    new (ptr) ::ei::ContractSimPollResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimPollResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContractSimPollResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContractSimPollResponse_ei_2eproto}, {
      &scc_info_Contract_ei_2eproto.base,
      &scc_info_ContractSimConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractSimResultUpdate_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimResultUpdate_default_instance_;
    new (ptr) ::ei::ContractSimResultUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimResultUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractSimResultUpdate_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractSimResultUpdate_ei_2eproto}, {
      &scc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractSimResultUpdate_GoalInfo_default_instance_;
    new (ptr) ::ei::ContractSimResultUpdate_GoalInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractSimResultUpdate_GoalInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractsArchive_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractsArchive_default_instance_;
    new (ptr) ::ei::ContractsArchive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractsArchive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractsArchive_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractsArchive_ei_2eproto}, {
      &scc_info_LocalContract_ei_2eproto.base,}};

static void InitDefaultsscc_info_ContractsRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractsRequest_default_instance_;
    new (ptr) ::ei::ContractsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractsRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractsRequest_ei_2eproto}, {}};

static void InitDefaultsscc_info_ContractsResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ContractsResponse_default_instance_;
    new (ptr) ::ei::ContractsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ContractsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractsResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractsResponse_ei_2eproto}, {
      &scc_info_Contract_ei_2eproto.base,}};

static void InitDefaultsscc_info_CoopBuffHistory_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopBuffHistory_default_instance_;
    new (ptr) ::ei::CoopBuffHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopBuffHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoopBuffHistory_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CoopBuffHistory_ei_2eproto}, {
      &scc_info_CoopBuffState_ei_2eproto.base,}};

static void InitDefaultsscc_info_CoopBuffState_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopBuffState_default_instance_;
    new (ptr) ::ei::CoopBuffState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopBuffState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopBuffState_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoopBuffState_ei_2eproto}, {}};

static void InitDefaultsscc_info_CoopChickenRunEntry_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopChickenRunEntry_default_instance_;
    new (ptr) ::ei::CoopChickenRunEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopChickenRunEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopChickenRunEntry_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoopChickenRunEntry_ei_2eproto}, {}};

static void InitDefaultsscc_info_CoopCompletionSnapshot_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopCompletionSnapshot_default_instance_;
    new (ptr) ::ei::CoopCompletionSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopCompletionSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoopCompletionSnapshot_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CoopCompletionSnapshot_ei_2eproto}, {
      &scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto.base,}};

static void InitDefaultsscc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopCompletionSnapshot_ContributorSnapshot_default_instance_;
    new (ptr) ::ei::CoopCompletionSnapshot_ContributorSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopCompletionSnapshot_ContributorSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto}, {}};

static void InitDefaultsscc_info_CoopLastChickenRunTimes_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CoopLastChickenRunTimes_default_instance_;
    new (ptr) ::ei::CoopLastChickenRunTimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CoopLastChickenRunTimes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoopLastChickenRunTimes_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CoopLastChickenRunTimes_ei_2eproto}, {
      &scc_info_CoopChickenRunEntry_ei_2eproto.base,}};

static void InitDefaultsscc_info_CraftArtifactRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CraftArtifactRequest_default_instance_;
    new (ptr) ::ei::CraftArtifactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CraftArtifactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CraftArtifactRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CraftArtifactRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_ArtifactSpec_ei_2eproto.base,
      &scc_info_ArtifactInventoryItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_CraftArtifactResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CraftArtifactResponse_default_instance_;
    new (ptr) ::ei::CraftArtifactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CraftArtifactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CraftArtifactResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CraftArtifactResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_CreateCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CreateCoopRequest_default_instance_;
    new (ptr) ::ei::CreateCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CreateCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_CreateCoopResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CreateCoopResponse_default_instance_;
    new (ptr) ::ei::CreateCoopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CreateCoopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateCoopResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateCoopResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_CurrencyFlowBatchRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CurrencyFlowBatchRequest_default_instance_;
    new (ptr) ::ei::CurrencyFlowBatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CurrencyFlowBatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrencyFlowBatchRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CurrencyFlowBatchRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_CurrencyFlowLog_ei_2eproto.base,}};

static void InitDefaultsscc_info_CurrencyFlowLog_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_CurrencyFlowLog_default_instance_;
    new (ptr) ::ei::CurrencyFlowLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::CurrencyFlowLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyFlowLog_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrencyFlowLog_ei_2eproto}, {}};

static void InitDefaultsscc_info_DLCCatalog_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_DLCCatalog_default_instance_;
    new (ptr) ::ei::DLCCatalog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::DLCCatalog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DLCCatalog_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DLCCatalog_ei_2eproto}, {
      &scc_info_DLCItem_ei_2eproto.base,
      &scc_info_ShellSpec_ei_2eproto.base,
      &scc_info_ShellSetSpec_ei_2eproto.base,
      &scc_info_ShellObjectSpec_ei_2eproto.base,
      &scc_info_ShellGroupSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_DLCItem_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_DLCItem_default_instance_;
    new (ptr) ::ei::DLCItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::DLCItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DLCItem_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DLCItem_ei_2eproto}, {}};

static void InitDefaultsscc_info_DailyGiftInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_DailyGiftInfo_default_instance_;
    new (ptr) ::ei::DailyGiftInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::DailyGiftInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DailyGiftInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DailyGiftInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_DeviceInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_DeviceInfo_default_instance_;
    new (ptr) ::ei::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_EggIncAdConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_EggIncAdConfig_default_instance_;
    new (ptr) ::ei::EggIncAdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::EggIncAdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EggIncAdConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EggIncAdConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_EggIncCurrentEvents_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_EggIncCurrentEvents_default_instance_;
    new (ptr) ::ei::EggIncCurrentEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::EggIncCurrentEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EggIncCurrentEvents_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EggIncCurrentEvents_ei_2eproto}, {
      &scc_info_EggIncEvent_ei_2eproto.base,}};

static void InitDefaultsscc_info_EggIncEvent_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_EggIncEvent_default_instance_;
    new (ptr) ::ei::EggIncEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::EggIncEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EggIncEvent_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EggIncEvent_ei_2eproto}, {}};

static void InitDefaultsscc_info_EggIncFirstContactRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_EggIncFirstContactRequest_default_instance_;
    new (ptr) ::ei::EggIncFirstContactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::EggIncFirstContactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EggIncFirstContactRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EggIncFirstContactRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_EggIncFirstContactResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_EggIncFirstContactResponse_default_instance_;
    new (ptr) ::ei::EggIncFirstContactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::EggIncFirstContactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EggIncFirstContactResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EggIncFirstContactResponse_ei_2eproto}, {
      &scc_info_Backup_ei_2eproto.base,}};

static void InitDefaultsscc_info_FarmProductionParams_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_FarmProductionParams_default_instance_;
    new (ptr) ::ei::FarmProductionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::FarmProductionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FarmProductionParams_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FarmProductionParams_ei_2eproto}, {}};

static void InitDefaultsscc_info_GameModifier_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_GameModifier_default_instance_;
    new (ptr) ::ei::GameModifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::GameModifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameModifier_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameModifier_ei_2eproto}, {}};

static void InitDefaultsscc_info_GenericAction_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_GenericAction_default_instance_;
    new (ptr) ::ei::GenericAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::GenericAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenericAction_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GenericAction_ei_2eproto}, {
      &scc_info_ActionKeyValuePair_ei_2eproto.base,
      &scc_info_AppInfo_ei_2eproto.base,
      &scc_info_DeviceInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_GenericActionBatchRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_GenericActionBatchRequest_default_instance_;
    new (ptr) ::ei::GenericActionBatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::GenericActionBatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GenericActionBatchRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GenericActionBatchRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_GenericAction_ei_2eproto.base,}};

static void InitDefaultsscc_info_GetPeriodicalsRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_GetPeriodicalsRequest_default_instance_;
    new (ptr) ::ei::GetPeriodicalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::GetPeriodicalsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPeriodicalsRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPeriodicalsRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_GiftPlayerCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_GiftPlayerCoopRequest_default_instance_;
    new (ptr) ::ei::GiftPlayerCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::GiftPlayerCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GiftPlayerCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GiftPlayerCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_IAPSaleEntry_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_IAPSaleEntry_default_instance_;
    new (ptr) ::ei::IAPSaleEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::IAPSaleEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IAPSaleEntry_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IAPSaleEntry_ei_2eproto}, {}};

static void InitDefaultsscc_info_InGameMail_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_InGameMail_default_instance_;
    new (ptr) ::ei::InGameMail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::InGameMail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InGameMail_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InGameMail_ei_2eproto}, {
      &scc_info_DLCItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_InventorySlot_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_InventorySlot_default_instance_;
    new (ptr) ::ei::InventorySlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::InventorySlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventorySlot_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InventorySlot_ei_2eproto}, {}};

static void InitDefaultsscc_info_JoinCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_JoinCoopRequest_default_instance_;
    new (ptr) ::ei::JoinCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::JoinCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_JoinCoopResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_JoinCoopResponse_default_instance_;
    new (ptr) ::ei::JoinCoopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::JoinCoopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinCoopResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinCoopResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_KickPlayerCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_KickPlayerCoopRequest_default_instance_;
    new (ptr) ::ei::KickPlayerCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::KickPlayerCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KickPlayerCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KickPlayerCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardAnalysis_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardAnalysis_default_instance_;
    new (ptr) ::ei::LeaderboardAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardAnalysis_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardAnalysis_ei_2eproto}, {
      &scc_info_LeaderboardAnalysis_Chunk_ei_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardAnalysis_Chunk_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardAnalysis_Chunk_default_instance_;
    new (ptr) ::ei::LeaderboardAnalysis_Chunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardAnalysis_Chunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardAnalysis_Chunk_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaderboardAnalysis_Chunk_ei_2eproto}, {}};

static void InitDefaultsscc_info_LeaderboardInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardInfo_default_instance_;
    new (ptr) ::ei::LeaderboardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardInfo_ei_2eproto}, {
      &scc_info_LeaderboardInfo_Season_ei_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardInfo_Season_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardInfo_Season_default_instance_;
    new (ptr) ::ei::LeaderboardInfo_Season();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardInfo_Season::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardInfo_Season_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaderboardInfo_Season_ei_2eproto}, {}};

static void InitDefaultsscc_info_LeaderboardRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardRequest_default_instance_;
    new (ptr) ::ei::LeaderboardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardResponse_default_instance_;
    new (ptr) ::ei::LeaderboardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderboardResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderboardResponse_ei_2eproto}, {
      &scc_info_LeaderboardResponse_Entry_ei_2eproto.base,}};

static void InitDefaultsscc_info_LeaderboardResponse_Entry_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaderboardResponse_Entry_default_instance_;
    new (ptr) ::ei::LeaderboardResponse_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaderboardResponse_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardResponse_Entry_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaderboardResponse_Entry_ei_2eproto}, {}};

static void InitDefaultsscc_info_LeaveCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LeaveCoopRequest_default_instance_;
    new (ptr) ::ei::LeaveCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LeaveCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaveCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaveCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_LiveConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_default_instance_;
    new (ptr) ::ei::LiveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LiveConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LiveConfig_ei_2eproto}, {
      &scc_info_LiveConfig_BoostsConfig_ei_2eproto.base,
      &scc_info_LiveConfig_GiftConfig_ei_2eproto.base,
      &scc_info_LiveConfig_MiscConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_LiveConfig_BoostsConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_BoostsConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_BoostsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_BoostsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiveConfig_BoostsConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiveConfig_BoostsConfig_ei_2eproto}, {
      &scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_BoostsConfig_ItemConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_BoostsConfig_ItemConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_BoostsConfig_ItemConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_LiveConfig_GiftConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_GiftConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_GiftConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_GiftConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiveConfig_GiftConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LiveConfig_GiftConfig_ei_2eproto}, {
      &scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto.base,
      &scc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_GiftConfig_GiftMuConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_GiftConfig_GiftMuConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_GiftConfig_GiftMuConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_GiftConfig_GiftValueConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_GiftConfig_GiftValueConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_GiftConfig_GiftValueConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_LiveConfig_MiscConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LiveConfig_MiscConfig_default_instance_;
    new (ptr) ::ei::LiveConfig_MiscConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LiveConfig_MiscConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveConfig_MiscConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiveConfig_MiscConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_LocalContract_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LocalContract_default_instance_;
    new (ptr) ::ei::LocalContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LocalContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalContract_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LocalContract_ei_2eproto}, {
      &scc_info_Contract_ei_2eproto.base,
      &scc_info_ContractEvaluation_ei_2eproto.base,}};

static void InitDefaultsscc_info_LogCompleteMissionPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LogCompleteMissionPayload_default_instance_;
    new (ptr) ::ei::LogCompleteMissionPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LogCompleteMissionPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogCompleteMissionPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogCompleteMissionPayload_ei_2eproto}, {
      &scc_info_MissionRequest_ei_2eproto.base,
      &scc_info_CompleteMissionResponse_ei_2eproto.base,}};

static void InitDefaultsscc_info_LogConsumeArtifactPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LogConsumeArtifactPayload_default_instance_;
    new (ptr) ::ei::LogConsumeArtifactPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LogConsumeArtifactPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogConsumeArtifactPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogConsumeArtifactPayload_ei_2eproto}, {
      &scc_info_ConsumeArtifactRequest_ei_2eproto.base,
      &scc_info_ConsumeArtifactResponse_ei_2eproto.base,}};

static void InitDefaultsscc_info_LogCraftArtifactPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LogCraftArtifactPayload_default_instance_;
    new (ptr) ::ei::LogCraftArtifactPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LogCraftArtifactPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogCraftArtifactPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogCraftArtifactPayload_ei_2eproto}, {
      &scc_info_CraftArtifactRequest_ei_2eproto.base,
      &scc_info_CraftArtifactResponse_ei_2eproto.base,}};

static void InitDefaultsscc_info_LogSetArtifactPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_LogSetArtifactPayload_default_instance_;
    new (ptr) ::ei::LogSetArtifactPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::LogSetArtifactPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogSetArtifactPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogSetArtifactPayload_ei_2eproto}, {
      &scc_info_SetArtifactRequest_ei_2eproto.base,
      &scc_info_SetArtifactResponse_ei_2eproto.base,}};

static void InitDefaultsscc_info_MailDB_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MailDB_default_instance_;
    new (ptr) ::ei::MailDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MailDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailDB_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MailDB_ei_2eproto}, {
      &scc_info_InGameMail_ei_2eproto.base,}};

static void InitDefaultsscc_info_MailState_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MailState_default_instance_;
    new (ptr) ::ei::MailState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MailState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MailState_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MailState_ei_2eproto}, {
      &scc_info_MailState_TipState_ei_2eproto.base,}};

static void InitDefaultsscc_info_MailState_TipState_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MailState_TipState_default_instance_;
    new (ptr) ::ei::MailState_TipState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MailState_TipState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailState_TipState_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MailState_TipState_ei_2eproto}, {}};

static void InitDefaultsscc_info_MissionInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MissionInfo_default_instance_;
    new (ptr) ::ei::MissionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MissionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MissionInfo_ei_2eproto}, {
      &scc_info_MissionInfo_Fuel_ei_2eproto.base,}};

static void InitDefaultsscc_info_MissionInfo_Fuel_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MissionInfo_Fuel_default_instance_;
    new (ptr) ::ei::MissionInfo_Fuel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MissionInfo_Fuel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionInfo_Fuel_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MissionInfo_Fuel_ei_2eproto}, {}};

static void InitDefaultsscc_info_MissionRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MissionRequest_default_instance_;
    new (ptr) ::ei::MissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MissionRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MissionRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_MissionInfo_ei_2eproto.base,
      &scc_info_ArtifactsClientInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_MissionResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MissionResponse_default_instance_;
    new (ptr) ::ei::MissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MissionResponse_ei_2eproto}, {
      &scc_info_MissionInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_MyContracts_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_MyContracts_default_instance_;
    new (ptr) ::ei::MyContracts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::MyContracts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MyContracts_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MyContracts_ei_2eproto}, {
      &scc_info_LocalContract_ei_2eproto.base,
      &scc_info_ContractCoopStatusResponse_ei_2eproto.base,
      &scc_info_ContractPlayerInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_PeriodicalsResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_PeriodicalsResponse_default_instance_;
    new (ptr) ::ei::PeriodicalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::PeriodicalsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PeriodicalsResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_PeriodicalsResponse_ei_2eproto}, {
      &scc_info_SalesInfo_ei_2eproto.base,
      &scc_info_EggIncCurrentEvents_ei_2eproto.base,
      &scc_info_ContractsResponse_ei_2eproto.base,
      &scc_info_ContractEvaluation_ei_2eproto.base,
      &scc_info_ServerGift_ei_2eproto.base,
      &scc_info_CompleteMissionResponse_ei_2eproto.base,
      &scc_info_LiveConfig_ei_2eproto.base,
      &scc_info_MailDB_ei_2eproto.base,
      &scc_info_ContractPlayerInfo_ei_2eproto.base,
      &scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_PeriodicalsResponse_RoyaltyInfo_default_instance_;
    new (ptr) ::ei::PeriodicalsResponse_RoyaltyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::PeriodicalsResponse_RoyaltyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto}, {}};

static void InitDefaultsscc_info_PlayerFarmInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_PlayerFarmInfo_default_instance_;
    new (ptr) ::ei::PlayerFarmInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::PlayerFarmInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlayerFarmInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlayerFarmInfo_ei_2eproto}, {
      &scc_info_Backup_ResearchItem_ei_2eproto.base,
      &scc_info_Backup_ActiveBoost_ei_2eproto.base,
      &scc_info_CompleteArtifact_ei_2eproto.base,
      &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,}};

static void InitDefaultsscc_info_QueryCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_QueryCoopRequest_default_instance_;
    new (ptr) ::ei::QueryCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::QueryCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_QueryCoopResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_QueryCoopResponse_default_instance_;
    new (ptr) ::ei::QueryCoopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::QueryCoopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryCoopResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryCoopResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_ReportPlayerCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ReportPlayerCoopRequest_default_instance_;
    new (ptr) ::ei::ReportPlayerCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ReportPlayerCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportPlayerCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportPlayerCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ReturnEDTPayload_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ReturnEDTPayload_default_instance_;
    new (ptr) ::ei::ReturnEDTPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ReturnEDTPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReturnEDTPayload_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReturnEDTPayload_ei_2eproto}, {}};

static void InitDefaultsscc_info_Reward_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Reward_default_instance_;
    new (ptr) ::ei::Reward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Reward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reward_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Reward_ei_2eproto}, {}};

static void InitDefaultsscc_info_SalesInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SalesInfo_default_instance_;
    new (ptr) ::ei::SalesInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SalesInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SalesInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SalesInfo_ei_2eproto}, {
      &scc_info_IAPSaleEntry_ei_2eproto.base,}};

static void InitDefaultsscc_info_SalesInfoRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SalesInfoRequest_default_instance_;
    new (ptr) ::ei::SalesInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SalesInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SalesInfoRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SalesInfoRequest_ei_2eproto}, {}};

static void InitDefaultsscc_info_SaveBackupResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SaveBackupResponse_default_instance_;
    new (ptr) ::ei::SaveBackupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SaveBackupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveBackupResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveBackupResponse_ei_2eproto}, {
      &scc_info_Backup_ei_2eproto.base,}};

static void InitDefaultsscc_info_SendChickenRunCoopRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SendChickenRunCoopRequest_default_instance_;
    new (ptr) ::ei::SendChickenRunCoopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SendChickenRunCoopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendChickenRunCoopRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendChickenRunCoopRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ServerGift_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ServerGift_default_instance_;
    new (ptr) ::ei::ServerGift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ServerGift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerGift_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerGift_ei_2eproto}, {}};

static void InitDefaultsscc_info_SetArtifactRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SetArtifactRequest_default_instance_;
    new (ptr) ::ei::SetArtifactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SetArtifactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetArtifactRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetArtifactRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_ArtifactInventoryItem_ei_2eproto.base,
      &scc_info_ArtifactSpec_ei_2eproto.base,}};

static void InitDefaultsscc_info_SetArtifactResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SetArtifactResponse_default_instance_;
    new (ptr) ::ei::SetArtifactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SetArtifactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetArtifactResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetArtifactResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_default_instance_;
    new (ptr) ::ei::ShellDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShellDB_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ShellDB_ei_2eproto}, {
      &scc_info_ShellDB_ShellStatus_ei_2eproto.base,
      &scc_info_ShellDB_ShellElementStatus_ei_2eproto.base,
      &scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto.base,
      &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,
      &scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellDB_ChickenConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ChickenConfig_default_instance_;
    new (ptr) ::ei::ShellDB_ChickenConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ChickenConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ChickenConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ChickenConfig_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_FarmConfiguration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_FarmConfiguration_default_instance_;
    new (ptr) ::ei::ShellDB_FarmConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_FarmConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShellDB_FarmConfiguration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ShellDB_FarmConfiguration_ei_2eproto}, {
      &scc_info_ShellDB_ShellConfiguration_ei_2eproto.base,
      &scc_info_ShellDB_ShellSetConfiguration_ei_2eproto.base,
      &scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto.base,
      &scc_info_ShellDB_ChickenConfig_ei_2eproto.base,
      &scc_info_ShellDB_LightingConfig_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellDB_LightingConfig_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_LightingConfig_default_instance_;
    new (ptr) ::ei::ShellDB_LightingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_LightingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellDB_LightingConfig_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ShellDB_LightingConfig_ei_2eproto}, {
      &scc_info_Vector3_ei_2eproto.base,
      &scc_info_Vector4_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellDB_SavedFarmConfiguration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_SavedFarmConfiguration_default_instance_;
    new (ptr) ::ei::ShellDB_SavedFarmConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_SavedFarmConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellDB_SavedFarmConfiguration_ei_2eproto}, {
      &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellDB_ShellConfiguration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellConfiguration_default_instance_;
    new (ptr) ::ei::ShellDB_ShellConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellConfiguration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellConfiguration_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ShellElementStatus_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellElementStatus_default_instance_;
    new (ptr) ::ei::ShellDB_ShellElementStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellElementStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellElementStatus_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellElementStatus_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ShellGroupConfiguration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellGroupConfiguration_default_instance_;
    new (ptr) ::ei::ShellDB_ShellGroupConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellGroupConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellGroupConfiguration_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ShellSetConfiguration_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellSetConfiguration_default_instance_;
    new (ptr) ::ei::ShellDB_ShellSetConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellSetConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellSetConfiguration_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellSetConfiguration_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ShellSetVariationStatus_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellSetVariationStatus_default_instance_;
    new (ptr) ::ei::ShellDB_ShellSetVariationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellSetVariationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellSetVariationStatus_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellDB_ShellStatus_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellDB_ShellStatus_default_instance_;
    new (ptr) ::ei::ShellDB_ShellStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellDB_ShellStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellDB_ShellStatus_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellDB_ShellStatus_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellGroupSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellGroupSpec_default_instance_;
    new (ptr) ::ei::ShellGroupSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellGroupSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellGroupSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellGroupSpec_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellObjectSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellObjectSpec_default_instance_;
    new (ptr) ::ei::ShellObjectSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellObjectSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellObjectSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellObjectSpec_ei_2eproto}, {
      &scc_info_ShellObjectSpec_LODPiece_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellObjectSpec_LODPiece_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellObjectSpec_LODPiece_default_instance_;
    new (ptr) ::ei::ShellObjectSpec_LODPiece();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellObjectSpec_LODPiece::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellObjectSpec_LODPiece_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellObjectSpec_LODPiece_ei_2eproto}, {
      &scc_info_DLCItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellPopularityStats_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellPopularityStats_default_instance_;
    new (ptr) ::ei::ShellPopularityStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellPopularityStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellPopularityStats_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellPopularityStats_ei_2eproto}, {
      &scc_info_ShellPopularityStats_Entry_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellPopularityStats_Entry_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellPopularityStats_Entry_default_instance_;
    new (ptr) ::ei::ShellPopularityStats_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellPopularityStats_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellPopularityStats_Entry_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellPopularityStats_Entry_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellSetSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellSetSpec_default_instance_;
    new (ptr) ::ei::ShellSetSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellSetSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellSetSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ShellSetSpec_ei_2eproto}, {
      &scc_info_ShellSetSpec_VariationSpec_ei_2eproto.base,
      &scc_info_DLCItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellSetSpec_VariationSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellSetSpec_VariationSpec_default_instance_;
    new (ptr) ::ei::ShellSetSpec_VariationSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellSetSpec_VariationSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellSetSpec_VariationSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellSetSpec_VariationSpec_ei_2eproto}, {}};

static void InitDefaultsscc_info_ShellShowcase_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellShowcase_default_instance_;
    new (ptr) ::ei::ShellShowcase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellShowcase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellShowcase_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellShowcase_ei_2eproto}, {
      &scc_info_ShellShowcaseListingInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellShowcaseListingInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellShowcaseListingInfo_default_instance_;
    new (ptr) ::ei::ShellShowcaseListingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellShowcaseListingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellShowcaseListingInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellShowcaseListingInfo_ei_2eproto}, {
      &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellShowcaseListingSet_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellShowcaseListingSet_default_instance_;
    new (ptr) ::ei::ShellShowcaseListingSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellShowcaseListingSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellShowcaseListingSet_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellShowcaseListingSet_ei_2eproto}, {
      &scc_info_ShellShowcaseListingInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellSpec_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellSpec_default_instance_;
    new (ptr) ::ei::ShellSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellSpec_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ShellSpec_ei_2eproto}, {
      &scc_info_ShellSpec_ShellPiece_ei_2eproto.base,
      &scc_info_DLCItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellSpec_ShellPiece_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellSpec_ShellPiece_default_instance_;
    new (ptr) ::ei::ShellSpec_ShellPiece();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellSpec_ShellPiece::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellSpec_ShellPiece_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellSpec_ShellPiece_ei_2eproto}, {
      &scc_info_DLCItem_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellsActionBatch_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellsActionBatch_default_instance_;
    new (ptr) ::ei::ShellsActionBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellsActionBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellsActionBatch_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ShellsActionBatch_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_ShellsActionLog_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShellsActionLog_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShellsActionLog_default_instance_;
    new (ptr) ::ei::ShellsActionLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShellsActionLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShellsActionLog_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShellsActionLog_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_ShowcaseRoyaltyDeliveryConfirmation_default_instance_;
    new (ptr) ::ei::ShowcaseRoyaltyDeliveryConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::ShowcaseRoyaltyDeliveryConfirmation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_SubmitShellShowcaseRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SubmitShellShowcaseRequest_default_instance_;
    new (ptr) ::ei::SubmitShellShowcaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SubmitShellShowcaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubmitShellShowcaseRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubmitShellShowcaseRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionChangeHintRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_SubscriptionChangeHintRequest_default_instance_;
    new (ptr) ::ei::SubscriptionChangeHintRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::SubscriptionChangeHintRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionChangeHintRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriptionChangeHintRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_TipsDB_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_TipsDB_default_instance_;
    new (ptr) ::ei::TipsDB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::TipsDB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TipsDB_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TipsDB_ei_2eproto}, {
      &scc_info_InGameMail_ei_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCoopPermissionsRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UpdateCoopPermissionsRequest_default_instance_;
    new (ptr) ::ei::UpdateCoopPermissionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UpdateCoopPermissionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCoopPermissionsRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateCoopPermissionsRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCoopPermissionsResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UpdateCoopPermissionsResponse_default_instance_;
    new (ptr) ::ei::UpdateCoopPermissionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UpdateCoopPermissionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateCoopPermissionsResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateCoopPermissionsResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_UserDataInfoRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UserDataInfoRequest_default_instance_;
    new (ptr) ::ei::UserDataInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UserDataInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDataInfoRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserDataInfoRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,}};

static void InitDefaultsscc_info_UserDataInfoResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UserDataInfoResponse_default_instance_;
    new (ptr) ::ei::UserDataInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UserDataInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDataInfoResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserDataInfoResponse_ei_2eproto}, {}};

static void InitDefaultsscc_info_UserSubscriptionInfo_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UserSubscriptionInfo_default_instance_;
    new (ptr) ::ei::UserSubscriptionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UserSubscriptionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSubscriptionInfo_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSubscriptionInfo_ei_2eproto}, {
      &scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto.base,}};

static void InitDefaultsscc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UserSubscriptionInfo_HistoryEntry_default_instance_;
    new (ptr) ::ei::UserSubscriptionInfo_HistoryEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UserSubscriptionInfo_HistoryEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto}, {}};

static void InitDefaultsscc_info_UserVerificationAnalysis_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_UserVerificationAnalysis_default_instance_;
    new (ptr) ::ei::UserVerificationAnalysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::UserVerificationAnalysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserVerificationAnalysis_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserVerificationAnalysis_ei_2eproto}, {}};

static void InitDefaultsscc_info_Vector3_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Vector3_default_instance_;
    new (ptr) ::ei::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_ei_2eproto}, {}};

static void InitDefaultsscc_info_Vector4_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_Vector4_default_instance_;
    new (ptr) ::ei::Vector4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::Vector4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector4_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector4_ei_2eproto}, {}};

static void InitDefaultsscc_info_VerifyPurchaseRequest_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_VerifyPurchaseRequest_default_instance_;
    new (ptr) ::ei::VerifyPurchaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::VerifyPurchaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VerifyPurchaseRequest_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VerifyPurchaseRequest_ei_2eproto}, {
      &scc_info_BasicRequestInfo_ei_2eproto.base,
      &scc_info_GenericAction_ei_2eproto.base,}};

static void InitDefaultsscc_info_VerifyPurchaseResponse_ei_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ei::_VerifyPurchaseResponse_default_instance_;
    new (ptr) ::ei::VerifyPurchaseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ei::VerifyPurchaseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyPurchaseResponse_ei_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyPurchaseResponse_ei_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ei_2eproto[194];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ei_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ei_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ei_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ei::Vector3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector3, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, x_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, y_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, z_),
  PROTOBUF_FIELD_OFFSET(::ei::Vector4, w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, sfx_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, music_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, low_battery_mode_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, low_performance_mode_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, force_touch_chicken_btn_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, notifications_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, last_notification_query_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, notifications_on_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, notify_daily_gift_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, low_performance_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, auto_stop_fueling_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, max_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, hide_cc_status_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, contracts_widget_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, last_backup_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, coppa_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, coppa_restricted_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, gdpr_consent_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, gdpr_age_restricted_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, gdpr_consent_given_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, age_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, age_restricted_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, data_collection_consent_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, data_collection_consent_given_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, last_day_age_queried_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, user_ads_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, user_cloud_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, user_analytics_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Settings, user_personalized_ads_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  20,
  6,
  7,
  21,
  22,
  23,
  24,
  8,
  19,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  17,
  18,
  16,
  25,
  26,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, intro_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, click_tutorial_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, buy_hab_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, hire_vehicle_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, q_num_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, s_num_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, contracts_tab_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, contract_info_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, join_coop_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, switch_farm_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Tutorial, tutorial_shown_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, egg_totals_old_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, egg_totals_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, unlimited_chickens_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, refill_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, warp_1_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, warp_8_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, boosts_used_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, video_doubler_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, drone_takedowns_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, drone_takedowns_elite_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, num_prestiges_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, num_piggy_breaks_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, iap_packs_purchased_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, piggy_found_full_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, time_piggy_filled_realtime_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, time_piggy_full_gametime_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Stats, lost_piggy_increments_),
  ~0u,
  ~0u,
  5,
  0,
  2,
  3,
  10,
  1,
  4,
  7,
  6,
  8,
  9,
  14,
  15,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, current_farm_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, max_egg_reached_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, golden_eggs_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, golden_eggs_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, uncliamed_golden_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, unclaimed_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, soul_eggs_d_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, unclaimed_soul_eggs_d_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, eggs_of_prophecy_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, unclaimed_eggs_of_prophecy_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, shell_scripts_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, shell_scripts_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, unclaimed_shell_scripts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, prestige_cash_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, prestige_soul_boost_cash_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, lifetime_cash_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, piggy_bank_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, piggy_full_alert_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, permit_level_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, epic_research_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, hyperloop_station_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, next_daily_gift_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, last_daily_gift_collected_day_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, num_daily_gifts_collected_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, news_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, last_news_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, current_multiplier_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, current_multiplier_expiration_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, achievements_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, max_farm_size_reached_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, egg_medal_level_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, long_idle_notification_set_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, long_idle_notification_threshold_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, long_idle_reward_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, boosts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, total_time_cheats_detected_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, force_elite_contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Game, new_player_event_end_time_),
  16,
  32,
  0,
  1,
  12,
  2,
  13,
  26,
  27,
  14,
  15,
  29,
  30,
  31,
  3,
  25,
  4,
  5,
  20,
  10,
  ~0u,
  21,
  6,
  11,
  17,
  ~0u,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  22,
  18,
  19,
  ~0u,
  24,
  23,
  28,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, infusing_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, item_being_infused_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, spec_being_infused_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, egg_type_infusing_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, infusing_eggs_required_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, eggs_infused_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, flow_percentage_artifacts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, fueling_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, tank_filling_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, tank_level_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, tank_fuels_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, tank_limits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, last_fueled_ship_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, inventory_score_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, crafting_xp_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, intro_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Artifacts, infusing_enabled_deprecated_),
  5,
  0,
  1,
  13,
  2,
  3,
  12,
  14,
  6,
  11,
  ~0u,
  ~0u,
  4,
  9,
  10,
  7,
  8,
  15,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Shells, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Shells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Shells, intro_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Shells, contracts_intro_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Shells, num_new_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, egg_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, farm_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, cash_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, cash_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, unclaimed_cash_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, last_step_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, num_chickens_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, num_chickens_unsettled_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, num_chickens_running_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, eggs_laid_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, eggs_shipped_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, eggs_paid_for_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, silos_owned_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, habs_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, hab_population_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, hab_population_indound_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, hab_incubator_popuplation_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, hatchery_population_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, vehicles_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, train_length_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, common_research_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, active_boosts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, last_cash_boost_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, time_cheats_detected_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, time_cheat_debt_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, boost_tokens_received_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, boost_tokens_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, boost_tokens_given_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, unclaimed_boost_tokens_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Simulation, gametime_until_next_boost_token_),
  21,
  22,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  19,
  9,
  11,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  20,
  12,
  13,
  14,
  15,
  17,
  16,
  18,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, current_mission_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, reference_value_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, current_missions_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Mission, missions_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, chicken_btn_pref_big_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, free_hatchery_refill_given_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, last_share_farm_value_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, last_share_swarm_farm_value_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, last_share_swarm_size_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, last_prestige_alert_soul_eggs_deprecated_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, friend_rank_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, friend_rank_pop_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, global_rank_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, global_rank_pop_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, challenges_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, trophy_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, ar_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, contracts_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, contracts_alert_v2_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, coop_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, coop_alert_v2_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, switch_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, egg_of_prophecy_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, boost_token_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, soul_egg_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, backup_reminder_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, max_button_alert_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_Misc, mission_target_alert_),
  4,
  5,
  20,
  21,
  22,
  23,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ResearchItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ResearchItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ResearchItem, id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ResearchItem, level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_NewsHeadline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_NewsHeadline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_NewsHeadline, id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_NewsHeadline, read_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_AchievementInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_AchievementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_AchievementInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_AchievementInfo, achieved_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ActiveBoost, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ActiveBoost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ActiveBoost, boost_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ActiveBoost, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_ActiveBoost, reference_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_OwnedBoost, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_OwnedBoost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_OwnedBoost, boost_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_OwnedBoost, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::Backup_MissionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup_MissionInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_MissionInfo, completed_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup_MissionInfo, reference_value_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::Backup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Backup, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, game_services_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, push_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, device_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, approx_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, version_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, force_offer_backup_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, force_backup_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, settings_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, tutorial_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, stats_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, game_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, artifacts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, shells_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, sim_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, farms_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, mission_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, misc_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, artifacts_db_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, shell_db_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, read_mail_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, mail_state_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, checksum_),
  PROTOBUF_FIELD_OFFSET(::ei::Backup, signature_),
  0,
  4,
  2,
  5,
  3,
  1,
  20,
  21,
  22,
  23,
  7,
  8,
  9,
  10,
  15,
  18,
  11,
  ~0u,
  12,
  13,
  14,
  16,
  17,
  ~0u,
  19,
  24,
  6,
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, game_services_id_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, username_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactRequest, platform_),
  5,
  1,
  0,
  4,
  2,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, ids_transferred_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncFirstContactResponse, backup_),
  0,
  ~0u,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncAdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncAdConfig, network_priority_),
  PROTOBUF_FIELD_OFFSET(::ei::DailyGiftInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::DailyGiftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::DailyGiftInfo, current_day_),
  PROTOBUF_FIELD_OFFSET(::ei::DailyGiftInfo, seconds_to_next_day_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, piggy_found_full_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, seconds_full_realtime_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, seconds_full_gametime_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, lost_increments_),
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfoRequest, current_client_version_),
  0,
  2,
  3,
  1,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, product_id_),
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, discount_string_),
  PROTOBUF_FIELD_OFFSET(::ei::IAPSaleEntry, sale_id_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SalesInfo, sales_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, type_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, multiplier_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, subtitle_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, start_time_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, duration_),
  PROTOBUF_FIELD_OFFSET(::ei::EggIncEvent, cc_only_),
  0,
  3,
  1,
  4,
  2,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncCurrentEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::EggIncCurrentEvents, events_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, advertising_id_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, form_factor_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, device_name_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, platform_version_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, locale_country_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, locale_language_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, gpu_vendor_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, gpu_model_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, device_bucket_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, screen_width_),
  PROTOBUF_FIELD_OFFSET(::ei::DeviceInfo, screen_height_),
  0,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, version_str_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, sessions_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, num_prestiges_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, current_egg_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, gold_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, gold_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, current_mission_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, piggy_size_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, num_piggy_breaks_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, verified_piggy_breaks_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, iap_packs_purchased_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, permit_level_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, video_doubler_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, drone_takedowns_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, drone_takedowns_elite_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, trophies_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, egg_level_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, struggle_factor_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, piggy_found_full_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, time_piggy_full_realtime_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, time_piggy_full_gametime_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, lost_piggy_increments_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, sale_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, unlimited_chickens_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, refill_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, short_warp_uses_),
  PROTOBUF_FIELD_OFFSET(::ei::AppInfo, long_warp_uses_),
  0,
  2,
  3,
  4,
  6,
  5,
  8,
  7,
  10,
  9,
  25,
  12,
  11,
  15,
  18,
  19,
  26,
  20,
  21,
  27,
  28,
  22,
  23,
  24,
  1,
  13,
  14,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::ei::ActionKeyValuePair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ActionKeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ActionKeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::ei::ActionKeyValuePair, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, cc_user_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, advertising_id_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, approx_time_dep_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, approx_time_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, action_name_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, data_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, app_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericAction, device_),
  0,
  6,
  2,
  5,
  7,
  1,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::GenericActionBatchRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericActionBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::GenericActionBatchRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::GenericActionBatchRequest, actions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, sku_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, original_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, receipt_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, sandbox_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseRequest, log_),
  6,
  0,
  1,
  4,
  2,
  3,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseResponse, verified_),
  PROTOBUF_FIELD_OFFSET(::ei::VerifyPurchaseResponse, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, approx_time_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, currency_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, amount_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, location_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, version_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, tickets_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowLog, gold_spent_),
  0,
  4,
  9,
  5,
  1,
  2,
  3,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowBatchRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowBatchRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::CurrencyFlowBatchRequest, logs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::Reward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Reward, reward_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Reward, reward_sub_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Reward, reward_amount_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::GameModifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::GameModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::GameModifier, dimension_),
  PROTOBUF_FIELD_OFFSET(::ei::GameModifier, value_),
  PROTOBUF_FIELD_OFFSET(::ei::GameModifier, description_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, type_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, target_amount_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, reward_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, reward_sub_type_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, reward_amount_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_Goal, target_soul_eggs_),
  4,
  1,
  5,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GoalSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GoalSet, goals_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, goals_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, modifiers_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract_GradeSpec, length_seconds_),
  1,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::Contract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::Contract, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, name_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, description_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, egg_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, goals_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, goal_sets_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, grade_specs_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, season_id_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, coop_allowed_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, max_coop_size_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, max_boosts_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, minutes_per_token_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, chicken_run_cooldown_minutes_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, start_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, length_seconds_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, max_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, min_client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, leggacy_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, cc_only_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, default_shell_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, debug_),
  PROTOBUF_FIELD_OFFSET(::ei::Contract, key_),
  0,
  1,
  2,
  16,
  ~0u,
  ~0u,
  ~0u,
  4,
  11,
  7,
  8,
  17,
  18,
  15,
  5,
  6,
  9,
  10,
  12,
  13,
  ~0u,
  14,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, total_cxp_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, season_cxp_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, grade_score_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, target_grade_score_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, target_soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, grade_progress_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, issues_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, issue_score_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, last_evaluation_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, last_evaluation_version_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractPlayerInfo, unread_evaluations_),
  2,
  1,
  10,
  5,
  7,
  8,
  6,
  9,
  ~0u,
  11,
  3,
  4,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, cxp_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, replay_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, cxp_change_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, grade_performance_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, old_league_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, old_goals_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, contribution_ratio_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, completion_percent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, original_length_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, coop_size_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, solo_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, last_contribution_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, completion_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, chicken_runs_sent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, gift_tokens_sent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, gift_tokens_received_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, gift_token_value_sent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, gift_token_value_received_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, boost_token_allotment_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, buff_time_value_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, teamwork_score_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, other_bonuses_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, counted_in_season_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, season_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, time_cheats_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, issues_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, notes_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, version_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, evaluation_start_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluation, status_),
  1,
  2,
  4,
  20,
  27,
  5,
  13,
  21,
  6,
  7,
  8,
  12,
  19,
  22,
  26,
  25,
  9,
  10,
  11,
  14,
  28,
  29,
  18,
  17,
  15,
  16,
  23,
  0,
  24,
  ~0u,
  ~0u,
  3,
  31,
  30,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCitation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCitation, issue_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCitation, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCitation, grade_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch_Pair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch_Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch_Pair, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch_Pair, cev_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractEvaluationBatch, evals_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, contribution_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, last_contribution_time_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, finalized_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, tokens_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot_ContributorSnapshot, tokens_spent_),
  1,
  5,
  6,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopCompletionSnapshot, contributors_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, version_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, build_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, country_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, language_),
  PROTOBUF_FIELD_OFFSET(::ei::BasicRequestInfo, debug_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, target_se_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, cps_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, elr_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, earnings_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, time_efficacy_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, hab_capacity_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams, epic_research_budget_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig_ContractGradeSimConfig, goal_params_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimConfig, grade_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPoll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPoll, client_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPollResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPollResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPollResponse, contract_to_simulate_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimPollResponse, sim_config_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate_GoalInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate_GoalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate_GoalInfo, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate_GoalInfo, goal_index_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate_GoalInfo, projected_eggs_laid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate, contract_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractSimResultUpdate, goal_infos_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::ContractsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractsRequest, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsRequest, client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsRequest, user_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, warning_message_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, total_eop_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, server_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractsResponse, max_eop_),
  ~0u,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusRequest, client_version_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, farm_population_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, farm_capacity_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, elr_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, ihr_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, sr_),
  PROTOBUF_FIELD_OFFSET(::ei::FarmProductionParams, delivered_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, eggs_of_prophecy_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, permit_level_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, hyperloop_station_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, egg_medal_level_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, epic_research_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, egg_type_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, cash_on_hand_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, habs_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, hab_population_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, hab_capacity_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, vehicles_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, train_length_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, silos_owned_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, common_research_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, active_boosts_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, boost_tokens_on_hand_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, equipped_artifacts_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, artifact_inventory_score_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, farm_appearance_),
  PROTOBUF_FIELD_OFFSET(::ei::PlayerFarmInfo, timestamp_),
  10,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  11,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  ~0u,
  ~0u,
  7,
  ~0u,
  8,
  0,
  9,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, uuid_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, contribution_amount_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, contribution_rate_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, production_params_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, farm_info_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, rank_change_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, recently_active_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, active_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, cc_member_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, leech_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, finalized_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, time_cheat_detected_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, push_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, ban_votes_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, autojoined_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, boost_tokens_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, boost_tokens_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, buff_history_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ContributionInfo, chicken_run_cooldown_),
  4,
  0,
  1,
  3,
  7,
  8,
  11,
  5,
  6,
  10,
  19,
  20,
  21,
  22,
  15,
  16,
  9,
  2,
  12,
  17,
  13,
  14,
  ~0u,
  18,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, amount_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_CoopGift, tracking_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ChickenRun, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ChickenRun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ChickenRun, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ChickenRun, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse_ChickenRun, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, response_status_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, total_amount_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, contributors_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, auto_generated_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, public__),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, creator_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, seconds_since_all_goals_achieved_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, all_goals_achieved_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, all_members_reporting_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, grace_period_seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, cleared_for_exit_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, gifts_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, chicken_runs_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, local_timestamp_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusResponse, last_sync_),
  15,
  0,
  3,
  1,
  14,
  ~0u,
  6,
  7,
  2,
  4,
  12,
  8,
  9,
  5,
  10,
  ~0u,
  ~0u,
  11,
  13,
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, contract_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, accepted_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, time_accepted_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, cancelled_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, new__),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_shared_end_time_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_simulation_end_time_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_grace_period_end_time_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_contribution_finalized_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_last_uploaded_contribution_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, coop_share_farm_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, last_amount_when_reward_given_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, num_goals_achieved_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, boosts_used_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, points_replay_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, league_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, last_nag_time_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, evaluation_),
  PROTOBUF_FIELD_OFFSET(::ei::LocalContract, reported_uuids_),
  2,
  0,
  7,
  4,
  8,
  9,
  5,
  20,
  12,
  10,
  13,
  1,
  18,
  6,
  14,
  11,
  19,
  15,
  17,
  16,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, contract_ids_seen_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, archive_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, current_coop_statuses_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, last_cpi_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, initial_grade_revealed_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, last_grade_progress_shown_),
  PROTOBUF_FIELD_OFFSET(::ei::MyContracts, show_advanced_evaluations_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, league_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopRequest, client_version_),
  2,
  0,
  1,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, exists_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, full_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, expired_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, different_league_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, different_grade_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, cc_only_),
  PROTOBUF_FIELD_OFFSET(::ei::QueryCoopResponse, banned_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, public__),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, cc_only_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, allow_all_grades_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, eop_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, league_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, points_replay_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopRequest, client_version_),
  4,
  0,
  1,
  12,
  13,
  14,
  5,
  2,
  3,
  8,
  11,
  9,
  10,
  15,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::CreateCoopResponse, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, eop_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, league_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, points_replay_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopRequest, client_version_),
  4,
  0,
  1,
  2,
  3,
  7,
  11,
  9,
  10,
  12,
  5,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, message_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, banned_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, match_percent_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, num_members_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::JoinCoopResponse, can_start_),
  3,
  0,
  4,
  1,
  2,
  7,
  6,
  8,
  9,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, eop_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, league_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, points_replay_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::AutoJoinCoopRequest, client_version_),
  3,
  0,
  1,
  2,
  4,
  8,
  9,
  10,
  11,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, public__),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsRequest, client_version_),
  3,
  0,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::UpdateCoopPermissionsResponse, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, player_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaveCoopRequest, client_version_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, player_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, requesting_user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::ei::GiftPlayerCoopRequest, client_version_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, player_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, requesting_user_name_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, farm_pop_),
  PROTOBUF_FIELD_OFFSET(::ei::SendChickenRunCoopRequest, client_version_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ReportPlayerCoopRequest, reason_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, player_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, reason_),
  PROTOBUF_FIELD_OFFSET(::ei::KickPlayerCoopRequest, client_version_),
  4,
  0,
  1,
  2,
  3,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, coop_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, push_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, rate_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, time_cheats_detected_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, eop_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, boost_tokens_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, boost_tokens_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, hide_cc_status_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, production_params_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, farm_info_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, egg_laying_rate_buff_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateRequest, earnings_buff_),
  4,
  0,
  1,
  2,
  3,
  7,
  8,
  10,
  9,
  13,
  11,
  12,
  14,
  5,
  6,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateResponse, finalized_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateResponse, exists_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractCoopStatusUpdateResponse, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffState, egg_laying_rate_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffState, earnings_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffState, server_timestamp_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopBuffHistory, history_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopChickenRunEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopChickenRunEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopChickenRunEntry, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CoopChickenRunEntry, server_timestamp_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::CoopLastChickenRunTimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CoopLastChickenRunTimes, entries_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, start_index_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, end_index_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, high_score_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, low_score_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, start_cursor_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis_Chunk, end_cursor_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, chunks_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, count_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, high_score_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, low_score_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardAnalysis, cursor_),
  ~0u,
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo_Season, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo_Season, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo_Season, scope_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo_Season, name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo, seasons_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardInfo, all_time_scope_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardRequest, scope_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardRequest, grade_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse_Entry, rank_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse_Entry, alias_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse_Entry, score_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, scope_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, top_entries_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, count_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, rank_),
  PROTOBUF_FIELD_OFFSET(::ei::LeaderboardResponse, score_),
  0,
  1,
  ~0u,
  2,
  4,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ContractsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractsArchive, archive_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, action_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, approx_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, dest_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, contract_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, coop_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, autojoin_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, replay_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, points_replay_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, reward_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, reward_subtype_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, reward_amount_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, goal_index_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, boost_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, tokens_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, kick_reason_),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, public__),
  PROTOBUF_FIELD_OFFSET(::ei::ContractAction, cc_only_),
  0,
  1,
  7,
  2,
  3,
  4,
  10,
  8,
  11,
  12,
  9,
  5,
  15,
  14,
  6,
  16,
  17,
  13,
  18,
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoRequest, backup_checksum_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoResponse, backup_checksum_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoResponse, backup_total_cash_),
  PROTOBUF_FIELD_OFFSET(::ei::UserDataInfoResponse, coop_memberships_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ClearAllUserDataRequest, backup_checksum_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, reward_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, reward_sub_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ServerGift, reward_amount_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, boost_id_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, price_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, token_price_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig_ItemConfig, se_required_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig, item_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_BoostsConfig, cash_boost_cooloff_time_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, gift_id_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, amount_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, rand_min_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, rand_max_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, video_min_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftValueConfig, video_max_),
  0,
  3,
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftMuConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftMuConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftMuConfig, min_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftMuConfig, max_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig_GiftMuConfig, overall_mult_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, gift_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, gift_mu_min_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, gift_mu_max_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, gift_mu_overall_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, random_gift_mu_config_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_gift_mu_config_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, package_interval_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_offer_interval_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_offer_interval_contract_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_offer_interval_piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_offer_interval_piggy_extra_full_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, video_reset_on_idle_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, package_interval_contract_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, package_interval_piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, package_interval_piggy_extra_full_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_GiftConfig, package_reset_on_idle_),
  ~0u,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  7,
  8,
  9,
  14,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, ask_to_track_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, ask_to_track_min_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, ask_to_track_message_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, ask_to_track_show_pre_dialog_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, ask_to_track_after_privacy_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, chicken_run_boost_percentage_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, shells_intro_tickets_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, shells_max_free_chicken_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, shells_intro_alert_threshold_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, shells_lighting_controls_price_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, contracts_expert_league_min_soul_power_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, new_player_event_duration_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, contracts_club_available_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig_MiscConfig, contracts_beta_),
  2,
  1,
  0,
  3,
  4,
  7,
  6,
  8,
  9,
  13,
  10,
  11,
  5,
  12,
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, config_id_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, boosts_config_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, gift_config_),
  PROTOBUF_FIELD_OFFSET(::ei::LiveConfig, misc_config_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, id_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, title_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, date_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, message_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, action_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, url_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, app_link_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, app_link_extra_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, image_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, image_width_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, image_height_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, builds_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, min_client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, max_client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, min_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, min_mystical_bonus_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, user_type_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, min_piggy_breaks_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, gold_tip_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, tip_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, priority_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, min_days_since_last_tip_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, max_retries_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, days_until_retry_),
  PROTOBUF_FIELD_OFFSET(::ei::InGameMail, category_),
  0,
  1,
  5,
  2,
  3,
  4,
  15,
  6,
  8,
  18,
  19,
  10,
  ~0u,
  11,
  14,
  12,
  13,
  16,
  17,
  9,
  21,
  24,
  20,
  22,
  23,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::MailDB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MailDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MailDB, mail_),
  PROTOBUF_FIELD_OFFSET(::ei::MailDB, tips_db_data_),
  PROTOBUF_FIELD_OFFSET(::ei::MailDB, tips_checksum_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::TipsDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::TipsDB, tips_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState_TipState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState_TipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MailState_TipState, id_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState_TipState, reads_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState_TipState, time_read_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::MailState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MailState, read_mail_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState, tips_states_),
  PROTOBUF_FIELD_OFFSET(::ei::MailState, tips_checksum_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse_RoyaltyInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse_RoyaltyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse_RoyaltyInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse_RoyaltyInfo, amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, sales_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, events_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, evaluations_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, gifts_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, artifact_cases_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, live_config_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, mail_bag_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, contract_player_info_),
  PROTOBUF_FIELD_OFFSET(::ei::PeriodicalsResponse, showcase_royalties_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, piggy_full_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, piggy_found_full_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, seconds_full_realtime_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, seconds_full_gametime_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, lost_increments_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, mystical_earnings_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, eop_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, contracts_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, artifacts_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, current_client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::GetPeriodicalsRequest, debug_),
  1,
  0,
  6,
  7,
  2,
  3,
  5,
  4,
  12,
  13,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, contracts_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, artifacts_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, fuel_tank_unlocked_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, pro_permit_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, ultra_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigRequest, tips_checksum_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ConfigResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ConfigResponse, live_config_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigResponse, mail_bag_),
  PROTOBUF_FIELD_OFFSET(::ei::ConfigResponse, dlc_catalog_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, device_ad_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, ad_network_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRawData, json_data_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, ad_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, ad_network_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, campaign_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, keyword_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, extra_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, click_date_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, download_date_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionRow, approx_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, device_ad_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, network_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, attribution_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, org_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, org_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, campaign_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, campaign_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, click_date_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, conversion_date_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, conversion_type_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, geo_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, adgroup_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, adgroup_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, keyword_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, keyword_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, keyword_extra_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, creativeset_name_),
  PROTOBUF_FIELD_OFFSET(::ei::AdAttributionInfo, creativeset_id_),
  0,
  1,
  17,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo_LaunchCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo_LaunchCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo_LaunchCount, ship_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo_LaunchCount, num_launches_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo_LaunchCount, launch_points_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, mission_capacity_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, mission_duration_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, mission_ftl_duration_mult_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsClientInfo, launch_counts_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo_Fuel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo_Fuel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo_Fuel, egg_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo_Fuel, amount_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, ship_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, duration_type_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, fuel_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, level_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, capacity_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, quality_bump_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, target_artifact_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, start_time_derived_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, mission_log_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionInfo, identifier_),
  2,
  3,
  6,
  ~0u,
  10,
  4,
  7,
  9,
  11,
  5,
  8,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, level_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, rarity_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactSpec, egg_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::CompleteArtifact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteArtifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CompleteArtifact, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteArtifact, stones_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, artifact_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactInventoryItem, server_id_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::InventorySlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::InventorySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::InventorySlot, occupied_),
  PROTOBUF_FIELD_OFFSET(::ei::InventorySlot, item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationRequest, client_version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, duration_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, seconds_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, quality_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, min_quality_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, max_quality_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, capacity_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, level_capacity_bump_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration, level_quality_bump_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, ship_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, durations_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, level_mission_requirements_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_MissionParameters, capacity_deprecated_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, base_quality_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, odds_multiplier_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, value_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, crafting_price_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, crafting_price_low_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, crafting_price_domain_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, crafting_price_curve_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_ArtifactParameters, crafting_xp_),
  0,
  1,
  3,
  2,
  4,
  5,
  8,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_CraftingLevelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_CraftingLevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_CraftingLevelInfo, xp_required_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse_CraftingLevelInfo, rarity_mult_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse, mission_parameters_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse, artifact_parameters_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsConfigurationResponse, crafting_level_infos_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, client_version_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, info_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionRequest, client_info_),
  2,
  4,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::MissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::MissionResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::MissionResponse, info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse_SecureArtifactSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse_SecureArtifactSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse_SecureArtifactSpec, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse_SecureArtifactSpec, server_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, info_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, artifacts_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, other_rewards_),
  PROTOBUF_FIELD_OFFSET(::ei::CompleteMissionResponse, ei_user_id_),
  2,
  1,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, contract_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, league_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, grade_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, goal_index_),
  PROTOBUF_FIELD_OFFSET(::ei::CollectContractArtifactRewardsRequest, best_ship_),
  1,
  0,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, gold_price_paid_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, crafting_count_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, crafting_xp_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactRequest, ingredients_),
  2,
  0,
  1,
  3,
  4,
  6,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, rarity_achieved_),
  PROTOBUF_FIELD_OFFSET(::ei::CraftArtifactResponse, server_id_),
  2,
  1,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, ei_user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, artifact_server_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, additional_server_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, additional_item_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactRequest, quantity_),
  3,
  0,
  2,
  1,
  4,
  ~0u,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, additional_item_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, byproducts_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, other_rewards_),
  PROTOBUF_FIELD_OFFSET(::ei::ConsumeArtifactResponse, ei_user_id_),
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, demote_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, delete__),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticateArtifactResponse, ei_user_id_),
  2,
  1,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, artifact_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, stones_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactRequest, gold_price_paid_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactResponse, original_item_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SetArtifactResponse, ei_user_id_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSlot, occupied_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSlot, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSet, slots_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_ActiveArtifactSet, uid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, spec_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, discovered_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, craftable_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, recipe_discovered_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, seen_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB_CraftableArtifact, count_),
  0,
  2,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, inventory_items_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, item_sequence_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, inventory_slots_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, active_artifacts_deprecated_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, active_artifact_sets_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, saved_artifact_sets_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, artifact_status_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, mission_infos_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, mission_archive_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, discovered_artifacts_deprecated_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, craftable_artifacts_deprecated_),
  PROTOBUF_FIELD_OFFSET(::ei::ArtifactsDB, crafting_counts_deprecated_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, message_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, version_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, code_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, compressed_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, original_size_),
  PROTOBUF_FIELD_OFFSET(::ei::AuthenticatedMessage, user_id_),
  0,
  3,
  1,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::LogCompleteMissionPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LogCompleteMissionPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LogCompleteMissionPayload, req_),
  PROTOBUF_FIELD_OFFSET(::ei::LogCompleteMissionPayload, res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LogCraftArtifactPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LogCraftArtifactPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LogCraftArtifactPayload, req_),
  PROTOBUF_FIELD_OFFSET(::ei::LogCraftArtifactPayload, res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LogConsumeArtifactPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LogConsumeArtifactPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LogConsumeArtifactPayload, req_),
  PROTOBUF_FIELD_OFFSET(::ei::LogConsumeArtifactPayload, res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::LogSetArtifactPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::LogSetArtifactPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::LogSetArtifactPayload, req_),
  PROTOBUF_FIELD_OFFSET(::ei::LogSetArtifactPayload, res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::AccountTransferPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::AccountTransferPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::AccountTransferPayload, from_id_),
  PROTOBUF_FIELD_OFFSET(::ei::AccountTransferPayload, to_ei_user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, message_),
  PROTOBUF_FIELD_OFFSET(::ei::SaveBackupResponse, existing_backup_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::CleanAccountRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CleanAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CleanAccountRequest, ei_user_id_to_keep_),
  PROTOBUF_FIELD_OFFSET(::ei::CleanAccountRequest, game_services_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ReturnEDTPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ReturnEDTPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ReturnEDTPayload, ei_user_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, name_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, directory_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, ext_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, compressed_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, original_size_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, url_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCItem, checksum_),
  0,
  1,
  2,
  6,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec_ShellPiece, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec_ShellPiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec_ShellPiece, asset_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec_ShellPiece, dlc_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, primary_piece_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, pieces_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, alt_assets_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, set_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, modified_geometry_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, price_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, required_eop_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, required_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, required_parent_shell_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, is_new_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, expires_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, seconds_until_available_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, popularity_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSpec, default_appearance_),
  0,
  4,
  ~0u,
  ~0u,
  1,
  2,
  10,
  5,
  6,
  7,
  3,
  11,
  12,
  9,
  8,
  14,
  13,
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, hex_color_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, price_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, sort_priority_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, default_appearance_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec_VariationSpec, custom_appearance_),
  0,
  1,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, price_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, price_mult_deprecated_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, discount_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, required_eop_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, required_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, required_parent_set_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, is_new_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, expires_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, seconds_until_available_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, popularity_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, decorator_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, modified_geometry_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, element_set_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, hex_base_color_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, variations_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, icon_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, default_appearance_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellSetSpec, custom_appearance_),
  0,
  1,
  5,
  19,
  16,
  6,
  7,
  3,
  11,
  12,
  17,
  15,
  18,
  13,
  14,
  8,
  2,
  ~0u,
  4,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec_LODPiece, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec_LODPiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec_LODPiece, dlc_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec_LODPiece, lod_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, asset_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, object_class_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, icon_colors_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, price_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, required_eop_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, required_soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, is_new_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, expires_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, seconds_until_available_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, popularity_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, metadata_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, no_hats_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, chicken_animation_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, sort_priority_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, pieces_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellObjectSpec, default_appearance_),
  0,
  1,
  15,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  12,
  11,
  13,
  ~0u,
  8,
  10,
  14,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, asset_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, member_ids_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellGroupSpec, price_mult_deprecated_),
  0,
  1,
  3,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, items_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, shells_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, shell_sets_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, decorators_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, shell_objects_),
  PROTOBUF_FIELD_OFFSET(::ei::DLCCatalog, shell_groups_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellStatus, identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellStatus, owned_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellElementStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellElementStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellElementStatus, element_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellElementStatus, set_identifier_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetVariationStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetVariationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetVariationStatus, set_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetVariationStatus, owned_variations_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, locked_elements_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, shell_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, shell_set_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, configure_chickens_by_group_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, group_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, chicken_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, lighting_config_enabled_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_FarmConfiguration, lighting_config_),
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, config_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, client_save_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, server_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, display_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_SavedFarmConfiguration, purchased_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellConfiguration, asset_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellConfiguration, index_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellConfiguration, shell_identifier_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, element_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, index_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, shell_set_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, variation_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellSetConfiguration, decorator_identifier_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellGroupConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellGroupConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellGroupConfiguration, asset_type_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ShellGroupConfiguration, group_identifier_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ChickenConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ChickenConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ChickenConfig, chicken_identifier_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_ChickenConfig, hat_identifier_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, light_dir_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, light_direct_color_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, light_direct_intensity_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, light_ambient_color_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, light_ambient_intensity_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, fog_color_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, fog_near_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, fog_far_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB_LightingConfig, fog_density_),
  0,
  1,
  4,
  2,
  5,
  3,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, shell_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, shell_element_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, shell_variation_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, shell_set_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, shell_object_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, farm_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, saved_configs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, new_shells_downloaded_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, new_shells_seen_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellDB, lighting_controls_unlocked_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, element_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, spent_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats_Entry, count_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellPopularityStats, data_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, action_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, sub_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, farm_element_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, cost_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, approx_time_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, version_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, farm_index_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, tickets_spent_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionLog, gold_spent_),
  4,
  0,
  1,
  2,
  11,
  6,
  5,
  3,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, local_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, public_username_),
  PROTOBUF_FIELD_OFFSET(::ei::SubmitShellShowcaseRequest, farm_config_),
  3,
  0,
  1,
  4,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcase, top_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcase, featured_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcase, fresh_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, local_id_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, description_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, creator_name_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, farm_config_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, sales_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, gross_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, views_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, equips_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, likes_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, dislikes_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingInfo, share_url_),
  0,
  4,
  1,
  2,
  5,
  12,
  6,
  8,
  7,
  10,
  13,
  9,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::ei::ShowcaseRoyaltyDeliveryConfirmation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShowcaseRoyaltyDeliveryConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShowcaseRoyaltyDeliveryConfirmation, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ShowcaseRoyaltyDeliveryConfirmation, ids_),
  PROTOBUF_FIELD_OFFSET(::ei::ShowcaseRoyaltyDeliveryConfirmation, amount_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellShowcaseListingSet, listings_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionBatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionBatch, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::ShellsActionBatch, actions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, overall_status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, start_time_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, completion_time_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, num_prestiges_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, soul_eggs_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, eggs_of_prophecy_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, iap_status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verified_pro_permit_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verified_piggy_breaks_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verified_other_iap_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, unverified_iap_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, gold_earned_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, regular_iap_buyer_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, regular_iap_cheater_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, artifacts_status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, missions_completed_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, artifacts_collected_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, artifacts_consumed_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, artifacts_in_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, rare_artifacts_in_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, rare_artifacts_on_server_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, legendary_artifacts_in_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, legendary_artifacts_on_server_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, gold_spent_crafting_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, excessive_consumes_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, excessive_inventory_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, excessive_spend_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, contracts_status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, num_coop_memberships_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, valid_contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, invalid_contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, excessive_eop_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, excessive_invalid_contracts_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verified_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verification_override_),
  PROTOBUF_FIELD_OFFSET(::ei::UserVerificationAnalysis, verification_override_value_),
  2,
  0,
  1,
  12,
  13,
  23,
  15,
  16,
  3,
  4,
  5,
  11,
  17,
  18,
  20,
  8,
  6,
  7,
  10,
  31,
  32,
  33,
  34,
  21,
  19,
  24,
  25,
  22,
  9,
  14,
  ~0u,
  26,
  27,
  28,
  29,
  30,
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo_HistoryEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo_HistoryEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo_HistoryEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo_HistoryEntry, message_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo_HistoryEntry, message_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, subscription_level_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, next_subscription_level_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, lock_next_subscription_level_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, original_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, linked_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, acknowledged_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, first_subscribed_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, period_end_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, store_status_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, auto_renew_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, sandbox_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, last_updated_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, history_),
  PROTOBUF_FIELD_OFFSET(::ei::UserSubscriptionInfo, past_user_ids_),
  8,
  9,
  10,
  7,
  0,
  2,
  11,
  3,
  4,
  6,
  1,
  12,
  13,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ei::SubscriptionChangeHintRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::SubscriptionChangeHintRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::SubscriptionChangeHintRequest, rinfo_),
  PROTOBUF_FIELD_OFFSET(::ei::SubscriptionChangeHintRequest, original_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::ei::SubscriptionChangeHintRequest, next_subscription_level_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::ei::CXPEvalRolloutInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ei::CXPEvalRolloutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ei::CXPEvalRolloutInfo, current_id_),
  PROTOBUF_FIELD_OFFSET(::ei::CXPEvalRolloutInfo, basis_points_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ei::Vector3)},
  { 11, 20, sizeof(::ei::Vector4)},
  { 24, 58, sizeof(::ei::Backup_Settings)},
  { 87, 103, sizeof(::ei::Backup_Tutorial)},
  { 114, 137, sizeof(::ei::Backup_Stats)},
  { 155, 199, sizeof(::ei::Backup_Game)},
  { 238, 261, sizeof(::ei::Backup_Artifacts)},
  { 279, 287, sizeof(::ei::Backup_Shells)},
  { 290, 326, sizeof(::ei::Backup_Simulation)},
  { 357, 366, sizeof(::ei::Backup_Mission)},
  { 370, 399, sizeof(::ei::Backup_Misc)},
  { 423, 430, sizeof(::ei::Backup_ResearchItem)},
  { 432, 439, sizeof(::ei::Backup_NewsHeadline)},
  { 441, 448, sizeof(::ei::Backup_AchievementInfo)},
  { 450, 458, sizeof(::ei::Backup_ActiveBoost)},
  { 461, 468, sizeof(::ei::Backup_OwnedBoost)},
  { 470, 478, sizeof(::ei::Backup_MissionInfo)},
  { 481, 513, sizeof(::ei::Backup)},
  { 540, 553, sizeof(::ei::EggIncFirstContactRequest)},
  { 561, 571, sizeof(::ei::EggIncFirstContactResponse)},
  { 576, -1, sizeof(::ei::EggIncAdConfig)},
  { 582, 589, sizeof(::ei::DailyGiftInfo)},
  { 591, 603, sizeof(::ei::SalesInfoRequest)},
  { 610, 619, sizeof(::ei::IAPSaleEntry)},
  { 623, -1, sizeof(::ei::SalesInfo)},
  { 629, 642, sizeof(::ei::EggIncEvent)},
  { 650, -1, sizeof(::ei::EggIncCurrentEvents)},
  { 656, 674, sizeof(::ei::DeviceInfo)},
  { 687, 721, sizeof(::ei::AppInfo)},
  { 750, 757, sizeof(::ei::ActionKeyValuePair)},
  { 759, 773, sizeof(::ei::GenericAction)},
  { 782, 789, sizeof(::ei::GenericActionBatchRequest)},
  { 791, 804, sizeof(::ei::VerifyPurchaseRequest)},
  { 812, 819, sizeof(::ei::VerifyPurchaseResponse)},
  { 821, 836, sizeof(::ei::CurrencyFlowLog)},
  { 846, 853, sizeof(::ei::CurrencyFlowBatchRequest)},
  { 855, 863, sizeof(::ei::Reward)},
  { 866, 874, sizeof(::ei::GameModifier)},
  { 877, 888, sizeof(::ei::Contract_Goal)},
  { 894, -1, sizeof(::ei::Contract_GoalSet)},
  { 900, 909, sizeof(::ei::Contract_GradeSpec)},
  { 913, 941, sizeof(::ei::Contract)},
  { 964, 983, sizeof(::ei::ContractPlayerInfo)},
  { 997, 1036, sizeof(::ei::ContractEvaluation)},
  { 1070, 1078, sizeof(::ei::ContractCitation)},
  { 1081, 1088, sizeof(::ei::ContractEvaluationBatch_Pair)},
  { 1090, -1, sizeof(::ei::ContractEvaluationBatch)},
  { 1096, 1108, sizeof(::ei::CoopCompletionSnapshot_ContributorSnapshot)},
  { 1115, -1, sizeof(::ei::CoopCompletionSnapshot)},
  { 1121, 1134, sizeof(::ei::BasicRequestInfo)},
  { 1142, 1154, sizeof(::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams)},
  { 1161, 1168, sizeof(::ei::ContractSimConfig_ContractGradeSimConfig)},
  { 1170, -1, sizeof(::ei::ContractSimConfig)},
  { 1176, 1182, sizeof(::ei::ContractSimPoll)},
  { 1183, 1190, sizeof(::ei::ContractSimPollResponse)},
  { 1192, 1200, sizeof(::ei::ContractSimResultUpdate_GoalInfo)},
  { 1203, 1210, sizeof(::ei::ContractSimResultUpdate)},
  { 1212, 1220, sizeof(::ei::ContractsRequest)},
  { 1223, 1233, sizeof(::ei::ContractsResponse)},
  { 1238, 1248, sizeof(::ei::ContractCoopStatusRequest)},
  { 1253, 1264, sizeof(::ei::FarmProductionParams)},
  { 1270, 1297, sizeof(::ei::PlayerFarmInfo)},
  { 1319, 1348, sizeof(::ei::ContractCoopStatusResponse_ContributionInfo)},
  { 1372, 1381, sizeof(::ei::ContractCoopStatusResponse_CoopGift)},
  { 1385, 1393, sizeof(::ei::ContractCoopStatusResponse_ChickenRun)},
  { 1396, 1420, sizeof(::ei::ContractCoopStatusResponse)},
  { 1439, 1466, sizeof(::ei::LocalContract)},
  { 1488, 1501, sizeof(::ei::MyContracts)},
  { 1509, 1520, sizeof(::ei::QueryCoopRequest)},
  { 1526, 1538, sizeof(::ei::QueryCoopResponse)},
  { 1545, 1566, sizeof(::ei::CreateCoopRequest)},
  { 1582, 1589, sizeof(::ei::CreateCoopResponse)},
  { 1591, 1609, sizeof(::ei::JoinCoopRequest)},
  { 1622, 1637, sizeof(::ei::JoinCoopResponse)},
  { 1647, 1664, sizeof(::ei::AutoJoinCoopRequest)},
  { 1676, 1687, sizeof(::ei::UpdateCoopPermissionsRequest)},
  { 1693, 1700, sizeof(::ei::UpdateCoopPermissionsResponse)},
  { 1702, 1712, sizeof(::ei::LeaveCoopRequest)},
  { 1717, 1730, sizeof(::ei::GiftPlayerCoopRequest)},
  { 1738, 1751, sizeof(::ei::SendChickenRunCoopRequest)},
  { 1759, 1769, sizeof(::ei::ReportPlayerCoopRequest)},
  { 1774, 1786, sizeof(::ei::KickPlayerCoopRequest)},
  { 1793, 1815, sizeof(::ei::ContractCoopStatusUpdateRequest)},
  { 1832, 1840, sizeof(::ei::ContractCoopStatusUpdateResponse)},
  { 1843, 1851, sizeof(::ei::CoopBuffState)},
  { 1854, -1, sizeof(::ei::CoopBuffHistory)},
  { 1860, 1867, sizeof(::ei::CoopChickenRunEntry)},
  { 1869, -1, sizeof(::ei::CoopLastChickenRunTimes)},
  { 1875, 1886, sizeof(::ei::LeaderboardAnalysis_Chunk)},
  { 1892, 1902, sizeof(::ei::LeaderboardAnalysis)},
  { 1907, 1914, sizeof(::ei::LeaderboardInfo_Season)},
  { 1916, 1923, sizeof(::ei::LeaderboardInfo)},
  { 1925, 1933, sizeof(::ei::LeaderboardRequest)},
  { 1936, 1944, sizeof(::ei::LeaderboardResponse_Entry)},
  { 1947, 1958, sizeof(::ei::LeaderboardResponse)},
  { 1964, -1, sizeof(::ei::ContractsArchive)},
  { 1970, 1994, sizeof(::ei::ContractAction)},
  { 2013, 2022, sizeof(::ei::UserDataInfoRequest)},
  { 2026, 2034, sizeof(::ei::UserDataInfoResponse)},
  { 2037, 2046, sizeof(::ei::ClearAllUserDataRequest)},
  { 2050, 2059, sizeof(::ei::ServerGift)},
  { 2063, 2072, sizeof(::ei::LiveConfig_BoostsConfig_ItemConfig)},
  { 2076, 2083, sizeof(::ei::LiveConfig_BoostsConfig)},
  { 2085, 2096, sizeof(::ei::LiveConfig_GiftConfig_GiftValueConfig)},
  { 2102, 2110, sizeof(::ei::LiveConfig_GiftConfig_GiftMuConfig)},
  { 2113, 2134, sizeof(::ei::LiveConfig_GiftConfig)},
  { 2150, 2169, sizeof(::ei::LiveConfig_MiscConfig)},
  { 2183, 2192, sizeof(::ei::LiveConfig)},
  { 2196, 2227, sizeof(::ei::InGameMail)},
  { 2253, 2261, sizeof(::ei::MailDB)},
  { 2264, -1, sizeof(::ei::TipsDB)},
  { 2270, 2278, sizeof(::ei::MailState_TipState)},
  { 2281, 2289, sizeof(::ei::MailState)},
  { 2292, 2299, sizeof(::ei::PeriodicalsResponse_RoyaltyInfo)},
  { 2301, 2316, sizeof(::ei::PeriodicalsResponse)},
  { 2326, 2345, sizeof(::ei::GetPeriodicalsRequest)},
  { 2359, 2372, sizeof(::ei::ConfigRequest)},
  { 2380, 2388, sizeof(::ei::ConfigResponse)},
  { 2391, 2400, sizeof(::ei::AdAttributionRawData)},
  { 2404, 2418, sizeof(::ei::AdAttributionRow)},
  { 2427, 2450, sizeof(::ei::AdAttributionInfo)},
  { 2468, 2476, sizeof(::ei::ArtifactsClientInfo_LaunchCount)},
  { 2479, 2488, sizeof(::ei::ArtifactsClientInfo)},
  { 2492, 2499, sizeof(::ei::MissionInfo_Fuel)},
  { 2501, 2519, sizeof(::ei::MissionInfo)},
  { 2532, 2541, sizeof(::ei::ArtifactSpec)},
  { 2545, 2552, sizeof(::ei::CompleteArtifact)},
  { 2554, 2563, sizeof(::ei::ArtifactInventoryItem)},
  { 2567, 2574, sizeof(::ei::InventorySlot)},
  { 2576, 2583, sizeof(::ei::ArtifactsConfigurationRequest)},
  { 2585, 2598, sizeof(::ei::ArtifactsConfigurationResponse_MissionParameters_Duration)},
  { 2606, 2615, sizeof(::ei::ArtifactsConfigurationResponse_MissionParameters)},
  { 2619, 2633, sizeof(::ei::ArtifactsConfigurationResponse_ArtifactParameters)},
  { 2642, 2649, sizeof(::ei::ArtifactsConfigurationResponse_CraftingLevelInfo)},
  { 2651, -1, sizeof(::ei::ArtifactsConfigurationResponse)},
  { 2659, 2669, sizeof(::ei::MissionRequest)},
  { 2674, 2681, sizeof(::ei::MissionResponse)},
  { 2683, 2690, sizeof(::ei::CompleteMissionResponse_SecureArtifactSpec)},
  { 2692, 2702, sizeof(::ei::CompleteMissionResponse)},
  { 2707, 2718, sizeof(::ei::CollectContractArtifactRewardsRequest)},
  { 2724, 2737, sizeof(::ei::CraftArtifactRequest)},
  { 2745, 2754, sizeof(::ei::CraftArtifactResponse)},
  { 2758, 2771, sizeof(::ei::ConsumeArtifactRequest)},
  { 2779, 2790, sizeof(::ei::ConsumeArtifactResponse)},
  { 2796, 2806, sizeof(::ei::AuthenticateArtifactResponse)},
  { 2811, 2820, sizeof(::ei::SetArtifactRequest)},
  { 2824, 2832, sizeof(::ei::SetArtifactResponse)},
  { 2835, 2842, sizeof(::ei::ArtifactsDB_ActiveArtifactSlot)},
  { 2844, 2851, sizeof(::ei::ArtifactsDB_ActiveArtifactSet)},
  { 2853, 2864, sizeof(::ei::ArtifactsDB_CraftableArtifact)},
  { 2870, 2887, sizeof(::ei::ArtifactsDB)},
  { 2899, 2910, sizeof(::ei::AuthenticatedMessage)},
  { 2916, 2923, sizeof(::ei::LogCompleteMissionPayload)},
  { 2925, 2932, sizeof(::ei::LogCraftArtifactPayload)},
  { 2934, 2941, sizeof(::ei::LogConsumeArtifactPayload)},
  { 2943, 2950, sizeof(::ei::LogSetArtifactPayload)},
  { 2952, 2959, sizeof(::ei::AccountTransferPayload)},
  { 2961, 2970, sizeof(::ei::SaveBackupResponse)},
  { 2974, 2981, sizeof(::ei::CleanAccountRequest)},
  { 2983, 2989, sizeof(::ei::ReturnEDTPayload)},
  { 2990, 3002, sizeof(::ei::DLCItem)},
  { 3009, 3016, sizeof(::ei::ShellSpec_ShellPiece)},
  { 3018, 3040, sizeof(::ei::ShellSpec)},
  { 3057, 3068, sizeof(::ei::ShellSetSpec_VariationSpec)},
  { 3074, 3100, sizeof(::ei::ShellSetSpec)},
  { 3121, 3128, sizeof(::ei::ShellObjectSpec_LODPiece)},
  { 3130, 3154, sizeof(::ei::ShellObjectSpec)},
  { 3173, 3183, sizeof(::ei::ShellGroupSpec)},
  { 3188, -1, sizeof(::ei::DLCCatalog)},
  { 3199, 3206, sizeof(::ei::ShellDB_ShellStatus)},
  { 3208, 3215, sizeof(::ei::ShellDB_ShellElementStatus)},
  { 3217, 3224, sizeof(::ei::ShellDB_ShellSetVariationStatus)},
  { 3226, 3239, sizeof(::ei::ShellDB_FarmConfiguration)},
  { 3247, 3258, sizeof(::ei::ShellDB_SavedFarmConfiguration)},
  { 3264, 3272, sizeof(::ei::ShellDB_ShellConfiguration)},
  { 3275, 3285, sizeof(::ei::ShellDB_ShellSetConfiguration)},
  { 3290, 3297, sizeof(::ei::ShellDB_ShellGroupConfiguration)},
  { 3299, 3306, sizeof(::ei::ShellDB_ChickenConfig)},
  { 3308, 3322, sizeof(::ei::ShellDB_LightingConfig)},
  { 3331, 3346, sizeof(::ei::ShellDB)},
  { 3356, 3365, sizeof(::ei::ShellPopularityStats_Entry)},
  { 3369, -1, sizeof(::ei::ShellPopularityStats)},
  { 3375, 3392, sizeof(::ei::ShellsActionLog)},
  { 3404, 3414, sizeof(::ei::SubmitShellShowcaseRequest)},
  { 3419, -1, sizeof(::ei::ShellShowcase)},
  { 3427, 3446, sizeof(::ei::ShellShowcaseListingInfo)},
  { 3460, 3468, sizeof(::ei::ShowcaseRoyaltyDeliveryConfirmation)},
  { 3471, -1, sizeof(::ei::ShellShowcaseListingSet)},
  { 3477, 3484, sizeof(::ei::ShellsActionBatch)},
  { 3486, 3527, sizeof(::ei::UserVerificationAnalysis)},
  { 3563, 3571, sizeof(::ei::UserSubscriptionInfo_HistoryEntry)},
  { 3574, 3595, sizeof(::ei::UserSubscriptionInfo)},
  { 3611, 3619, sizeof(::ei::SubscriptionChangeHintRequest)},
  { 3622, 3629, sizeof(::ei::CXPEvalRolloutInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Vector4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Tutorial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Artifacts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Shells_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Simulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Mission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_Misc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_ResearchItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_NewsHeadline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_AchievementInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_ActiveBoost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_OwnedBoost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_MissionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Backup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_EggIncFirstContactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_EggIncFirstContactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_EggIncAdConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_DailyGiftInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SalesInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_IAPSaleEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SalesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_EggIncEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_EggIncCurrentEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ActionKeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_GenericAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_GenericActionBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_VerifyPurchaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_VerifyPurchaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CurrencyFlowLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CurrencyFlowBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Reward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_GameModifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Contract_Goal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Contract_GoalSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Contract_GradeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractEvaluation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractEvaluationBatch_Pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractEvaluationBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopCompletionSnapshot_ContributorSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopCompletionSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_BasicRequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimConfig_ContractGradeSimConfig_GoalParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimConfig_ContractGradeSimConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimPoll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimPollResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimResultUpdate_GoalInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractSimResultUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_FarmProductionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_PlayerFarmInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusResponse_ContributionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusResponse_CoopGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusResponse_ChickenRun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LocalContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MyContracts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_QueryCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_QueryCoopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CreateCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CreateCoopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_JoinCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_JoinCoopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AutoJoinCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UpdateCoopPermissionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UpdateCoopPermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaveCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_GiftPlayerCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SendChickenRunCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ReportPlayerCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_KickPlayerCoopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractCoopStatusUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopBuffState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopBuffHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopChickenRunEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CoopLastChickenRunTimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardAnalysis_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardInfo_Season_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardResponse_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LeaderboardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ContractAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UserDataInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UserDataInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ClearAllUserDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ServerGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_BoostsConfig_ItemConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_BoostsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_GiftConfig_GiftValueConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_GiftConfig_GiftMuConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_GiftConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_MiscConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LiveConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_InGameMail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MailDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_TipsDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MailState_TipState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MailState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_PeriodicalsResponse_RoyaltyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_PeriodicalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_GetPeriodicalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AdAttributionRawData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AdAttributionRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AdAttributionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsClientInfo_LaunchCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MissionInfo_Fuel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MissionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CompleteArtifact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactInventoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_InventorySlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationResponse_MissionParameters_Duration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationResponse_MissionParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationResponse_ArtifactParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationResponse_CraftingLevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_MissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CompleteMissionResponse_SecureArtifactSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CompleteMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CollectContractArtifactRewardsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CraftArtifactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CraftArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ConsumeArtifactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ConsumeArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AuthenticateArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SetArtifactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SetArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsDB_ActiveArtifactSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsDB_ActiveArtifactSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsDB_CraftableArtifact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ArtifactsDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AuthenticatedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LogCompleteMissionPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LogCraftArtifactPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LogConsumeArtifactPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_LogSetArtifactPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_AccountTransferPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SaveBackupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CleanAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ReturnEDTPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_DLCItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellSpec_ShellPiece_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellSetSpec_VariationSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellSetSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellObjectSpec_LODPiece_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellObjectSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellGroupSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_DLCCatalog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellElementStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellSetVariationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_FarmConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_SavedFarmConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellSetConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ShellGroupConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_ChickenConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_LightingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellDB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellPopularityStats_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellPopularityStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellsActionLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SubmitShellShowcaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellShowcase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellShowcaseListingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShowcaseRoyaltyDeliveryConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellShowcaseListingSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_ShellsActionBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UserVerificationAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UserSubscriptionInfo_HistoryEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_UserSubscriptionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_SubscriptionChangeHintRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ei::_CXPEvalRolloutInfo_default_instance_),
};

const char descriptor_table_protodef_ei_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010ei.proto\022\002ei\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"5\n\007Vector4\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"\2611\n\006Ba"
  "ckup\022\017\n\007user_id\030\001 \001(\t\022\022\n\nei_user_id\030\022 \001("
  "\t\022\030\n\020game_services_id\030\020 \001(\t\022\024\n\014push_user"
  "_id\030\032 \001(\t\022\021\n\tdevice_id\030\021 \001(\t\022\021\n\tuser_nam"
  "e\030\002 \001(\t\022\023\n\013approx_time\030\003 \001(\001\022\022\n\007version\030"
  "\025 \001(\r:\0010\022\032\n\022force_offer_backup\030\024 \001(\010\022\024\n\014"
  "force_backup\030\026 \001(\010\022%\n\010settings\030\004 \001(\0132\023.e"
  "i.Backup.Settings\022%\n\010tutorial\030\005 \001(\0132\023.ei"
  ".Backup.Tutorial\022\037\n\005stats\030\006 \001(\0132\020.ei.Bac"
  "kup.Stats\022\035\n\004game\030\007 \001(\0132\017.ei.Backup.Game"
  "\022\'\n\tartifacts\030\016 \001(\0132\024.ei.Backup.Artifact"
  "s\022!\n\006shells\030\031 \001(\0132\021.ei.Backup.Shells\022\"\n\003"
  "sim\030\010 \001(\0132\025.ei.Backup.Simulation\022$\n\005farm"
  "s\030\014 \003(\0132\025.ei.Backup.Simulation\022#\n\007missio"
  "n\030\t \001(\0132\022.ei.Backup.Mission\022\035\n\004misc\030\n \001("
  "\0132\017.ei.Backup.Misc\022\"\n\tcontracts\030\r \001(\0132\017."
  "ei.MyContracts\022%\n\014artifacts_db\030\017 \001(\0132\017.e"
  "i.ArtifactsDB\022\035\n\010shell_db\030\030 \001(\0132\013.ei.She"
  "llDB\022\025\n\rread_mail_ids\030\027 \003(\t\022!\n\nmail_stat"
  "e\030\033 \001(\0132\r.ei.MailState\022\020\n\010checksum\030d \001(\004"
  "\022\021\n\tsignature\030e \001(\t\032\325\006\n\010Settings\022\013\n\003sfx\030"
  "\001 \001(\010\022\r\n\005music\030\002 \001(\010\022\030\n\020low_battery_mode"
  "\030\003 \001(\010\022\034\n\024low_performance_mode\030\004 \001(\010\022\037\n\027"
  "force_touch_chicken_btn\030\t \001(\010\022\035\n\025notific"
  "ations_queried\030\005 \001(\010\022$\n\034last_notificatio"
  "n_query_time\030\033 \001(\001\022\030\n\020notifications_on\030\006"
  " \001(\010\022\031\n\021notify_daily_gift\030\013 \001(\010\022\027\n\017low_p"
  "erformance\030\n \001(\010\022\031\n\021auto_stop_fueling\030\031 "
  "\001(\010\022\023\n\013max_enabled\030\032 \001(\010\022\026\n\016hide_cc_stat"
  "us\030\034 \001(\010\022 \n\030contracts_widget_enabled\030\035 \001"
  "(\010\022\030\n\020last_backup_time\030\030 \001(\001\022\025\n\rcoppa_qu"
  "eried\030\007 \001(\010\022\030\n\020coppa_restricted\030\010 \001(\010\022\034\n"
  "\024gdpr_consent_queried\030\014 \001(\010\022\033\n\023gdpr_age_"
  "restricted\030\020 \001(\010\022\032\n\022gdpr_consent_given\030\r"
  " \001(\010\022\023\n\013age_queried\030\022 \001(\010\022\035\n\016age_restric"
  "ted\030\023 \001(\010:\005false\022\'\n\037data_collection_cons"
  "ent_queried\030\024 \001(\010\022%\n\035data_collection_con"
  "sent_given\030\025 \001(\010\022\034\n\024last_day_age_queried"
  "\030\021 \001(\r\022\036\n\020user_ads_enabled\030\016 \001(\010:\004true\022 "
  "\n\022user_cloud_enabled\030\017 \001(\010:\004true\022$\n\026user"
  "_analytics_enabled\030\026 \001(\010:\004true\022+\n\035user_p"
  "ersonalized_ads_enabled\030\027 \001(\010:\004true\032\240\002\n\010"
  "Tutorial\022\023\n\013intro_shown\030\001 \001(\010\022\034\n\024click_t"
  "utorial_shown\030\002 \001(\010\022\025\n\rbuy_hab_shown\030\003 \001"
  "(\010\022\032\n\022hire_vehicle_shown\030\004 \001(\010\022\023\n\013q_num_"
  "shown\030\005 \001(\010\022\023\n\013s_num_shown\030\006 \001(\010\022\033\n\023cont"
  "racts_tab_shown\030\007 \001(\010\022\033\n\023contract_info_s"
  "hown\030\010 \001(\010\022\027\n\017join_coop_shown\030\t \001(\010\022\031\n\021s"
  "witch_farm_shown\030\n \001(\010\022\026\n\016tutorial_shown"
  "\030\013 \003(\010\032\335\003\n\005Stats\022\026\n\016egg_totals_OLD\030\001 \003(\004"
  "\022\022\n\negg_totals\030\010 \003(\001\022\037\n\027unlimited_chicke"
  "ns_uses\030\007 \001(\004\022\023\n\013refill_uses\030\002 \001(\004\022\023\n\013wa"
  "rp_1_uses\030\004 \001(\004\022\023\n\013warp_8_uses\030\005 \001(\004\022\023\n\013"
  "boosts_used\030\r \001(\004\022\032\n\022video_doubler_uses\030"
  "\003 \001(\004\022\027\n\017drone_takedowns\030\006 \001(\004\022\035\n\025drone_"
  "takedowns_elite\030\n \001(\004\022\025\n\rnum_prestiges\030\t"
  " \001(\004\022\030\n\020num_piggy_breaks\030\013 \001(\004\022\033\n\023iap_pa"
  "cks_purchased\030\014 \001(\004\022\022\n\npiggy_full\030\016 \001(\010\022"
  "\030\n\020piggy_found_full\030\017 \001(\010\022\"\n\032time_piggy_"
  "filled_realtime\030\020 \001(\001\022 \n\030time_piggy_full"
  "_gametime\030\021 \001(\001\022\035\n\025lost_piggy_increments"
  "\030\022 \001(\004\032\321\t\n\004Game\022\027\n\014current_farm\030\026 \001(\r:\0010"
  "\022 \n\017max_egg_reached\030\001 \001(\0162\007.ei.Egg\022\032\n\022go"
  "lden_eggs_earned\030\002 \001(\004\022\031\n\021golden_eggs_sp"
  "ent\030\003 \001(\004\022\035\n\025uncliamed_golden_eggs\030\020 \001(\004"
  "\022\021\n\tsoul_eggs\030\004 \001(\004\022\033\n\023unclaimed_soul_eg"
  "gs\030\021 \001(\004\022\023\n\013soul_eggs_d\030\" \001(\001\022\035\n\025unclaim"
  "ed_soul_eggs_d\030# \001(\001\022\030\n\020eggs_of_prophecy"
  "\030\027 \001(\004\022\"\n\032unclaimed_eggs_of_prophecy\030\030 \001"
  "(\004\022\034\n\024shell_scripts_earned\030& \001(\004\022\033\n\023shel"
  "l_scripts_spent\030\' \001(\004\022\037\n\027unclaimed_shell"
  "_scripts\030( \001(\004\022\034\n\024prestige_cash_earned\030\005"
  " \001(\001\022 \n\030prestige_soul_boost_cash\030! \001(\001\022\034"
  "\n\024lifetime_cash_earned\030\006 \001(\001\022\022\n\npiggy_ba"
  "nk\030\007 \001(\004\022\036\n\026piggy_full_alert_shown\030\037 \001(\010"
  "\022\024\n\014permit_level\030\010 \001(\r\022.\n\repic_research\030"
  "\t \003(\0132\027.ei.Backup.ResearchItem\022\031\n\021hyperl"
  "oop_station\030\035 \001(\010\022\034\n\024next_daily_gift_tim"
  "e\030\n \001(\001\022%\n\035last_daily_gift_collected_day"
  "\030\024 \001(\r\022!\n\031num_daily_gifts_collected\030\034 \001("
  "\r\022%\n\004news\030\013 \003(\0132\027.ei.Backup.NewsHeadline"
  "\022\026\n\016last_news_time\030\014 \001(\001\022\032\n\022current_mult"
  "iplier\030\r \001(\001\022%\n\035current_multiplier_expir"
  "ation\030\016 \001(\001\0220\n\014achievements\030\017 \003(\0132\032.ei.B"
  "ackup.AchievementInfo\022\035\n\025max_farm_size_r"
  "eached\030\022 \003(\004\022\027\n\017egg_medal_level\030\023 \003(\r\022\"\n"
  "\032long_idle_notification_set\030\031 \001(\010\022(\n lon"
  "g_idle_notification_threshold\030\032 \001(\001\022\030\n\020l"
  "ong_idle_reward\030\033 \001(\001\022%\n\006boosts\030\036 \003(\0132\025."
  "ei.Backup.OwnedBoost\022\"\n\032total_time_cheat"
  "s_detected\030  \001(\r\022\035\n\025force_elite_contract"
  "s\030$ \001(\010\022!\n\031new_player_event_end_time\030% \001"
  "(\001\032\262\004\n\tArtifacts\022\020\n\010infusing\030\001 \001(\010\0225\n\022it"
  "em_being_infused\030\002 \001(\0132\031.ei.ArtifactInve"
  "ntoryItem\022,\n\022spec_being_infused\030\r \001(\0132\020."
  "ei.ArtifactSpec\022\"\n\021egg_type_infusing\030\003 \001"
  "(\0162\007.ei.Egg\022\036\n\026infusing_eggs_required\030\004 "
  "\001(\001\022\024\n\014eggs_infused\030\005 \001(\001\022&\n\031flow_percen"
  "tage_artifacts\030\006 \001(\001:\0030.5\022\035\n\017fueling_ena"
  "bled\030\007 \001(\010:\004true\022\034\n\024tank_filling_enabled"
  "\030\016 \001(\010\022\022\n\ntank_level\030\017 \001(\r\022\022\n\ntank_fuels"
  "\030\020 \003(\001\022\023\n\013tank_limits\030\022 \003(\001\0223\n\020last_fuel"
  "ed_ship\030\t \001(\0162\031.ei.MissionInfo.Spaceship"
  "\022\027\n\017inventory_score\030\n \001(\001\022\023\n\013crafting_xp"
  "\030\021 \001(\001\022\017\n\007enabled\030\013 \001(\010\022\023\n\013intro_shown\030\014"
  " \001(\010\022)\n\033infusing_enabled_DEPRECATED\030\010 \001("
  "\010:\004true\032M\n\006Shells\022\023\n\013intro_alert\030\001 \001(\010\022\035"
  "\n\025contracts_intro_alert\030\002 \001(\010\022\017\n\007num_new"
  "\030\003 \003(\005\032\343\006\n\nSimulation\022\031\n\010egg_type\030\001 \001(\0162"
  "\007.ei.Egg\022\037\n\tfarm_type\030\023 \001(\0162\014.ei.FarmTyp"
  "e\022\023\n\013contract_id\030\024 \001(\t\022\023\n\013cash_earned\030\002 "
  "\001(\001\022\022\n\ncash_spent\030\003 \001(\001\022\026\n\016unclaimed_cas"
  "h\030\004 \001(\001\022\026\n\016last_step_time\030\005 \001(\001\022\024\n\014num_c"
  "hickens\030\006 \001(\004\022\036\n\026num_chickens_unsettled\030"
  "\007 \001(\004\022\034\n\024num_chickens_running\030\010 \001(\004\022\021\n\te"
  "ggs_laid\030\t \001(\001\022\024\n\014eggs_shipped\030\036 \001(\001\022\025\n\r"
  "eggs_paid_for\030\n \001(\001\022\023\n\013silos_owned\030\013 \001(\r"
  "\022\014\n\004habs\030\014 \003(\r\022\026\n\016hab_population\030\r \003(\004\022\036"
  "\n\026hab_population_indound\030\016 \003(\004\022!\n\031hab_in"
  "cubator_popuplation\030\017 \003(\001\022\033\n\023hatchery_po"
  "pulation\030\020 \001(\001\022\020\n\010vehicles\030\021 \003(\r\022\024\n\014trai"
  "n_length\030\025 \003(\r\0220\n\017common_research\030\022 \003(\0132"
  "\027.ei.Backup.ResearchItem\022-\n\ractive_boost"
  "s\030\026 \003(\0132\026.ei.Backup.ActiveBoost\022\034\n\024last_"
  "cash_boost_time\030\037 \001(\001\022\034\n\024time_cheats_det"
  "ected\030\027 \001(\r\022\027\n\017time_cheat_debt\030\030 \001(\001\022\035\n\025"
  "boost_tokens_received\030\031 \001(\r\022\032\n\022boost_tok"
  "ens_spent\030\032 \001(\r\022\032\n\022boost_tokens_given\030\034 "
  "\001(\r\022\036\n\026unclaimed_boost_tokens\030\033 \001(\r\022\'\n\037g"
  "ametime_until_next_boost_token\030\035 \001(\001\032\177\n\007"
  "Mission\022\027\n\017current_mission\030\001 \001(\t\022\027\n\017refe"
  "rence_value\030\002 \001(\001\022\030\n\020current_missions\030\004 "
  "\003(\t\022(\n\010missions\030\003 \003(\0132\026.ei.Backup.Missio"
  "nInfo\032\267\005\n\004Misc\022\034\n\024chicken_btn_pref_big\030\001"
  " \001(\010\022\"\n\032free_hatchery_refill_given\030\002 \001(\010"
  "\022\'\n\025last_share_farm_value\030\003 \001(\001:\0101000000"
  "0\022-\n\033last_share_swarm_farm_value\030\004 \001(\001:\010"
  "10000000\022\"\n\025last_share_swarm_size\030\005 \001(\001:"
  "\003140\0224\n(last_prestige_alert_soul_eggs_DE"
  "PRECATED\030\n \001(\004:\00245\022\023\n\013friend_rank\030\006 \001(\004\022"
  "\027\n\017friend_rank_pop\030\007 \001(\004\022\023\n\013global_rank\030"
  "\010 \001(\004\022\027\n\017global_rank_pop\030\t \001(\004\022\030\n\020challe"
  "nges_alert\030\024 \001(\010\022\024\n\014trophy_alert\030\013 \001(\010\022\020"
  "\n\010ar_alert\030\014 \001(\010\022\027\n\017contracts_alert\030\r \001("
  "\010\022\032\n\022contracts_alert_v2\030\025 \001(\010\022\022\n\ncoop_al"
  "ert\030\016 \001(\010\022\025\n\rcoop_alert_v2\030\026 \001(\010\022\024\n\014swit"
  "ch_alert\030\017 \001(\010\022\035\n\025egg_of_prophecy_alert\030"
  "\020 \001(\010\022\031\n\021boost_token_alert\030\021 \001(\010\022\026\n\016soul"
  "_egg_alert\030\022 \001(\010\022\035\n\025backup_reminder_aler"
  "t\030\023 \001(\010\022\030\n\020max_button_alert\030\027 \001(\010\022\034\n\024mis"
  "sion_target_alert\030\030 \001(\010\032)\n\014ResearchItem\022"
  "\n\n\002id\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\032(\n\014NewsHeadli"
  "ne\022\n\n\002id\030\001 \001(\t\022\014\n\004read\030\002 \001(\010\032/\n\017Achievem"
  "entInfo\022\n\n\002id\030\001 \001(\t\022\020\n\010achieved\030\002 \001(\010\032P\n"
  "\013ActiveBoost\022\020\n\010boost_id\030\001 \001(\t\022\026\n\016time_r"
  "emaining\030\002 \001(\001\022\027\n\017reference_value\030\003 \001(\001\032"
  "-\n\nOwnedBoost\022\020\n\010boost_id\030\001 \001(\t\022\r\n\005count"
  "\030\002 \001(\r\032E\n\013MissionInfo\022\n\n\002id\030\001 \001(\t\022\021\n\tcom"
  "pleted\030\002 \001(\010\022\027\n\017reference_value\030\003 \001(\001\"\334\001"
  "\n\031EggIncFirstContactRequest\022#\n\005rinfo\030\010 \001"
  "(\0132\024.ei.BasicRequestInfo\022\022\n\nei_user_id\030\004"
  " \001(\t\022\017\n\007user_id\030\001 \001(\t\022\030\n\020game_services_i"
  "d\030\007 \001(\t\022\021\n\tdevice_id\030\005 \001(\t\022\020\n\010username\030\006"
  " \001(\t\022\026\n\016client_version\030\002 \001(\r\022\036\n\010platform"
  "\030\003 \001(\0162\014.ei.Platform\"\366\001\n\032EggIncFirstCont"
  "actResponse\022\022\n\nei_user_id\030\002 \001(\t\022\027\n\017ids_t"
  "ransferred\030\003 \003(\t\022\025\n\nerror_code\030\004 \001(\r:\0010\022"
  "\025\n\rerror_message\030\005 \001(\t\022\032\n\006backup\030\001 \001(\0132\n"
  ".ei.Backup\"a\n\nErrorCodes\022\014\n\010NO_ERROR\020\000\022\034"
  "\n\030EXISTING_USER_W_GAMER_ID\020\001\022\022\n\016USER_NOT"
  "_FOUND\020\002\022\023\n\017BACKUP_CONFLICT\020\003\"9\n\016EggIncA"
  "dConfig\022\'\n\020network_priority\030\001 \003(\0162\r.ei.A"
  "dNetwork\"A\n\rDailyGiftInfo\022\023\n\013current_day"
  "\030\001 \001(\r\022\033\n\023seconds_to_next_day\030\002 \001(\001\"\310\001\n\020"
  "SalesInfoRequest\022\017\n\007user_id\030\001 \001(\t\022\022\n\npig"
  "gy_full\030\002 \001(\010\022\030\n\020piggy_found_full\030\003 \001(\010\022"
  "\035\n\025seconds_full_realtime\030\004 \001(\001\022\035\n\025second"
  "s_full_gametime\030\005 \001(\001\022\027\n\017lost_increments"
  "\030\007 \001(\r\022\036\n\026current_client_version\030\n \001(\r\"g"
  "\n\014IAPSaleEntry\022\022\n\nproduct_id\030\001 \001(\t\022\031\n\021se"
  "conds_remaining\030\002 \001(\001\022\027\n\017discount_string"
  "\030\003 \001(\t\022\017\n\007sale_id\030\004 \001(\t\",\n\tSalesInfo\022\037\n\005"
  "sales\030\001 \003(\0132\020.ei.IAPSaleEntry\"\247\001\n\013EggInc"
  "Event\022\022\n\nidentifier\030\001 \001(\t\022\031\n\021seconds_rem"
  "aining\030\002 \001(\001\022\014\n\004type\030\003 \001(\t\022\022\n\nmultiplier"
  "\030\004 \001(\001\022\020\n\010subtitle\030\005 \001(\t\022\022\n\nstart_time\030\006"
  " \001(\001\022\020\n\010duration\030\007 \001(\001\022\017\n\007cc_only\030\010 \001(\010\""
  "6\n\023EggIncCurrentEvents\022\037\n\006events\030\001 \003(\0132\017"
  ".ei.EggIncEvent\"\251\002\n\nDeviceInfo\022\021\n\tdevice"
  "_id\030\001 \001(\t\022\026\n\016advertising_id\030\r \001(\t\022\020\n\010pla"
  "tform\030\002 \001(\t\022\023\n\013form_factor\030\003 \001(\t\022\023\n\013devi"
  "ce_name\030\004 \001(\t\022\030\n\020platform_version\030\005 \001(\t\022"
  "\026\n\016locale_country\030\006 \001(\t\022\027\n\017locale_langua"
  "ge\030\007 \001(\t\022\022\n\ngpu_vendor\030\010 \001(\t\022\021\n\tgpu_mode"
  "l\030\t \001(\t\022\025\n\rdevice_bucket\030\n \001(\t\022\024\n\014screen"
  "_width\030\013 \001(\r\022\025\n\rscreen_height\030\014 \001(\r\"\325\005\n\007"
  "AppInfo\022\023\n\013version_str\030\001 \001(\t\022\020\n\010sessions"
  "\030\002 \001(\r\022\025\n\rnum_prestiges\030\003 \001(\r\022\021\n\tsoul_eg"
  "gs\030\004 \001(\004\022\023\n\013current_egg\030\005 \001(\r\022\023\n\013gold_ea"
  "rned\030\006 \001(\004\022\022\n\ngold_spent\030\007 \001(\004\022\027\n\017curren"
  "t_mission\030\010 \001(\r\022\022\n\npiggy_size\030\t \001(\r\022\030\n\020n"
  "um_piggy_breaks\030\n \001(\004\022\035\n\025verified_piggy_"
  "breaks\030\035 \001(\004\022\033\n\023iap_packs_purchased\030\013 \001("
  "\004\022\024\n\014permit_level\030\014 \001(\r\022\032\n\022video_doubler"
  "_uses\030\017 \001(\004\022\027\n\017drone_takedowns\030\022 \001(\004\022\035\n\025"
  "drone_takedowns_elite\030\023 \001(\004\022\031\n\021trophies_"
  "unlocked\030\024 \001(\010\022\021\n\tegg_level\030\025 \001(\002\022\027\n\017str"
  "uggle_factor\030\026 \001(\002\022\022\n\npiggy_full\030\027 \001(\010\022\030"
  "\n\020piggy_found_full\030\030 \001(\010\022 \n\030time_piggy_f"
  "ull_realtime\030\031 \001(\001\022 \n\030time_piggy_full_ga"
  "metime\030\032 \001(\001\022\035\n\025lost_piggy_increments\030\033 "
  "\001(\004\022\017\n\007sale_id\030\034 \001(\t\022\037\n\027unlimited_chicke"
  "ns_uses\030\r \001(\004\022\023\n\013refill_uses\030\016 \001(\004\022\027\n\017sh"
  "ort_warp_uses\030\020 \001(\004\022\026\n\016long_warp_uses\030\021 "
  "\001(\004\"0\n\022ActionKeyValuePair\022\013\n\003key\030\001 \002(\t\022\r"
  "\n\005value\030\002 \002(\t\"\354\001\n\rGenericAction\022\017\n\007user_"
  "id\030\001 \001(\t\022\017\n\007cc_user\030\t \001(\010\022\026\n\016advertising"
  "_id\030\007 \001(\t\022\027\n\017approx_time_DEP\030\002 \001(\002\022\023\n\013ap"
  "prox_time\030\010 \001(\001\022\023\n\013action_name\030\003 \001(\t\022$\n\004"
  "data\030\004 \003(\0132\026.ei.ActionKeyValuePair\022\030\n\003ap"
  "p\030\005 \001(\0132\013.ei.AppInfo\022\036\n\006device\030\006 \001(\0132\016.e"
  "i.DeviceInfo\"d\n\031GenericActionBatchReques"
  "t\022#\n\005rinfo\030\001 \001(\0132\024.ei.BasicRequestInfo\022\""
  "\n\007actions\030\002 \003(\0132\021.ei.GenericAction\"\326\001\n\025V"
  "erifyPurchaseRequest\022#\n\005rinfo\030\006 \001(\0132\024.ei"
  ".BasicRequestInfo\022\013\n\003sku\030\001 \001(\t\022\026\n\016transa"
  "ction_id\030\002 \001(\t\022\037\n\027original_transaction_i"
  "d\030\010 \001(\t\022\017\n\007receipt\030\003 \001(\t\022\020\n\010platform\030\004 \001"
  "(\t\022\017\n\007sandbox\030\007 \001(\010\022\036\n\003log\030\005 \001(\0132\021.ei.Ge"
  "nericAction\";\n\026VerifyPurchaseResponse\022\020\n"
  "\010verified\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\334\001\n\017Cur"
  "rencyFlowLog\022\017\n\007user_id\030\001 \001(\t\022\023\n\013approx_"
  "time\030\002 \001(\001\022 \n\010currency\030\003 \001(\0162\016.ei.Reward"
  "Type\022\016\n\006amount\030\004 \001(\003\022\020\n\010location\030\005 \001(\t\022\017"
  "\n\007version\030\006 \001(\t\022\020\n\010platform\030\007 \001(\t\022\021\n\tsou"
  "l_eggs\030\010 \001(\001\022\025\n\rtickets_spent\030\t \001(\004\022\022\n\ng"
  "old_spent\030\n \001(\004\"b\n\030CurrencyFlowBatchRequ"
  "est\022#\n\005rinfo\030\002 \001(\0132\024.ei.BasicRequestInfo"
  "\022!\n\004logs\030\001 \003(\0132\023.ei.CurrencyFlowLog\"]\n\006R"
  "eward\022#\n\013reward_type\030\001 \001(\0162\016.ei.RewardTy"
  "pe\022\027\n\017reward_sub_type\030\002 \001(\t\022\025\n\rreward_am"
  "ount\030\003 \001(\001\"\245\002\n\014GameModifier\0221\n\tdimension"
  "\030\001 \001(\0162\036.ei.GameModifier.GameDimension\022\r"
  "\n\005value\030\002 \001(\001\022\023\n\013description\030\003 \001(\t\"\275\001\n\rG"
  "ameDimension\022\014\n\010EARNINGS\020\001\022\021\n\rAWAY_EARNI"
  "NGS\020\002\022\032\n\026INTERNAL_HATCHERY_RATE\020\003\022\023\n\017EGG"
  "_LAYING_RATE\020\004\022\025\n\021SHIPPING_CAPACITY\020\005\022\020\n"
  "\014HAB_CAPACITY\020\006\022\020\n\014VEHICLE_COST\020\007\022\014\n\010HAB"
  "_COST\020\010\022\021\n\rRESEARCH_COST\020\t\"\220\010\n\010Contract\022"
  "\022\n\nidentifier\030\001 \001(\t\022\014\n\004name\030\t \001(\t\022\023\n\013des"
  "cription\030\n \001(\t\022\024\n\003egg\030\002 \001(\0162\007.ei.Egg\022 \n\005"
  "goals\030\003 \003(\0132\021.ei.Contract.Goal\022\'\n\tgoal_s"
  "ets\030\020 \003(\0132\024.ei.Contract.GoalSet\022+\n\013grade"
  "_specs\030\024 \003(\0132\026.ei.Contract.GradeSpec\022\021\n\t"
  "season_id\030\027 \001(\t\022\024\n\014coop_allowed\030\004 \001(\010\022\025\n"
  "\rmax_coop_size\030\005 \001(\r\022\022\n\nmax_boosts\030\014 \001(\r"
  "\022\035\n\021minutes_per_token\030\017 \001(\001:\00260\022)\n\034chick"
  "en_run_cooldown_minutes\030\022 \001(\001:\003180\022\022\n\nst"
  "art_time\030\021 \001(\001\022\027\n\017expiration_time\030\006 \001(\001\022"
  "\026\n\016length_seconds\030\007 \001(\001\022\025\n\rmax_soul_eggs"
  "\030\r \001(\001\022\032\n\022min_client_version\030\016 \001(\r\022\017\n\007le"
  "ggacy\030\023 \001(\010\022\017\n\007cc_only\030\026 \001(\010\022\031\n\021default_"
  "shell_ids\030\030 \003(\t\022\r\n\005debug\030\013 \001(\010\022\013\n\003key\030\025 "
  "\001(\t\032\250\001\n\004Goal\022\032\n\004type\030\001 \001(\0162\014.ei.GoalType"
  "\022\025\n\rtarget_amount\030\002 \001(\001\022#\n\013reward_type\030\003"
  " \001(\0162\016.ei.RewardType\022\027\n\017reward_sub_type\030"
  "\004 \001(\t\022\025\n\rreward_amount\030\005 \001(\001\022\030\n\020target_s"
  "oul_eggs\030\006 \001(\001\032+\n\007GoalSet\022 \n\005goals\030\001 \003(\013"
  "2\021.ei.Contract.Goal\032\223\001\n\tGradeSpec\022\'\n\005gra"
  "de\030\001 \001(\0162\030.ei.Contract.PlayerGrade\022 \n\005go"
  "als\030\002 \003(\0132\021.ei.Contract.Goal\022#\n\tmodifier"
  "s\030\003 \003(\0132\020.ei.GameModifier\022\026\n\016length_seco"
  "nds\030\004 \001(\001\"b\n\013PlayerGrade\022\017\n\013GRADE_UNSET\020"
  "\000\022\013\n\007GRADE_C\020\001\022\013\n\007GRADE_B\020\002\022\013\n\007GRADE_A\020\003"
  "\022\014\n\010GRADE_AA\020\004\022\r\n\tGRADE_AAA\020\005\"\237\004\n\022Contra"
  "ctPlayerInfo\022\'\n\005grade\030\001 \001(\0162\030.ei.Contrac"
  "t.PlayerGrade\022\021\n\ttotal_cxp\030\002 \001(\001\022\022\n\nseas"
  "on_cxp\030\r \001(\001\022\023\n\013grade_score\030\007 \001(\001\022\032\n\022tar"
  "get_grade_score\030\t \001(\001\022\022\n\nsoul_power\030\n \001("
  "\001\022\031\n\021target_soul_power\030\010 \001(\001\022\026\n\016grade_pr"
  "ogress\030\014 \001(\001\0223\n\006issues\030\013 \003(\0162#.ei.Contra"
  "ctEvaluation.PoorBehavior\022\023\n\013issue_score"
  "\030\016 \001(\001\022-\n\006status\030\003 \001(\0162\035.ei.ContractPlay"
  "erInfo.Status\022\034\n\024last_evaluation_time\030\004 "
  "\001(\001\022\037\n\027last_evaluation_version\030\005 \001(\t\0222\n\022"
  "unread_evaluations\030\006 \003(\0132\026.ei.ContractEv"
  "aluation\"U\n\006Status\022\013\n\007UNKNOWN\020\000\022\017\n\013CALCU"
  "LATING\020\001\022\017\n\013OUT_OF_DATE\020\002\022\016\n\nINCOMPLETE\020"
  "\004\022\014\n\010COMPLETE\020\003\"\344\010\n\022ContractEvaluation\022\033"
  "\n\023contract_identifier\030( \001(\t\022\027\n\017coop_iden"
  "tifier\030) \001(\t\022\013\n\003cxp\030\001 \001(\001\022\016\n\006replay\030\030 \001("
  "\010\022\022\n\ncxp_change\030\031 \001(\001\022\031\n\021grade_performan"
  "ce\030\002 \001(\005\022\022\n\nold_league\030\t \001(\005\022\021\n\told_goal"
  "s\030\n \001(\010\022\'\n\005grade\030\003 \001(\0162\030.ei.Contract.Pla"
  "yerGrade\022\032\n\022contribution_ratio\030\004 \001(\001\022\032\n\022"
  "completion_percent\030\005 \001(\001\022\027\n\017original_len"
  "gth\030\013 \001(\001\022\021\n\tcoop_size\030\022 \001(\r\022\014\n\004solo\030\032 \001"
  "(\010\022\022\n\nsoul_power\030\027 \001(\001\022\036\n\026last_contribut"
  "ion_time\030\026 \001(\001\022\027\n\017completion_time\030\006 \001(\001\022"
  "\031\n\021chicken_runs_sent\030\007 \001(\r\022\030\n\020gift_token"
  "s_sent\030\010 \001(\r\022\034\n\024gift_tokens_received\030\017 \001"
  "(\r\022\035\n\025gift_token_value_sent\030\034 \001(\001\022!\n\031gif"
  "t_token_value_received\030\035 \001(\001\022\035\n\025boost_to"
  "ken_allotment\030\020 \001(\r\022\027\n\017buff_time_value\030\021"
  " \001(\001\022\026\n\016teamwork_score\030\r \001(\001\022\025\n\rother_bo"
  "nuses\030\016 \001(\001\022\031\n\021counted_in_season\030\024 \001(\010\022\021"
  "\n\tseason_id\030\025 \001(\t\022\023\n\013time_cheats\030\033 \001(\r\0223"
  "\n\006issues\030\023 \003(\0162#.ei.ContractEvaluation.P"
  "oorBehavior\022\r\n\005notes\030\014 \003(\t\022\017\n\007version\0302 "
  "\001(\t\022\035\n\025evaluation_start_time\0303 \001(\001\022-\n\006st"
  "atus\0304 \001(\0162\035.ei.ContractEvaluation.Statu"
  "s\"\230\001\n\014PoorBehavior\022\010\n\004NONE\020\000\022\024\n\020LOW_CONT"
  "RIBUTION\020\001\022\024\n\020BAD_CONTRIBUTION\020\002\022\033\n\027DISH"
  "ONORABLY_DISCHARGED\020\003\022\021\n\rPOOR_TEAMWORK\020\004"
  "\022\022\n\016ABANDONED_COOP\020\005\022\016\n\nTIME_CHEAT\020\006\"@\n\006"
  "Status\022\013\n\007UNKNOWN\020\000\022\013\n\007PENDING\020\001\022\016\n\nEVAL"
  "UATING\020\002\022\014\n\010COMPLETE\020\003\"\202\001\n\020ContractCitat"
  "ion\0222\n\005issue\030\001 \001(\0162#.ei.ContractEvaluati"
  "on.PoorBehavior\022\021\n\ttimestamp\030\002 \001(\001\022\'\n\005gr"
  "ade\030\003 \001(\0162\030.ei.Contract.PlayerGrade\"\210\001\n\027"
  "ContractEvaluationBatch\022/\n\005evals\030\001 \003(\0132 "
  ".ei.ContractEvaluationBatch.Pair\032<\n\004Pair"
  "\022\017\n\007user_id\030\001 \001(\t\022#\n\003cev\030\002 \001(\0132\026.ei.Cont"
  "ractEvaluation\"\212\002\n\026CoopCompletionSnapsho"
  "t\022D\n\014contributors\030\001 \003(\0132..ei.CoopComplet"
  "ionSnapshot.ContributorSnapshot\032\251\001\n\023Cont"
  "ributorSnapshot\022\024\n\014contribution\030\001 \001(\001\022\036\n"
  "\026last_contribution_time\030\006 \001(\001\022\021\n\tfinaliz"
  "ed\030\007 \001(\010\022\022\n\nsoul_power\030\002 \001(\001\022\017\n\007user_id\030"
  "\003 \001(\t\022\016\n\006tokens\030\004 \001(\r\022\024\n\014tokens_spent\030\005 "
  "\001(\r\"\242\001\n\020BasicRequestInfo\022\022\n\nei_user_id\030\001"
  " \001(\t\022\026\n\016client_version\030\002 \001(\r\022\017\n\007version\030"
  "\003 \001(\t\022\r\n\005build\030\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\017"
  "\n\007country\030\006 \001(\t\022\020\n\010language\030\007 \001(\t\022\r\n\005deb"
  "ug\030\010 \001(\010\"\227\003\n\021ContractSimConfig\022C\n\rgrade_"
  "configs\030\001 \003(\0132,.ei.ContractSimConfig.Con"
  "tractGradeSimConfig\032\274\002\n\026ContractGradeSim"
  "Config\022\'\n\005grade\030\001 \001(\0162\030.ei.Contract.Play"
  "erGrade\022L\n\013goal_params\030\002 \003(\01327.ei.Contra"
  "ctSimConfig.ContractGradeSimConfig.GoalP"
  "arams\032\252\001\n\nGoalParams\022\021\n\ttarget_se\030\001 \001(\001\022"
  "\020\n\010cps_mult\030\002 \001(\001\022\020\n\010elr_mult\030\007 \001(\001\022\025\n\re"
  "arnings_mult\030\003 \001(\001\022\025\n\rtime_efficacy\030\004 \001("
  "\001\022\031\n\021hab_capacity_mult\030\005 \001(\001\022\034\n\024epic_res"
  "earch_budget\030\006 \001(\001\")\n\017ContractSimPoll\022\026\n"
  "\016client_version\030\001 \001(\r\"p\n\027ContractSimPoll"
  "Response\022*\n\024contract_to_simulate\030\001 \001(\0132\014"
  ".ei.Contract\022)\n\nsim_config\030\002 \001(\0132\025.ei.Co"
  "ntractSimConfig\"\316\001\n\027ContractSimResultUpd"
  "ate\022\023\n\013contract_id\030\001 \001(\t\0228\n\ngoal_infos\030\002"
  " \003(\0132$.ei.ContractSimResultUpdate.GoalIn"
  "fo\032d\n\010GoalInfo\022\'\n\005grade\030\001 \001(\0162\030.ei.Contr"
  "act.PlayerGrade\022\022\n\ngoal_index\030\002 \001(\r\022\033\n\023p"
  "rojected_eggs_laid\030\003 \001(\001\"N\n\020ContractsReq"
  "uest\022\021\n\tsoul_eggs\030\001 \001(\001\022\026\n\016client_versio"
  "n\030\005 \001(\r\022\017\n\007user_id\030\002 \001(\t\"\214\001\n\021ContractsRe"
  "sponse\022\037\n\tcontracts\030\001 \003(\0132\014.ei.Contract\022"
  "\027\n\017warning_message\030\004 \001(\t\022\021\n\ttotal_eop\030\005 "
  "\001(\001\022\023\n\013server_time\030\002 \001(\001\022\025\n\007max_eop\030\003 \001("
  "\r:\0041000\"\237\001\n\031ContractCoopStatusRequest\022#\n"
  "\005rinfo\030\005 \001(\0132\024.ei.BasicRequestInfo\022\033\n\023co"
  "ntract_identifier\030\001 \001(\t\022\027\n\017coop_identifi"
  "er\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\026\n\016client_vers"
  "ion\030\004 \001(\r\"\177\n\024FarmProductionParams\022\027\n\017far"
  "m_population\030\001 \001(\001\022\025\n\rfarm_capacity\030\002 \001("
  "\001\022\013\n\003elr\030\003 \001(\001\022\013\n\003ihr\030\004 \001(\001\022\n\n\002sr\030\005 \001(\001\022"
  "\021\n\tdelivered\030\006 \001(\001\"\227\005\n\016PlayerFarmInfo\022\026\n"
  "\016client_version\030\024 \001(\r\022\021\n\tsoul_eggs\030\001 \001(\001"
  "\022\030\n\020eggs_of_prophecy\030\002 \001(\004\022\024\n\014permit_lev"
  "el\030\003 \001(\r\022\031\n\021hyperloop_station\030\004 \001(\010\022\027\n\017e"
  "gg_medal_level\030\005 \003(\r\022.\n\repic_research\030\006 "
  "\003(\0132\027.ei.Backup.ResearchItem\022\031\n\010egg_type"
  "\030\007 \001(\0162\007.ei.Egg\022\024\n\014cash_on_hand\030\010 \001(\001\022\014\n"
  "\004habs\030\t \003(\r\022\026\n\016hab_population\030\n \003(\004\022\024\n\014h"
  "ab_capacity\030\025 \003(\004\022\020\n\010vehicles\030\013 \003(\r\022\024\n\014t"
  "rain_length\030\014 \003(\r\022\023\n\013silos_owned\030\r \001(\r\0220"
  "\n\017common_research\030\016 \003(\0132\027.ei.Backup.Rese"
  "archItem\022-\n\ractive_boosts\030\017 \003(\0132\026.ei.Bac"
  "kup.ActiveBoost\022\034\n\024boost_tokens_on_hand\030"
  "\020 \001(\r\0220\n\022equipped_artifacts\030\021 \003(\0132\024.ei.C"
  "ompleteArtifact\022 \n\030artifact_inventory_sc"
  "ore\030\022 \001(\004\0226\n\017farm_appearance\030\023 \001(\0132\035.ei."
  "ShellDB.FarmConfiguration\022\021\n\ttimestamp\030\026"
  " \001(\001\"\316\016\n\032ContractCoopStatusResponse\022F\n\017r"
  "esponse_status\030\023 \001(\0162-.ei.ContractCoopSt"
  "atusResponse.ResponseStatus\022\033\n\023contract_"
  "identifier\030\001 \001(\t\022\024\n\014total_amount\030\002 \001(\001\022\027"
  "\n\017coop_identifier\030\003 \001(\t\022\'\n\005grade\030\021 \001(\0162\030"
  ".ei.Contract.PlayerGrade\022E\n\014contributors"
  "\030\004 \003(\0132/.ei.ContractCoopStatusResponse.C"
  "ontributionInfo\022\026\n\016auto_generated\030\010 \001(\010\022"
  "\016\n\006public\030\n \001(\010\022\022\n\ncreator_id\030\t \001(\t\022\031\n\021s"
  "econds_remaining\030\005 \001(\001\022(\n seconds_since_"
  "all_goals_achieved\030\020 \001(\001\022\032\n\022all_goals_ac"
  "hieved\030\016 \001(\010\022\035\n\025all_members_reporting\030\006 "
  "\001(\010\022&\n\036grace_period_seconds_remaining\030\007 "
  "\001(\001\022\030\n\020cleared_for_exit\030\017 \001(\010\0226\n\005gifts\030\013"
  " \003(\0132\'.ei.ContractCoopStatusResponse.Coo"
  "pGift\022\?\n\014chicken_runs\030\r \003(\0132).ei.Contrac"
  "tCoopStatusResponse.ChickenRun\022\027\n\017local_"
  "timestamp\030\014 \001(\001\022\021\n\tlast_sync\030\022 \001(\001\032\352\004\n\020C"
  "ontributionInfo\022\014\n\004uuid\030\025 \001(\t\022\017\n\007user_id"
  "\030\001 \001(\t\022\021\n\tuser_name\030\002 \001(\t\022\033\n\023contract_id"
  "entifier\030\023 \001(\t\022\033\n\023contribution_amount\030\003 "
  "\001(\001\022\031\n\021contribution_rate\030\006 \001(\001\022\022\n\nsoul_p"
  "ower\030\013 \001(\001\0223\n\021production_params\030\017 \001(\0132\030."
  "ei.FarmProductionParams\022%\n\tfarm_info\030\022 \001"
  "(\0132\022.ei.PlayerFarmInfo\022\023\n\013rank_change\030\010 "
  "\001(\005\022\027\n\017recently_active\030\027 \001(\010\022\016\n\006active\030\004"
  " \001(\010\022\021\n\tcc_member\030\030 \001(\010\022\r\n\005leech\030\020 \001(\010\022\021"
  "\n\tfinalized\030\026 \001(\010\022\033\n\023time_cheat_detected"
  "\030\007 \001(\010\022\036\n\010platform\030\005 \001(\0162\014.ei.Platform\022\017"
  "\n\007push_id\030\t \001(\t\022\021\n\tban_votes\030\n \001(\r\022\022\n\nau"
  "tojoined\030\021 \001(\010\022\024\n\014boost_tokens\030\014 \001(\r\022\032\n\022"
  "boost_tokens_spent\030\016 \001(\r\022\'\n\014buff_history"
  "\030\r \003(\0132\021.ei.CoopBuffState\022\034\n\024chicken_run"
  "_cooldown\030\024 \001(\001\032P\n\010CoopGift\022\017\n\007user_id\030\001"
  " \001(\t\022\021\n\tuser_name\030\003 \001(\t\022\016\n\006amount\030\002 \001(\r\022"
  "\020\n\010tracking\030\004 \001(\t\032@\n\nChickenRun\022\017\n\007user_"
  "id\030\001 \001(\t\022\021\n\tuser_name\030\003 \001(\t\022\016\n\006amount\030\002 "
  "\001(\004\"\323\001\n\016ResponseStatus\022\014\n\010NO_ERROR\020\000\022\020\n\014"
  "MISSING_USER\020\001\022\023\n\017MISSING_COOP_ID\020\002\022\027\n\023M"
  "ISSING_CONTRACT_ID\020\003\022\030\n\024MEMBERSHIP_NOT_F"
  "OUND\020\004\022\022\n\016COOP_NOT_FOUND\020\005\022\026\n\022CONTRACT_N"
  "OT_FOUND\020\006\022\026\n\022INVALID_MEMBERSHIP\020\007\022\025\n\020NO"
  "_HTTP_RESPONSE\020\364\003\"g\n\014MemberStatus\022\t\n\005VAL"
  "ID\020\000\022\023\n\017KICKED_INACTIVE\020\001\022\022\n\016KICKED_PRIV"
  "ATE\020\002\022\021\n\rKICKED_CHEATS\020\003\022\020\n\014KICKED_LEECH"
  "\020\004\"I\n\006Status\022\013\n\007UNKNOWN\020\000\022\t\n\005LOBBY\020\001\022\n\n\006"
  "ACTIVE\020\002\022\014\n\010COMPLETE\020\003\022\r\n\tFINALIZED\020\004\"\365\004"
  "\n\rLocalContract\022\036\n\010contract\030\001 \001(\0132\014.ei.C"
  "ontract\022\027\n\017coop_identifier\030\002 \001(\t\022\020\n\010acce"
  "pted\030\007 \001(\010\022\025\n\rtime_accepted\030\003 \001(\001\022\021\n\tcan"
  "celled\030\004 \001(\010\022\013\n\003new\030\010 \001(\010\022\034\n\024coop_shared"
  "_end_time\030\005 \001(\001\022 \n\030coop_simulation_end_t"
  "ime\030\026 \001(\001\022\"\n\032coop_grace_period_end_time\030"
  "\t \001(\001\022#\n\033coop_contribution_finalized\030\n \001"
  "(\010\022\'\n\037coop_last_uploaded_contribution\030\013 "
  "\001(\001\022\024\n\014coop_user_id\030\r \001(\t\022\027\n\017coop_share_"
  "farm\030\021 \001(\010\022%\n\035last_amount_when_reward_gi"
  "ven\030\006 \001(\001\022\032\n\022num_goals_achieved\030\016 \001(\r\022\023\n"
  "\013boosts_used\030\014 \001(\r\022\025\n\rpoints_replay\030\024 \001("
  "\010\022\016\n\006league\030\017 \001(\r\022\'\n\005grade\030\022 \001(\0162\030.ei.Co"
  "ntract.PlayerGrade\022\025\n\rlast_nag_time\030\020 \001("
  "\001\022*\n\nevaluation\030\023 \001(\0132\026.ei.ContractEvalu"
  "ation\022\026\n\016reported_uuids\030\025 \003(\t\"\301\002\n\013MyCont"
  "racts\022\031\n\021contract_ids_seen\030\003 \003(\t\022$\n\tcont"
  "racts\030\001 \003(\0132\021.ei.LocalContract\022\"\n\007archiv"
  "e\030\002 \003(\0132\021.ei.LocalContract\022=\n\025current_co"
  "op_statuses\030\004 \003(\0132\036.ei.ContractCoopStatu"
  "sResponse\022(\n\010last_cpi\030\005 \001(\0132\026.ei.Contrac"
  "tPlayerInfo\022\036\n\026initial_grade_revealed\030\006 "
  "\001(\010\022!\n\031last_grade_progress_shown\030\007 \001(\001\022!"
  "\n\031show_advanced_evaluations\030\010 \001(\010\"\276\001\n\020Qu"
  "eryCoopRequest\022#\n\005rinfo\030\005 \001(\0132\024.ei.Basic"
  "RequestInfo\022\033\n\023contract_identifier\030\001 \001(\t"
  "\022\027\n\017coop_identifier\030\002 \001(\t\022\016\n\006league\030\004 \001("
  "\r\022\'\n\005grade\030\006 \001(\0162\030.ei.Contract.PlayerGra"
  "de\022\026\n\016client_version\030\003 \001(\r\"\226\001\n\021QueryCoop"
  "Response\022\016\n\006exists\030\001 \001(\010\022\014\n\004full\030\002 \001(\010\022\017"
  "\n\007expired\030\005 \001(\010\022\030\n\020different_league\030\004 \001("
  "\010\022\027\n\017different_grade\030\006 \001(\010\022\017\n\007cc_only\030\007 "
  "\001(\010\022\016\n\006banned\030\003 \001(\010\"\221\003\n\021CreateCoopReques"
  "t\022#\n\005rinfo\030\n \001(\0132\024.ei.BasicRequestInfo\022\033"
  "\n\023contract_identifier\030\001 \001(\t\022\027\n\017coop_iden"
  "tifier\030\002 \001(\t\022\016\n\006public\030\r \001(\010\022\017\n\007cc_only\030"
  "\016 \001(\010\022\030\n\020allow_all_grades\030\020 \001(\010\022\031\n\021secon"
  "ds_remaining\030\003 \001(\001\022\017\n\007user_id\030\004 \001(\t\022\021\n\tu"
  "ser_name\030\005 \001(\t\022\022\n\nsoul_power\030\010 \001(\001\022\013\n\003eo"
  "p\030\013 \001(\001\022\016\n\006league\030\t \001(\r\022\'\n\005grade\030\014 \001(\0162\030"
  ".ei.Contract.PlayerGrade\022\025\n\rpoints_repla"
  "y\030\017 \001(\010\022\036\n\010platform\030\006 \001(\0162\014.ei.Platform\022"
  "\026\n\016client_version\030\007 \001(\r\"6\n\022CreateCoopRes"
  "ponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\""
  "\324\002\n\017JoinCoopRequest\022#\n\005rinfo\030\n \001(\0132\024.ei."
  "BasicRequestInfo\022\033\n\023contract_identifier\030"
  "\001 \001(\t\022\027\n\017coop_identifier\030\002 \001(\t\022\017\n\007user_i"
  "d\030\003 \001(\t\022\021\n\tuser_name\030\004 \001(\t\022\022\n\nsoul_power"
  "\030\010 \001(\001\022\013\n\003eop\030\014 \001(\001\022\016\n\006league\030\t \001(\r\022\'\n\005g"
  "rade\030\r \001(\0162\030.ei.Contract.PlayerGrade\022\025\n\r"
  "points_replay\030\016 \001(\010\022\036\n\010platform\030\005 \001(\0162\014."
  "ei.Platform\022\031\n\021seconds_remaining\030\013 \001(\001\022\026"
  "\n\016client_version\030\007 \001(\r\"\227\002\n\020JoinCoopRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\016\n"
  "\006banned\030\004 \001(\010\022\027\n\017coop_identifier\030\005 \001(\t\022\031"
  "\n\021seconds_remaining\030\003 \001(\001\022\025\n\rmatch_perce"
  "nt\030\006 \001(\001\022\023\n\013num_members\030\007 \001(\r\0225\n\006status\030"
  "\010 \001(\0162%.ei.ContractCoopStatusResponse.St"
  "atus\022\'\n\005grade\030\t \001(\0162\030.ei.Contract.Player"
  "Grade\022\021\n\tcan_start\030\n \001(\010\"\277\002\n\023AutoJoinCoo"
  "pRequest\022#\n\005rinfo\030\t \001(\0132\024.ei.BasicReques"
  "tInfo\022\033\n\023contract_identifier\030\001 \001(\t\022\017\n\007us"
  "er_id\030\002 \001(\t\022\021\n\tuser_name\030\003 \001(\t\022\022\n\nsoul_p"
  "ower\030\004 \001(\001\022\013\n\003eop\030\n \001(\001\022\016\n\006league\030\010 \001(\r\022"
  "\'\n\005grade\030\014 \001(\0162\030.ei.Contract.PlayerGrade"
  "\022\025\n\rpoints_replay\030\016 \001(\010\022\031\n\021seconds_remai"
  "ning\030\005 \001(\001\022\036\n\010platform\030\006 \001(\0162\014.ei.Platfo"
  "rm\022\026\n\016client_version\030\007 \001(\r\"\275\001\n\034UpdateCoo"
  "pPermissionsRequest\022#\n\005rinfo\030\006 \001(\0132\024.ei."
  "BasicRequestInfo\022\033\n\023contract_identifier\030"
  "\001 \001(\t\022\027\n\017coop_identifier\030\002 \001(\t\022\032\n\022reques"
  "ting_user_id\030\003 \001(\t\022\016\n\006public\030\004 \001(\010\022\026\n\016cl"
  "ient_version\030\005 \001(\r\"A\n\035UpdateCoopPermissi"
  "onsResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
  "\002 \001(\t\"\240\001\n\020LeaveCoopRequest\022#\n\005rinfo\030\010 \001("
  "\0132\024.ei.BasicRequestInfo\022\033\n\023contract_iden"
  "tifier\030\001 \001(\t\022\027\n\017coop_identifier\030\002 \001(\t\022\031\n"
  "\021player_identifier\030\003 \001(\t\022\026\n\016client_versi"
  "on\030\007 \001(\r\"\357\001\n\025GiftPlayerCoopRequest\022#\n\005ri"
  "nfo\030\010 \001(\0132\024.ei.BasicRequestInfo\022\033\n\023contr"
  "act_identifier\030\001 \001(\t\022\027\n\017coop_identifier\030"
  "\002 \001(\t\022\031\n\021player_identifier\030\003 \001(\t\022\032\n\022requ"
  "esting_user_id\030\004 \001(\t\022\034\n\024requesting_user_"
  "name\030\006 \001(\t\022\016\n\006amount\030\005 \001(\r\022\026\n\016client_ver"
  "sion\030\007 \001(\r\"\365\001\n\031SendChickenRunCoopRequest"
  "\022#\n\005rinfo\030\010 \001(\0132\024.ei.BasicRequestInfo\022\033\n"
  "\023contract_identifier\030\001 \001(\t\022\027\n\017coop_ident"
  "ifier\030\002 \001(\t\022\031\n\021player_identifier\030\003 \001(\t\022\032"
  "\n\022requesting_user_id\030\004 \001(\t\022\034\n\024requesting"
  "_user_name\030\006 \001(\t\022\020\n\010farm_pop\030\005 \001(\004\022\026\n\016cl"
  "ient_version\030\007 \001(\r\"\200\002\n\027ReportPlayerCoopR"
  "equest\022#\n\005rinfo\030\001 \001(\0132\024.ei.BasicRequestI"
  "nfo\022\033\n\023contract_identifier\030\002 \001(\t\022\027\n\017coop"
  "_identifier\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\0222\n\006re"
  "ason\030\005 \001(\0162\".ei.ReportPlayerCoopRequest."
  "Reason\"E\n\006Reason\022\013\n\007UNKNOWN\020\000\022\022\n\016OFFENSI"
  "VE_NAME\020\001\022\014\n\010CHEATING\020\002\022\014\n\010LEECHING\020\003\"\271\002"
  "\n\025KickPlayerCoopRequest\022#\n\005rinfo\030\010 \001(\0132\024"
  ".ei.BasicRequestInfo\022\033\n\023contract_identif"
  "ier\030\001 \001(\t\022\027\n\017coop_identifier\030\002 \001(\t\022\031\n\021pl"
  "ayer_identifier\030\003 \001(\t\022\032\n\022requesting_user"
  "_id\030\004 \001(\t\0220\n\006reason\030\t \001(\0162 .ei.KickPlaye"
  "rCoopRequest.Reason\022\026\n\016client_version\030\007 "
  "\001(\r\"D\n\006Reason\022\013\n\007INVALID\020\000\022\013\n\007CHEATER\020\001\022"
  "\010\n\004IDLE\020\002\022\t\n\005LEECH\020\003\022\013\n\007PRIVATE\020\004\"\341\003\n\037Co"
  "ntractCoopStatusUpdateRequest\022#\n\005rinfo\030\014"
  " \001(\0132\024.ei.BasicRequestInfo\022\017\n\007user_id\030\001 "
  "\001(\t\022\033\n\023contract_identifier\030\002 \001(\t\022\027\n\017coop"
  "_identifier\030\003 \001(\t\022\024\n\014push_user_id\030\010 \001(\t\022"
  "\016\n\006amount\030\004 \001(\001\022\014\n\004rate\030\005 \001(\001\022\034\n\024time_ch"
  "eats_detected\030\006 \001(\r\022\022\n\nsoul_power\030\007 \001(\001\022"
  "\013\n\003eop\030\017 \001(\r\022\024\n\014boost_tokens\030\t \001(\r\022\032\n\022bo"
  "ost_tokens_spent\030\r \001(\r\022\026\n\016hide_cc_status"
  "\030\021 \001(\010\0223\n\021production_params\030\016 \001(\0132\030.ei.F"
  "armProductionParams\022%\n\tfarm_info\030\020 \001(\0132\022"
  ".ei.PlayerFarmInfo\022\037\n\024egg_laying_rate_bu"
  "ff\030\n \001(\001:\0011\022\030\n\rearnings_buff\030\013 \001(\001:\0011\"\202\001"
  "\n ContractCoopStatusUpdateResponse\022\021\n\tfi"
  "nalized\030\001 \001(\010\022\016\n\006exists\030\002 \001(\010\022;\n\006status\030"
  "\003 \001(\0162+.ei.ContractCoopStatusResponse.Me"
  "mberStatus\"Z\n\rCoopBuffState\022\032\n\017egg_layin"
  "g_rate\030\001 \001(\001:\0011\022\023\n\010earnings\030\002 \001(\001:\0011\022\030\n\020"
  "server_timestamp\030\003 \001(\001\"5\n\017CoopBuffHistor"
  "y\022\"\n\007history\030\001 \003(\0132\021.ei.CoopBuffState\"@\n"
  "\023CoopChickenRunEntry\022\017\n\007user_id\030\001 \001(\t\022\030\n"
  "\020server_timestamp\030\002 \001(\001\"C\n\027CoopLastChick"
  "enRunTimes\022(\n\007entries\030\003 \003(\0132\027.ei.CoopChi"
  "ckenRunEntry\"\215\002\n\023LeaderboardAnalysis\022-\n\006"
  "chunks\030\001 \003(\0132\035.ei.LeaderboardAnalysis.Ch"
  "unk\022\r\n\005count\030\002 \001(\r\022\022\n\nhigh_score\030\003 \001(\001\022\021"
  "\n\tlow_score\030\004 \001(\001\022\016\n\006cursor\030\005 \001(\t\032\200\001\n\005Ch"
  "unk\022\023\n\013start_index\030\001 \001(\r\022\021\n\tend_index\030\002 "
  "\001(\r\022\022\n\nhigh_score\030\003 \001(\001\022\021\n\tlow_score\030\004 \001"
  "(\001\022\024\n\014start_cursor\030\005 \001(\t\022\022\n\nend_cursor\030\006"
  " \001(\t\"}\n\017LeaderboardInfo\022+\n\007seasons\030\001 \003(\013"
  "2\032.ei.LeaderboardInfo.Season\022\026\n\016all_time"
  "_scope\030\002 \001(\t\032%\n\006Season\022\r\n\005scope\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\"q\n\022LeaderboardRequest\022#\n\005rin"
  "fo\030\001 \001(\0132\024.ei.BasicRequestInfo\022\r\n\005scope\030"
  "\002 \001(\t\022\'\n\005grade\030\003 \001(\0162\030.ei.Contract.Playe"
  "rGrade\"\342\001\n\023LeaderboardResponse\022\r\n\005scope\030"
  "\001 \001(\t\022\'\n\005grade\030\002 \001(\0162\030.ei.Contract.Playe"
  "rGrade\0222\n\013top_entries\030\003 \003(\0132\035.ei.Leaderb"
  "oardResponse.Entry\022\r\n\005count\030\004 \001(\r\022\014\n\004ran"
  "k\030\005 \001(\r\022\r\n\005score\030\006 \001(\001\0323\n\005Entry\022\014\n\004rank\030"
  "\001 \001(\r\022\r\n\005alias\030\002 \001(\t\022\r\n\005score\030\003 \001(\001\"6\n\020C"
  "ontractsArchive\022\"\n\007archive\030\001 \003(\0132\021.ei.Lo"
  "calContract\"\377\002\n\016ContractAction\022\017\n\007user_i"
  "d\030\001 \001(\t\022\023\n\013action_name\030\002 \001(\t\022\023\n\013approx_t"
  "ime\030\003 \001(\001\022\024\n\014dest_user_id\030\004 \001(\t\022\023\n\013contr"
  "act_id\030\005 \001(\t\022\017\n\007coop_id\030\006 \001(\t\022\020\n\010autojoi"
  "n\030\007 \001(\010\022\r\n\005grade\030\010 \001(\r\022\016\n\006replay\030\t \001(\010\022\025"
  "\n\rpoints_replay\030\n \001(\010\022\023\n\013reward_type\030\013 \001"
  "(\r\022\026\n\016reward_subtype\030\014 \001(\t\022\025\n\rreward_amo"
  "unt\030\r \001(\001\022\022\n\ngoal_index\030\016 \001(\r\022\020\n\010boost_i"
  "d\030\017 \001(\t\022\016\n\006tokens\030\020 \001(\r\022\023\n\013kick_reason\030\021"
  " \001(\r\022\016\n\006public\030\022 \001(\010\022\017\n\007cc_only\030\023 \001(\010\"w\n"
  "\023UserDataInfoRequest\022#\n\005rinfo\030\004 \001(\0132\024.ei"
  ".BasicRequestInfo\022\017\n\007user_id\030\001 \001(\t\022\021\n\tde"
  "vice_id\030\002 \001(\t\022\027\n\017backup_checksum\030\003 \001(\004\"d"
  "\n\024UserDataInfoResponse\022\027\n\017backup_checksu"
  "m\030\001 \001(\004\022\031\n\021backup_total_cash\030\002 \001(\001\022\030\n\020co"
  "op_memberships\030\003 \003(\t\"{\n\027ClearAllUserData"
  "Request\022#\n\005rinfo\030\004 \001(\0132\024.ei.BasicRequest"
  "Info\022\017\n\007user_id\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\t"
  "\022\027\n\017backup_checksum\030\003 \001(\004\"r\n\nServerGift\022"
  "\017\n\007user_id\030\001 \001(\t\022#\n\013reward_type\030\003 \001(\0162\016."
  "ei.RewardType\022\027\n\017reward_sub_type\030\004 \001(\t\022\025"
  "\n\rreward_amount\030\005 \001(\001\"\333\r\n\nLiveConfig\022\021\n\t"
  "config_id\030\001 \001(\t\0222\n\rboosts_config\030\002 \001(\0132\033"
  ".ei.LiveConfig.BoostsConfig\022.\n\013gift_conf"
  "ig\030\003 \001(\0132\031.ei.LiveConfig.GiftConfig\022.\n\013m"
  "isc_config\030\004 \001(\0132\031.ei.LiveConfig.MiscCon"
  "fig\032\306\001\n\014BoostsConfig\022<\n\014item_configs\030\001 \003"
  "(\0132&.ei.LiveConfig.BoostsConfig.ItemConf"
  "ig\022\037\n\027cash_boost_cooloff_time\030\002 \001(\001\032W\n\nI"
  "temConfig\022\020\n\010boost_id\030\001 \001(\t\022\r\n\005price\030\002 \001"
  "(\r\022\023\n\013token_price\030\003 \001(\r\022\023\n\013se_required\030\004"
  " \001(\001\032\336\006\n\nGiftConfig\022\?\n\014gift_configs\030\t \003("
  "\0132).ei.LiveConfig.GiftConfig.GiftValueCo"
  "nfig\022\031\n\021gift_mu_min_spent\030\n \001(\001\022\031\n\021gift_"
  "mu_max_spent\030\013 \001(\001\022\034\n\024gift_mu_overall_mu"
  "lt\030\014 \001(\001\022E\n\025random_gift_mu_config\030\017 \001(\0132"
  "&.ei.LiveConfig.GiftConfig.GiftMuConfig\022"
  "D\n\024video_gift_mu_config\030\020 \001(\0132&.ei.LiveC"
  "onfig.GiftConfig.GiftMuConfig\022\030\n\020package"
  "_interval\030\001 \001(\001\022\034\n\024video_offer_interval\030"
  "\002 \001(\001\022%\n\035video_offer_interval_contract\030\003"
  " \001(\001\022\'\n\037video_offer_interval_piggy_full\030"
  "\004 \001(\001\022-\n%video_offer_interval_piggy_extr"
  "a_full\030\005 \001(\001\022\033\n\023video_reset_on_idle\030\016 \001("
  "\010\022!\n\031package_interval_contract\030\006 \001(\001\022#\n\033"
  "package_interval_piggy_full\030\007 \001(\001\022)\n!pac"
  "kage_interval_piggy_extra_full\030\010 \001(\001\022\035\n\025"
  "package_reset_on_idle\030\r \001(\010\032|\n\017GiftValue"
  "Config\022\017\n\007gift_id\030\001 \001(\t\022\016\n\006amount\030\004 \001(\001\022"
  "\020\n\010rand_min\030\002 \001(\001\022\020\n\010rand_max\030\003 \001(\001\022\021\n\tv"
  "ideo_min\030\005 \001(\001\022\021\n\tvideo_max\030\006 \001(\001\032J\n\014Gif"
  "tMuConfig\022\021\n\tmin_spent\030\001 \001(\001\022\021\n\tmax_spen"
  "t\030\002 \001(\001\022\024\n\014overall_mult\030\003 \001(\001\032\373\003\n\nMiscCo"
  "nfig\022\024\n\014ask_to_track\030\001 \001(\010\022\"\n\032ask_to_tra"
  "ck_min_soul_eggs\030\002 \001(\001\022\034\n\024ask_to_track_m"
  "essage\030\003 \001(\t\022$\n\034ask_to_track_show_pre_di"
  "alog\030\004 \001(\010\022\"\n\032ask_to_track_after_privacy"
  "\030\005 \001(\010\022$\n\034chicken_run_boost_percentage\030\006"
  " \001(\001\022\034\n\024shells_intro_tickets\030\007 \001(\r\022\'\n\037sh"
  "ells_max_free_chicken_configs\030\010 \001(\r\022$\n\034s"
  "hells_intro_alert_threshold\030\t \001(\r\022+\n\036she"
  "lls_lighting_controls_price\030\016 \001(\r:\003175\022."
  "\n&contracts_expert_league_min_soul_power"
  "\030\n \001(\001\022!\n\031new_player_event_duration\030\013 \001("
  "\001\022 \n\030contracts_club_available\030\014 \001(\010\022\026\n\016c"
  "ontracts_beta\030\r \001(\010\"\277\004\n\nInGameMail\022\n\n\002id"
  "\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\014\n\004date\030\010 \001(\t\022\017\n\007m"
  "essage\030\003 \001(\t\022\016\n\006action\030\004 \001(\t\022\013\n\003url\030\005 \001("
  "\t\022 \n\010app_link\030\016 \001(\0162\016.ei.UILocation\022\026\n\016a"
  "pp_link_extra\030\017 \001(\t\022\032\n\005image\030\020 \001(\0132\013.ei."
  "DLCItem\022\023\n\013image_width\030\025 \001(\001\022\024\n\014image_he"
  "ight\030\026 \001(\001\022\020\n\010platform\030\007 \001(\r\022\016\n\006builds\030\t"
  " \003(\t\022\032\n\022min_client_version\030\n \001(\r\022\032\n\022max_"
  "client_version\030\014 \001(\r\022\025\n\rmin_soul_eggs\030\013 "
  "\001(\001\022\032\n\022min_mystical_bonus\030\r \001(\001\022\037\n\tuser_"
  "type\030\021 \001(\0162\014.ei.UserType\022\030\n\020min_piggy_br"
  "eaks\030\024 \001(\r\022\020\n\010gold_tip\030\006 \001(\001\022\013\n\003tip\030\027 \001("
  "\010\022\020\n\010priority\030\033 \001(\r\022\037\n\027min_days_since_la"
  "st_tip\030\030 \001(\001\022\023\n\013max_retries\030\031 \001(\r\022\030\n\020day"
  "s_until_retry\030\032 \001(\001\022\020\n\010category\030\034 \001(\t\"S\n"
  "\006MailDB\022\034\n\004mail\030\001 \003(\0132\016.ei.InGameMail\022\024\n"
  "\014tips_db_data\030\002 \001(\014\022\025\n\rtips_checksum\030\003 \001"
  "(\t\"&\n\006TipsDB\022\034\n\004tips\030\001 \003(\0132\016.ei.InGameMa"
  "il\"\240\001\n\tMailState\022\025\n\rread_mail_ids\030\001 \003(\t\022"
  "+\n\013tips_states\030\002 \003(\0132\026.ei.MailState.TipS"
  "tate\022\025\n\rtips_checksum\030\003 \001(\t\0328\n\010TipState\022"
  "\n\n\002id\030\001 \001(\t\022\r\n\005reads\030\002 \001(\r\022\021\n\ttime_read\030"
  "\003 \001(\001\"\354\003\n\023PeriodicalsResponse\022\034\n\005sales\030\001"
  " \001(\0132\r.ei.SalesInfo\022\'\n\006events\030\002 \001(\0132\027.ei"
  ".EggIncCurrentEvents\022(\n\tcontracts\030\003 \001(\0132"
  "\025.ei.ContractsResponse\022+\n\013evaluations\030\010 "
  "\003(\0132\026.ei.ContractEvaluation\022\035\n\005gifts\030\004 \003"
  "(\0132\016.ei.ServerGift\0223\n\016artifact_cases\030\t \003"
  "(\0132\033.ei.CompleteMissionResponse\022#\n\013live_"
  "config\030\005 \001(\0132\016.ei.LiveConfig\022\034\n\010mail_bag"
  "\030\006 \001(\0132\n.ei.MailDB\0224\n\024contract_player_in"
  "fo\030\007 \001(\0132\026.ei.ContractPlayerInfo\022\?\n\022show"
  "case_royalties\030\n \003(\0132#.ei.PeriodicalsRes"
  "ponse.RoyaltyInfo\032)\n\013RoyaltyInfo\022\n\n\002id\030\001"
  " \001(\t\022\016\n\006amount\030\002 \001(\r\"\371\002\n\025GetPeriodicalsR"
  "equest\022#\n\005rinfo\030\014 \001(\0132\024.ei.BasicRequestI"
  "nfo\022\017\n\007user_id\030\001 \001(\t\022\022\n\npiggy_full\030\002 \001(\010"
  "\022\030\n\020piggy_found_full\030\003 \001(\010\022\035\n\025seconds_fu"
  "ll_realtime\030\004 \001(\001\022\035\n\025seconds_full_gameti"
  "me\030\005 \001(\001\022\027\n\017lost_increments\030\007 \001(\r\022\021\n\tsou"
  "l_eggs\030\010 \001(\001\022\036\n\026mystical_earnings_mult\030\r"
  " \001(\001\022\013\n\003eop\030\016 \001(\r\022\032\n\022contracts_unlocked\030"
  "\017 \001(\010\022\032\n\022artifacts_unlocked\030\020 \001(\010\022\036\n\026cur"
  "rent_client_version\030\n \001(\r\022\r\n\005debug\030\013 \001(\010"
  "\"\325\001\n\rConfigRequest\022#\n\005rinfo\030\001 \001(\0132\024.ei.B"
  "asicRequestInfo\022\021\n\tsoul_eggs\030\002 \001(\001\022\032\n\022co"
  "ntracts_unlocked\030\005 \001(\010\022\032\n\022artifacts_unlo"
  "cked\030\003 \001(\010\022\032\n\022fuel_tank_unlocked\030\004 \001(\010\022\022"
  "\n\npro_permit\030\006 \001(\010\022\r\n\005ultra\030\007 \001(\010\022\025\n\rtip"
  "s_checksum\030\010 \001(\t\"x\n\016ConfigResponse\022#\n\013li"
  "ve_config\030\001 \001(\0132\016.ei.LiveConfig\022\034\n\010mail_"
  "bag\030\002 \001(\0132\n.ei.MailDB\022#\n\013dlc_catalog\030\003 \001"
  "(\0132\016.ei.DLCCatalog\"d\n\024AdAttributionRawDa"
  "ta\022\024\n\014device_ad_id\030\001 \001(\t\022\017\n\007user_id\030\004 \001("
  "\t\022\022\n\nad_network\030\002 \001(\t\022\021\n\tjson_data\030\003 \001(\t"
  "\"\270\001\n\020AdAttributionRow\022\017\n\007user_id\030\001 \001(\t\022\r"
  "\n\005ad_id\030\002 \001(\t\022\022\n\nad_network\030\003 \001(\t\022\020\n\010cam"
  "paign\030\004 \001(\t\022\017\n\007keyword\030\005 \001(\t\022\r\n\005extra\030\006 "
  "\001(\t\022\022\n\nclick_date\030\007 \001(\002\022\025\n\rdownload_date"
  "\030\010 \001(\002\022\023\n\013approx_time\030\t \001(\002\"\215\003\n\021AdAttrib"
  "utionInfo\022\024\n\014device_ad_id\030\001 \001(\t\022\024\n\014netwo"
  "rk_name\030\002 \001(\t\022\023\n\013attribution\030\003 \001(\010\022\020\n\010or"
  "g_name\030\004 \001(\t\022\016\n\006org_id\030\005 \001(\t\022\025\n\rcampaign"
  "_name\030\006 \001(\t\022\023\n\013campaign_id\030\007 \001(\t\022\022\n\nclic"
  "k_date\030\010 \001(\t\022\027\n\017conversion_date\030\t \001(\t\022\027\n"
  "\017conversion_type\030\n \001(\t\022\013\n\003geo\030\013 \001(\t\022\024\n\014a"
  "dgroup_name\030\014 \001(\t\022\022\n\nadgroup_id\030\r \001(\t\022\017\n"
  "\007keyword\030\016 \001(\t\022\022\n\nkeyword_id\030\017 \001(\t\022\025\n\rke"
  "yword_extra\030\020 \001(\t\022\030\n\020creativeset_name\030\021 "
  "\001(\t\022\026\n\016creativeset_id\030\022 \001(\t\"\227\002\n\023Artifact"
  "sClientInfo\022\035\n\025mission_capacity_mult\030\001 \001"
  "(\001\022\035\n\025mission_duration_mult\030\002 \001(\001\022!\n\031mis"
  "sion_ftl_duration_mult\030\004 \001(\001\022:\n\rlaunch_c"
  "ounts\030\003 \003(\0132#.ei.ArtifactsClientInfo.Lau"
  "nchCount\032c\n\013LaunchCount\022\'\n\004ship\030\001 \001(\0162\031."
  "ei.MissionInfo.Spaceship\022\024\n\014num_launches"
  "\030\002 \001(\r\022\025\n\rlaunch_points\030\003 \001(\001\"\264\006\n\013Missio"
  "nInfo\022\'\n\004ship\030\001 \001(\0162\031.ei.MissionInfo.Spa"
  "ceship\022&\n\006status\030\002 \001(\0162\026.ei.MissionInfo."
  "Status\0223\n\rduration_type\030\003 \001(\0162\034.ei.Missi"
  "onInfo.DurationType\022\"\n\004fuel\030\004 \003(\0132\024.ei.M"
  "issionInfo.Fuel\022\r\n\005level\030\014 \001(\r\022\030\n\020durati"
  "on_seconds\030\005 \001(\001\022\020\n\010capacity\030\t \001(\r\022\024\n\014qu"
  "ality_bump\030\013 \001(\001\022.\n\017target_artifact\030\r \001("
  "\0162\025.ei.ArtifactSpec.Name\022\031\n\021seconds_rema"
  "ining\030\006 \001(\001\022\032\n\022start_time_derived\030\010 \001(\001\022"
  "\023\n\013mission_log\030\n \001(\t\022\022\n\nidentifier\030\007 \001(\t"
  "\032,\n\004Fuel\022\024\n\003egg\030\001 \001(\0162\007.ei.Egg\022\016\n\006amount"
  "\030\002 \001(\001\"\270\001\n\tSpaceship\022\017\n\013CHICKEN_ONE\020\000\022\020\n"
  "\014CHICKEN_NINE\020\001\022\021\n\rCHICKEN_HEAVY\020\002\022\007\n\003BC"
  "R\020\003\022\025\n\021MILLENIUM_CHICKEN\020\004\022\027\n\023CORELLIHEN"
  "_CORVETTE\020\005\022\016\n\nGALEGGTICA\020\006\022\016\n\nCHICKFIAN"
  "T\020\007\022\014\n\010VOYEGGER\020\010\022\016\n\nHENERPRISE\020\t\"t\n\006Sta"
  "tus\022\013\n\007FUELING\020\000\022\025\n\021PREPARE_TO_LAUNCH\020\005\022"
  "\r\n\tEXPLORING\020\n\022\014\n\010RETURNED\020\017\022\r\n\tANALYZIN"
  "G\020\020\022\014\n\010COMPLETE\020\024\022\014\n\010ARCHIVED\020\031\";\n\014Durat"
  "ionType\022\t\n\005SHORT\020\000\022\010\n\004LONG\020\001\022\010\n\004EPIC\020\002\022\014"
  "\n\010TUTORIAL\020\003\"\360\013\n\014ArtifactSpec\022#\n\004name\030\001 "
  "\001(\0162\025.ei.ArtifactSpec.Name\022%\n\005level\030\002 \001("
  "\0162\026.ei.ArtifactSpec.Level\022\'\n\006rarity\030\003 \001("
  "\0162\027.ei.ArtifactSpec.Rarity\022\024\n\003egg\030\004 \001(\0162"
  "\007.ei.Egg\"\212\t\n\004Name\022\017\n\013LUNAR_TOTEM\020\000\022\027\n\023NE"
  "ODYMIUM_MEDALLION\020\003\022\021\n\rBEAK_OF_MIDAS\020\004\022\025"
  "\n\021LIGHT_OF_EGGENDIL\020\005\022\025\n\021DEMETERS_NECKLA"
  "CE\020\006\022\025\n\021VIAL_MARTIAN_DUST\020\007\022\021\n\rORNATE_GU"
  "SSET\020\010\022\017\n\013THE_CHALICE\020\t\022\021\n\rBOOK_OF_BASAN"
  "\020\n\022\023\n\017PHOENIX_FEATHER\020\013\022\021\n\rTUNGSTEN_ANKH"
  "\020\014\022\023\n\017AURELIAN_BROOCH\020\025\022\024\n\020CARVED_RAINST"
  "ICK\020\026\022\017\n\013PUZZLE_CUBE\020\027\022\025\n\021QUANTUM_METRON"
  "OME\020\030\022\024\n\020SHIP_IN_A_BOTTLE\020\031\022\025\n\021TACHYON_D"
  "EFLECTOR\020\032\022\030\n\024INTERSTELLAR_COMPASS\020\033\022\025\n\021"
  "DILITHIUM_MONOCLE\020\034\022\025\n\021TITANIUM_ACTUATOR"
  "\020\035\022\021\n\rMERCURYS_LENS\020\036\022\021\n\rTACHYON_STONE\020\001"
  "\022\023\n\017DILITHIUM_STONE\020\037\022\017\n\013SHELL_STONE\020 \022\017"
  "\n\013LUNAR_STONE\020!\022\016\n\nSOUL_STONE\020\"\022\022\n\016PROPH"
  "ECY_STONE\020\'\022\021\n\rQUANTUM_STONE\020$\022\017\n\013TERRA_"
  "STONE\020%\022\016\n\nLIFE_STONE\020&\022\021\n\rCLARITY_STONE"
  "\020(\022\035\n\031EXTRATERRESTRIAL_ALUMINUM\020\r\022\024\n\020ANC"
  "IENT_TUNGSTEN\020\016\022\017\n\013SPACE_ROCKS\020\017\022\016\n\nALIE"
  "N_WOOD\020\020\022\022\n\016GOLD_METEORITE\020\021\022\022\n\016TAU_CETI"
  "_GEODE\020\022\022\024\n\020CENTAURIAN_STEEL\020\023\022\023\n\017ERIDAN"
  "I_FEATHER\020\024\022\017\n\013DRONE_PARTS\020#\022\024\n\020CELESTIA"
  "L_BRONZE\020)\022\020\n\014LALANDE_HIDE\020*\022\022\n\016SOLAR_TI"
  "TANIUM\020+\022\032\n\026TACHYON_STONE_FRAGMENT\020\002\022\034\n\030"
  "DILITHIUM_STONE_FRAGMENT\020,\022\030\n\024SHELL_STON"
  "E_FRAGMENT\020-\022\030\n\024LUNAR_STONE_FRAGMENT\020.\022\027"
  "\n\023SOUL_STONE_FRAGMENT\020/\022\033\n\027PROPHECY_STON"
  "E_FRAGMENT\0200\022\032\n\026QUANTUM_STONE_FRAGMENT\0201"
  "\022\030\n\024TERRA_STONE_FRAGMENT\0202\022\027\n\023LIFE_STONE"
  "_FRAGMENT\0203\022\032\n\026CLARITY_STONE_FRAGMENT\0204\022"
  "\014\n\007UNKNOWN\020\220N\"H\n\005Level\022\014\n\010INFERIOR\020\000\022\n\n\006"
  "LESSER\020\001\022\n\n\006NORMAL\020\002\022\013\n\007GREATER\020\003\022\014\n\010SUP"
  "ERIOR\020\004\"7\n\006Rarity\022\n\n\006COMMON\020\000\022\010\n\004RARE\020\001\022"
  "\010\n\004EPIC\020\002\022\r\n\tLEGENDARY\020\003\"E\n\004Type\022\014\n\010ARTI"
  "FACT\020\000\022\t\n\005STONE\020\001\022\016\n\nINGREDIENT\020\002\022\024\n\020STO"
  "NE_INGREDIENT\020\003\"T\n\020CompleteArtifact\022\036\n\004s"
  "pec\030\001 \001(\0132\020.ei.ArtifactSpec\022 \n\006stones\030\002 "
  "\003(\0132\020.ei.ArtifactSpec\"u\n\025ArtifactInvento"
  "ryItem\022\017\n\007item_id\030\001 \001(\004\022&\n\010artifact\030\002 \001("
  "\0132\024.ei.CompleteArtifact\022\020\n\010quantity\030\003 \001("
  "\001\022\021\n\tserver_id\030\004 \001(\t\"2\n\rInventorySlot\022\020\n"
  "\010occupied\030\001 \001(\010\022\017\n\007item_id\030\002 \001(\r\"\\\n\035Arti"
  "factsConfigurationRequest\022#\n\005rinfo\030\002 \001(\013"
  "2\024.ei.BasicRequestInfo\022\026\n\016client_version"
  "\030\001 \001(\r\"\377\007\n\036ArtifactsConfigurationRespons"
  "e\022P\n\022mission_parameters\030\001 \003(\01324.ei.Artif"
  "actsConfigurationResponse.MissionParamet"
  "ers\022R\n\023artifact_parameters\030\002 \003(\01325.ei.Ar"
  "tifactsConfigurationResponse.ArtifactPar"
  "ameters\022R\n\024crafting_level_infos\030\003 \003(\01324."
  "ei.ArtifactsConfigurationResponse.Crafti"
  "ngLevelInfo\032\250\003\n\021MissionParameters\022\'\n\004shi"
  "p\030\001 \001(\0162\031.ei.MissionInfo.Spaceship\022P\n\tdu"
  "rations\030\003 \003(\0132=.ei.ArtifactsConfiguratio"
  "nResponse.MissionParameters.Duration\022\"\n\032"
  "level_mission_requirements\030\004 \003(\r\022\033\n\023capa"
  "city_DEPRECATED\030\002 \001(\r\032\326\001\n\010Duration\0223\n\rdu"
  "ration_type\030\001 \001(\0162\034.ei.MissionInfo.Durat"
  "ionType\022\017\n\007seconds\030\002 \001(\001\022\017\n\007quality\030\003 \001("
  "\002\022\023\n\013min_quality\030\004 \001(\002\022\023\n\013max_quality\030\005 "
  "\001(\002\022\020\n\010capacity\030\006 \001(\r\022\033\n\023level_capacity_"
  "bump\030\007 \001(\r\022\032\n\022level_quality_bump\030\010 \001(\002\032\370"
  "\001\n\022ArtifactParameters\022\036\n\004spec\030\001 \001(\0132\020.ei"
  ".ArtifactSpec\022\024\n\014base_quality\030\002 \001(\001\022\027\n\017o"
  "dds_multiplier\030\004 \001(\001\022\r\n\005value\030\003 \001(\001\022\026\n\016c"
  "rafting_price\030\005 \001(\001\022\032\n\022crafting_price_lo"
  "w\030\006 \001(\001\022\035\n\025crafting_price_domain\030\007 \001(\r\022\034"
  "\n\024crafting_price_curve\030\010 \001(\001\022\023\n\013crafting"
  "_xp\030\t \001(\004\032=\n\021CraftingLevelInfo\022\023\n\013xp_req"
  "uired\030\001 \001(\001\022\023\n\013rarity_mult\030\002 \001(\002\"\256\001\n\016Mis"
  "sionRequest\022#\n\005rinfo\030\004 \001(\0132\024.ei.BasicReq"
  "uestInfo\022\026\n\016client_version\030\001 \001(\r\022\022\n\nei_u"
  "ser_id\030\003 \001(\t\022\035\n\004info\030\002 \001(\0132\017.ei.MissionI"
  "nfo\022,\n\013client_info\030\005 \001(\0132\027.ei.ArtifactsC"
  "lientInfo\"A\n\017MissionResponse\022\017\n\007success\030"
  "\001 \001(\010\022\035\n\004info\030\002 \001(\0132\017.ei.MissionInfo\"\214\002\n"
  "\027CompleteMissionResponse\022\017\n\007success\030\001 \001("
  "\010\022\035\n\004info\030\002 \001(\0132\017.ei.MissionInfo\022A\n\tarti"
  "facts\030\003 \003(\0132..ei.CompleteMissionResponse"
  ".SecureArtifactSpec\022!\n\rother_rewards\030\004 \003"
  "(\0132\n.ei.Reward\022\022\n\nei_user_id\030\005 \001(\t\032G\n\022Se"
  "cureArtifactSpec\022\036\n\004spec\030\001 \001(\0132\020.ei.Arti"
  "factSpec\022\021\n\tserver_id\030\002 \001(\t\"\344\001\n%CollectC"
  "ontractArtifactRewardsRequest\022#\n\005rinfo\030\001"
  " \001(\0132\024.ei.BasicRequestInfo\022\033\n\023contract_i"
  "dentifier\030\002 \001(\t\022\016\n\006league\030\005 \001(\r\022\'\n\005grade"
  "\030\006 \001(\0162\030.ei.Contract.PlayerGrade\022\022\n\ngoal"
  "_index\030\003 \001(\r\022,\n\tbest_ship\030\004 \001(\0162\031.ei.Mis"
  "sionInfo.Spaceship\"\366\001\n\024CraftArtifactRequ"
  "est\022#\n\005rinfo\030\005 \001(\0132\024.ei.BasicRequestInfo"
  "\022\022\n\nei_user_id\030\001 \001(\t\022\036\n\004spec\030\002 \001(\0132\020.ei."
  "ArtifactSpec\022\017\n\007item_id\030\003 \001(\004\022\027\n\017gold_pr"
  "ice_paid\030\006 \001(\001\022\026\n\016crafting_count\030\007 \001(\r\022\023"
  "\n\013crafting_xp\030\010 \001(\001\022.\n\013ingredients\030\004 \003(\013"
  "2\031.ei.ArtifactInventoryItem\"\211\001\n\025CraftArt"
  "ifactResponse\022\017\n\007item_id\030\001 \001(\004\022\022\n\nei_use"
  "r_id\030\005 \001(\t\0228\n\017rarity_achieved\030\002 \001(\0162\027.ei"
  ".ArtifactSpec.Rarity:\006COMMON\022\021\n\tserver_i"
  "d\030\003 \001(\t\"\365\001\n\026ConsumeArtifactRequest\022#\n\005ri"
  "nfo\030\004 \001(\0132\024.ei.BasicRequestInfo\022\022\n\nei_us"
  "er_id\030\003 \001(\t\022\036\n\004spec\030\001 \001(\0132\020.ei.ArtifactS"
  "pec\022\032\n\022artifact_server_id\030\005 \001(\t\022\030\n\020origi"
  "nal_item_id\030\002 \001(\004\022\035\n\025additional_server_i"
  "ds\030\007 \003(\t\022\033\n\023additional_item_ids\030\010 \003(\004\022\020\n"
  "\010quantity\030\006 \001(\r\"\276\001\n\027ConsumeArtifactRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\030\n\020original_item_id"
  "\030\002 \001(\004\022\033\n\023additional_item_ids\030\006 \003(\004\022$\n\nb"
  "yproducts\030\003 \003(\0132\020.ei.ArtifactSpec\022!\n\roth"
  "er_rewards\030\004 \003(\0132\n.ei.Reward\022\022\n\nei_user_"
  "id\030\005 \001(\t\"}\n\034AuthenticateArtifactResponse"
  "\022\017\n\007success\030\001 \001(\010\022\030\n\020original_item_id\030\002 "
  "\001(\004\022\016\n\006demote\030\003 \001(\010\022\016\n\006delete\030\004 \001(\010\022\022\n\ne"
  "i_user_id\030\005 \001(\t\"\241\001\n\022SetArtifactRequest\022#"
  "\n\005rinfo\030\001 \001(\0132\024.ei.BasicRequestInfo\022+\n\010a"
  "rtifact\030\002 \001(\0132\031.ei.ArtifactInventoryItem"
  "\022 \n\006stones\030\003 \003(\0132\020.ei.ArtifactSpec\022\027\n\017go"
  "ld_price_paid\030\004 \001(\001\"T\n\023SetArtifactRespon"
  "se\022\017\n\007success\030\001 \001(\010\022\030\n\020original_item_id\030"
  "\002 \001(\004\022\022\n\nei_user_id\030\005 \001(\t\"\314\007\n\013ArtifactsD"
  "B\0222\n\017inventory_items\030\001 \003(\0132\031.ei.Artifact"
  "InventoryItem\022\025\n\ritem_sequence\030\002 \001(\004\022*\n\017"
  "inventory_slots\030\003 \003(\0132\021.ei.InventorySlot"
  "\022G\n\033active_artifacts_DEPRECATED\030\007 \003(\0132\"."
  "ei.ArtifactsDB.ActiveArtifactSlot\022\?\n\024act"
  "ive_artifact_sets\030\013 \003(\0132!.ei.ArtifactsDB"
  ".ActiveArtifactSet\022>\n\023saved_artifact_set"
  "s\030\r \003(\0132!.ei.ArtifactsDB.ActiveArtifactS"
  "et\022:\n\017artifact_status\030\014 \003(\0132!.ei.Artifac"
  "tsDB.CraftableArtifact\022&\n\rmission_infos\030"
  "\004 \003(\0132\017.ei.MissionInfo\022(\n\017mission_archiv"
  "e\030\005 \003(\0132\017.ei.MissionInfo\0229\n\037discovered_a"
  "rtifacts_DEPRECATED\030\010 \003(\0132\020.ei.ArtifactS"
  "pec\022I\n\036craftable_artifacts_DEPRECATED\030\t "
  "\003(\0132!.ei.ArtifactsDB.CraftableArtifact\022E"
  "\n\032crafting_counts_DEPRECATED\030\n \003(\0132!.ei."
  "ArtifactsDB.CraftableArtifact\0327\n\022ActiveA"
  "rtifactSlot\022\020\n\010occupied\030\001 \001(\010\022\017\n\007item_id"
  "\030\002 \001(\004\032S\n\021ActiveArtifactSet\0221\n\005slots\030\001 \003"
  "(\0132\".ei.ArtifactsDB.ActiveArtifactSlot\022\013"
  "\n\003uid\030\002 \001(\r\032\222\001\n\021CraftableArtifact\022\036\n\004spe"
  "c\030\001 \001(\0132\020.ei.ArtifactSpec\022\022\n\ndiscovered\030"
  "\006 \001(\010\022\021\n\tcraftable\030\004 \001(\010\022\031\n\021recipe_disco"
  "vered\030\005 \001(\010\022\014\n\004seen\030\002 \001(\010\022\r\n\005count\030\003 \001(\r"
  "\"\202\001\n\024AuthenticatedMessage\022\017\n\007message\030\001 \001"
  "(\014\022\017\n\007version\030\003 \001(\r\022\014\n\004code\030\002 \001(\t\022\022\n\ncom"
  "pressed\030\004 \001(\010\022\025\n\roriginal_size\030\005 \001(\r\022\017\n\007"
  "user_id\030\006 \001(\t\"f\n\031LogCompleteMissionPaylo"
  "ad\022\037\n\003req\030\001 \001(\0132\022.ei.MissionRequest\022(\n\003r"
  "es\030\002 \001(\0132\033.ei.CompleteMissionResponse\"h\n"
  "\027LogCraftArtifactPayload\022%\n\003req\030\001 \001(\0132\030."
  "ei.CraftArtifactRequest\022&\n\003res\030\002 \001(\0132\031.e"
  "i.CraftArtifactResponse\"n\n\031LogConsumeArt"
  "ifactPayload\022\'\n\003req\030\001 \001(\0132\032.ei.ConsumeAr"
  "tifactRequest\022(\n\003res\030\002 \001(\0132\033.ei.ConsumeA"
  "rtifactResponse\"b\n\025LogSetArtifactPayload"
  "\022#\n\003req\030\001 \001(\0132\026.ei.SetArtifactRequest\022$\n"
  "\003res\030\002 \001(\0132\027.ei.SetArtifactResponse\"@\n\026A"
  "ccountTransferPayload\022\017\n\007from_id\030\001 \001(\t\022\025"
  "\n\rto_ei_user_id\030\002 \001(\t\"\335\001\n\022SaveBackupResp"
  "onse\022\017\n\007success\030\001 \001(\010\022\022\n\nerror_code\030\002 \001("
  "\r\022\017\n\007message\030\003 \001(\t\022#\n\017existing_backup\030\004 "
  "\001(\0132\n.ei.Backup\"l\n\nErrorCodes\022\014\n\010NO_ERRO"
  "R\020\000\022\022\n\016USER_NOT_FOUND\020\001\022\027\n\023COULD_NOT_OVE"
  "RWRITE\020\002\022\022\n\016BACKUP_OFFERED\020\003\022\017\n\013BAD_USER"
  "_ID\020\004\"K\n\023CleanAccountRequest\022\032\n\022ei_user_"
  "id_to_keep\030\001 \001(\t\022\030\n\020game_services_id\030\002 \001"
  "(\t\"&\n\020ReturnEDTPayload\022\022\n\nei_user_id\030\001 \001"
  "(\t\"\201\001\n\007DLCItem\022\014\n\004name\030\001 \001(\t\022\021\n\tdirector"
  "y\030\002 \001(\t\022\013\n\003ext\030\003 \001(\t\022\022\n\ncompressed\030\006 \001(\010"
  "\022\025\n\roriginal_size\030\007 \001(\004\022\013\n\003url\030\004 \001(\t\022\020\n\010"
  "checksum\030\005 \001(\t\"\325\022\n\tShellSpec\022\022\n\nidentifi"
  "er\030\001 \001(\t\022/\n\rprimary_piece\030\014 \001(\0132\030.ei.She"
  "llSpec.ShellPiece\022(\n\006pieces\030\013 \003(\0132\030.ei.S"
  "hellSpec.ShellPiece\022\037\n\nalt_assets\030\022 \003(\0132"
  "\013.ei.DLCItem\022\014\n\004name\030\003 \001(\t\022\026\n\016set_identi"
  "fier\030\r \001(\t\022\031\n\021modified_geometry\030\023 \001(\010\022\r\n"
  "\005price\030\004 \001(\r\022\024\n\014required_eop\030\005 \001(\r\022\032\n\022re"
  "quired_soul_eggs\030\006 \001(\001\022\035\n\025required_paren"
  "t_shell\030\024 \001(\t\022\016\n\006is_new\030\016 \001(\010\022\017\n\007expires"
  "\030\017 \001(\010\022\037\n\027seconds_until_available\030\021 \001(\001\022"
  "\031\n\021seconds_remaining\030\020 \001(\001\022\022\n\npopularity"
  "\030\025 \001(\004\022\032\n\022default_appearance\030\010 \001(\010\032S\n\nSh"
  "ellPiece\022+\n\nasset_type\030\001 \001(\0162\027.ei.ShellS"
  "pec.AssetType\022\030\n\003dlc\030\002 \001(\0132\013.ei.DLCItem\""
  "\264\016\n\tAssetType\022\010\n\004COOP\020\001\022\t\n\005SHACK\020\002\022\017\n\013SU"
  "PER_SHACK\020\003\022\017\n\013SHORT_HOUSE\020\004\022\020\n\014THE_STAN"
  "DARD\020\005\022\016\n\nLONG_HOUSE\020\006\022\021\n\rDOUBLE_DECKER\020"
  "\007\022\r\n\tWAREHOUSE\020\010\022\n\n\006CENTER\020\t\022\n\n\006BUNKER\020\n"
  "\022\n\n\006EGGKEA\020\013\022\n\n\006HAB_1K\020\014\022\n\n\006HANGAR\020\r\022\t\n\005"
  "TOWER\020\016\022\013\n\007HAB_10K\020\017\022\014\n\010EGGTOPIA\020\020\022\014\n\010MO"
  "NOLITH\020\021\022\021\n\rPLANET_PORTAL\020\022\022\024\n\020CHICKEN_U"
  "NIVERSE\020\023\022\020\n\014SILO_0_SMALL\0202\022\016\n\nSILO_0_ME"
  "D\0203\022\020\n\014SILO_0_LARGE\0204\022\020\n\014SILO_1_SMALL\0205\022"
  "\016\n\nSILO_1_MED\0206\022\020\n\014SILO_1_LARGE\0207\022\014\n\010SIL"
  "O_ALL\020;\022\013\n\007MAILBOX\020F\022\017\n\013TROPHY_CASE\020G\022\n\n"
  "\006GROUND\020H\022\r\n\tHARDSCAPE\020I\022\r\n\tHYPERLOOP\020J\022"
  "\013\n\007DEPOT_1\020d\022\013\n\007DEPOT_2\020e\022\013\n\007DEPOT_3\020f\022\013"
  "\n\007DEPOT_4\020g\022\013\n\007DEPOT_5\020h\022\013\n\007DEPOT_6\020i\022\013\n"
  "\007DEPOT_7\020j\022\t\n\005LAB_1\020n\022\t\n\005LAB_2\020o\022\t\n\005LAB_"
  "3\020p\022\t\n\005LAB_4\020q\022\t\n\005LAB_5\020r\022\t\n\005LAB_6\020s\022\023\n\017"
  "HATCHERY_EDIBLE\020x\022\026\n\022HATCHERY_SUPERFOOD\020"
  "y\022\024\n\020HATCHERY_MEDICAL\020z\022\030\n\024HATCHERY_ROCK"
  "ET_FUEL\020{\022\032\n\026HATCHERY_SUPERMATERIAL\020|\022\023\n"
  "\017HATCHERY_FUSION\020}\022\024\n\020HATCHERY_QUANTUM\020~"
  "\022\030\n\024HATCHERY_IMMORTALITY\020\177\022\025\n\020HATCHERY_T"
  "ACHYON\020\200\001\022\026\n\021HATCHERY_GRAVITON\020\201\001\022\027\n\022HAT"
  "CHERY_DILITHIUM\020\202\001\022\025\n\020HATCHERY_PRODIGY\020\203"
  "\001\022\027\n\022HATCHERY_TERRAFORM\020\204\001\022\030\n\023HATCHERY_A"
  "NTIMATTER\020\205\001\022\031\n\024HATCHERY_DARK_MATTER\020\206\001\022"
  "\020\n\013HATCHERY_AI\020\207\001\022\024\n\017HATCHERY_NEBULA\020\210\001\022"
  "\026\n\021HATCHERY_UNIVERSE\020\211\001\022\033\n\026HATCHERY_ENLI"
  "GHTENMENT\020\212\001\022\027\n\022HATCHERY_CHOCOLATE\020\213\001\022\024\n"
  "\017HATCHERY_EASTER\020\214\001\022\032\n\025HATCHERY_WATERBAL"
  "LOON\020\215\001\022\026\n\021HATCHERY_FIREWORK\020\216\001\022\025\n\020HATCH"
  "ERY_PUMPKIN\020\217\001\022\n\n\005HOA_1\020\252\001\022\n\n\005HOA_2\020\253\001\022\n"
  "\n\005HOA_3\020\254\001\022\026\n\021MISSION_CONTROL_1\020\264\001\022\026\n\021MI"
  "SSION_CONTROL_2\020\265\001\022\026\n\021MISSION_CONTROL_3\020"
  "\266\001\022\020\n\013FUEL_TANK_1\020\310\001\022\020\n\013FUEL_TANK_2\020\311\001\022\020"
  "\n\013FUEL_TANK_3\020\312\001\022\020\n\013FUEL_TANK_4\020\313\001\022\032\n\025HA"
  "TCHERY_GRAVITON_TOP\020\364\003\022\033\n\026HATCHERY_NEBUL"
  "A_MIDDLE\020\365\003\022\030\n\023HATCHERY_NEBULA_TOP\020\366\003\022 \n"
  "\033HATCHERY_DARK_MATTER_RING_1\020\371\003\022 \n\033HATCH"
  "ERY_DARK_MATTER_RING_2\020\372\003\022 \n\033HATCHERY_DA"
  "RK_MATTER_RING_3\020\373\003\022\026\n\021HATCHERY_AI_TOP_1"
  "\020\376\003\022\026\n\021HATCHERY_AI_TOP_2\020\377\003\022\026\n\021HATCHERY_"
  "AI_TOP_3\020\200\004\022\026\n\021HATCHERY_AI_TOP_4\020\201\004\022\034\n\027H"
  "ATCHERY_UNIVERSE_PROBE\020\203\004\022\033\n\026HATCHERY_UN"
  "IVERSE_BOLT\020\204\004\022\037\n\032HATCHERY_ENLIGHTENMENT"
  "_ORB\020\210\004\022\024\n\017HYPERLOOP_TRACK\020\272\004\022\021\n\014MAILBOX"
  "_FULL\020\330\004\022\014\n\007CHICKEN\020\350\007\022\010\n\003HAT\020\362\007\022\014\n\007UNKN"
  "OWN\020\217N\"\252\005\n\014ShellSetSpec\022\022\n\nidentifier\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005price\030\003 \001(\r\022 \n\025pric"
  "e_mult_DEPRECATED\030\010 \001(\001:\0011\022\020\n\010discount\030\021"
  " \001(\001\022\024\n\014required_eop\030\004 \001(\r\022\032\n\022required_s"
  "oul_eggs\030\005 \001(\001\022\033\n\023required_parent_set\030\024 "
  "\001(\t\022\016\n\006is_new\030\t \001(\010\022\017\n\007expires\030\n \001(\010\022\037\n\027"
  "seconds_until_available\030\022 \001(\001\022\031\n\021seconds"
  "_remaining\030\013 \001(\001\022\022\n\npopularity\030\025 \001(\004\022\021\n\t"
  "decorator\030\016 \001(\010\022\031\n\021modified_geometry\030\r \001"
  "(\010\022\023\n\013element_set\030\007 \001(\010\022\026\n\016hex_base_colo"
  "r\030\020 \001(\t\0222\n\nvariations\030\017 \003(\0132\036.ei.ShellSe"
  "tSpec.VariationSpec\022\031\n\004icon\030\023 \001(\0132\013.ei.D"
  "LCItem\022\032\n\022default_appearance\030\006 \001(\010\022\031\n\021cu"
  "stom_appearance\030\014 \001(\010\032\223\001\n\rVariationSpec\022"
  "\022\n\nidentifier\030\001 \001(\t\022\021\n\thex_color\030\002 \001(\t\022\r"
  "\n\005price\030\003 \001(\r\022\025\n\rsort_priority\030\006 \001(\005\022\032\n\022"
  "default_appearance\030\004 \001(\010\022\031\n\021custom_appea"
  "rance\030\005 \001(\010\"\325\005\n\017ShellObjectSpec\022\022\n\nident"
  "ifier\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022+\n\nasset_type\030"
  "\003 \001(\0162\027.ei.ShellSpec.AssetType\022\024\n\014object"
  "_class\030\016 \001(\t\022\023\n\013icon_colors\030\017 \003(\t\022\r\n\005pri"
  "ce\030\004 \001(\r\022\024\n\014required_eop\030\005 \001(\r\022\032\n\022requir"
  "ed_soul_eggs\030\006 \001(\001\022\016\n\006is_new\030\n \001(\010\022\017\n\007ex"
  "pires\030\013 \001(\010\022\037\n\027seconds_until_available\030\022"
  " \001(\001\022\031\n\021seconds_remaining\030\014 \001(\001\022\022\n\npopul"
  "arity\030\023 \001(\004\022\020\n\010metadata\030\007 \003(\001\022\017\n\007no_hats"
  "\030\r \001(\010\022\?\n\021chicken_animation\030\020 \001(\0162$.ei.S"
  "hellObjectSpec.ChickenAnimation\022\025\n\rsort_"
  "priority\030\021 \001(\005\022,\n\006pieces\030\010 \003(\0132\034.ei.Shel"
  "lObjectSpec.LODPiece\022\032\n\022default_appearan"
  "ce\030\t \001(\010\0321\n\010LODPiece\022\030\n\003dlc\030\001 \001(\0132\013.ei.D"
  "LCItem\022\013\n\003lod\030\002 \001(\r\"\235\001\n\020ChickenAnimation"
  "\022\020\n\014STANDARD_RUN\020\000\022\n\n\006SLOWMO\020\007\022\n\n\006WOBBLE"
  "\020\001\022\017\n\013WOBBLE_LEAN\020\005\022\n\n\006SMOOTH\020\002\022\017\n\013SMOOT"
  "H_LEAN\020\006\022\t\n\005HOVER\020\003\022\023\n\017SIDEWAYS_SMOOTH\020\004"
  "\022\021\n\rSIDEWAYS_LEAN\020\010\"\222\001\n\016ShellGroupSpec\022\022"
  "\n\nidentifier\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022+\n\nasse"
  "t_type\030\005 \001(\0162\027.ei.ShellSpec.AssetType\022\022\n"
  "\nmember_ids\030\003 \003(\t\022\035\n\025price_mult_DEPRECAT"
  "ED\030\004 \001(\001\"\351\001\n\nDLCCatalog\022\032\n\005items\030\001 \003(\0132\013"
  ".ei.DLCItem\022\035\n\006shells\030\002 \003(\0132\r.ei.ShellSp"
  "ec\022$\n\nshell_sets\030\003 \003(\0132\020.ei.ShellSetSpec"
  "\022$\n\ndecorators\030\006 \003(\0132\020.ei.ShellSetSpec\022*"
  "\n\rshell_objects\030\004 \003(\0132\023.ei.ShellObjectSp"
  "ec\022(\n\014shell_groups\030\005 \003(\0132\022.ei.ShellGroup"
  "Spec\"\354\021\n\007ShellDB\0220\n\017shell_inventory\030\001 \003("
  "\0132\027.ei.ShellDB.ShellStatus\022\?\n\027shell_elem"
  "ent_inventory\030\005 \003(\0132\036.ei.ShellDB.ShellEl"
  "ementStatus\022F\n\031shell_variation_inventory"
  "\030\010 \003(\0132#.ei.ShellDB.ShellSetVariationSta"
  "tus\0224\n\023shell_set_inventory\030\002 \003(\0132\027.ei.Sh"
  "ellDB.ShellStatus\0227\n\026shell_object_invent"
  "ory\030\004 \003(\0132\027.ei.ShellDB.ShellStatus\0223\n\014fa"
  "rm_configs\030\003 \003(\0132\035.ei.ShellDB.FarmConfig"
  "uration\0229\n\rsaved_configs\030\t \003(\0132\".ei.Shel"
  "lDB.SavedFarmConfiguration\022\035\n\025new_shells"
  "_downloaded\030\006 \003(\t\022\027\n\017new_shells_seen\030\007 \003"
  "(\t\022\"\n\032lighting_controls_unlocked\030\n \001(\010\0320"
  "\n\013ShellStatus\022\022\n\nidentifier\030\001 \001(\t\022\r\n\005own"
  "ed\030\002 \001(\010\032V\n\022ShellElementStatus\022(\n\007elemen"
  "t\030\001 \001(\0162\027.ei.ShellDB.FarmElement\022\026\n\016set_"
  "identifier\030\002 \001(\t\032K\n\027ShellSetVariationSta"
  "tus\022\026\n\016set_identifier\030\001 \001(\t\022\030\n\020owned_var"
  "iations\030\002 \003(\t\032\245\003\n\021FarmConfiguration\0220\n\017l"
  "ocked_elements\030\n \003(\0162\027.ei.ShellDB.FarmEl"
  "ement\0225\n\rshell_configs\030\001 \003(\0132\036.ei.ShellD"
  "B.ShellConfiguration\022<\n\021shell_set_config"
  "s\030\002 \003(\0132!.ei.ShellDB.ShellSetConfigurati"
  "on\022#\n\033configure_chickens_by_group\030\007 \001(\010\022"
  ":\n\rgroup_configs\030\010 \003(\0132#.ei.ShellDB.Shel"
  "lGroupConfiguration\0222\n\017chicken_configs\030\t"
  " \003(\0132\031.ei.ShellDB.ChickenConfig\022\037\n\027light"
  "ing_config_enabled\030\013 \001(\010\0223\n\017lighting_con"
  "fig\030\014 \001(\0132\032.ei.ShellDB.LightingConfig\032\251\001"
  "\n\026SavedFarmConfiguration\022\n\n\002id\030\001 \001(\t\022-\n\006"
  "config\030\002 \001(\0132\035.ei.ShellDB.FarmConfigurat"
  "ion\022\030\n\020client_save_time\030\003 \001(\001\022\021\n\tserver_"
  "id\030\004 \001(\t\022\024\n\014display_name\030\005 \001(\t\022\021\n\tpurcha"
  "sed\030\006 \001(\010\032j\n\022ShellConfiguration\022+\n\nasset"
  "_type\030\001 \001(\0162\027.ei.ShellSpec.AssetType\022\r\n\005"
  "index\030\002 \001(\r\022\030\n\020shell_identifier\030\003 \001(\t\032\252\001"
  "\n\025ShellSetConfiguration\022(\n\007element\030\001 \001(\016"
  "2\027.ei.ShellDB.FarmElement\022\r\n\005index\030\002 \001(\r"
  "\022\034\n\024shell_set_identifier\030\003 \001(\t\022\034\n\024variat"
  "ion_identifier\030\004 \001(\t\022\034\n\024decorator_identi"
  "fier\030\005 \001(\t\032`\n\027ShellGroupConfiguration\022+\n"
  "\nasset_type\030\001 \001(\0162\027.ei.ShellSpec.AssetTy"
  "pe\022\030\n\020group_identifier\030\002 \001(\t\032C\n\rChickenC"
  "onfig\022\032\n\022chicken_identifier\030\001 \001(\t\022\026\n\016hat"
  "_identifier\030\002 \001(\t\032\234\002\n\016LightingConfig\022\036\n\t"
  "light_dir\030\001 \001(\0132\013.ei.Vector3\022\'\n\022light_di"
  "rect_color\030\002 \001(\0132\013.ei.Vector4\022\036\n\026light_d"
  "irect_intensity\030\003 \001(\002\022(\n\023light_ambient_c"
  "olor\030\004 \001(\0132\013.ei.Vector4\022\037\n\027light_ambient"
  "_intensity\030\005 \001(\002\022\036\n\tfog_color\030\006 \001(\0132\013.ei"
  ".Vector4\022\020\n\010fog_near\030\007 \001(\002\022\017\n\007fog_far\030\010 "
  "\001(\002\022\023\n\013fog_density\030\t \001(\002\"\340\001\n\013FarmElement"
  "\022\r\n\tHEN_HOUSE\020\001\022\010\n\004SILO\020\002\022\013\n\007MAILBOX\020\003\022\017"
  "\n\013TROPHY_CASE\020\004\022\n\n\006GROUND\020\005\022\r\n\tHARDSCAPE"
  "\020\006\022\r\n\tHYPERLOOP\020\007\022\t\n\005DEPOT\020\010\022\007\n\003LAB\020\t\022\014\n"
  "\010HATCHERY\020\n\022\007\n\003HOA\020\013\022\023\n\017MISSION_CONTROL\020"
  "\014\022\r\n\tFUEL_TANK\020\r\022\013\n\007CHICKEN\020\016\022\007\n\003HAT\020\017\022\013"
  "\n\007UNKNOWN\020c\"\241\001\n\024ShellPopularityStats\022,\n\004"
  "data\030\001 \003(\0132\036.ei.ShellPopularityStats.Ent"
  "ry\032[\n\005Entry\022\n\n\002id\030\001 \001(\t\022(\n\007element\030\002 \001(\016"
  "2\027.ei.ShellDB.FarmElement\022\r\n\005spent\030\003 \001(\004"
  "\022\r\n\005count\030\004 \001(\004\"\234\002\n\017ShellsActionLog\022#\n\005r"
  "info\030\010 \001(\0132\024.ei.BasicRequestInfo\022\017\n\007user"
  "_id\030\001 \001(\t\022\016\n\006action\030\002 \001(\t\022\016\n\006sub_id\030\003 \001("
  "\t\022-\n\014farm_element\030\t \001(\0162\027.ei.ShellDB.Far"
  "mElement\022\014\n\004cost\030\004 \001(\r\022\023\n\013approx_time\030\005 "
  "\001(\001\022\017\n\007version\030\006 \001(\t\022\022\n\nfarm_index\030\007 \001(\005"
  "\022\021\n\tsoul_eggs\030\n \001(\001\022\025\n\rtickets_spent\030\013 \001"
  "(\004\022\022\n\ngold_spent\030\014 \001(\004\"\261\001\n\032SubmitShellSh"
  "owcaseRequest\022#\n\005rinfo\030\004 \001(\0132\024.ei.BasicR"
  "equestInfo\022\020\n\010local_id\030\001 \001(\t\022\017\n\007user_id\030"
  "\002 \001(\t\022\027\n\017public_username\030\005 \001(\010\0222\n\013farm_c"
  "onfig\030\003 \001(\0132\035.ei.ShellDB.FarmConfigurati"
  "on\"\227\001\n\rShellShowcase\022)\n\003top\030\001 \003(\0132\034.ei.S"
  "hellShowcaseListingInfo\022.\n\010featured\030\002 \003("
  "\0132\034.ei.ShellShowcaseListingInfo\022+\n\005fresh"
  "\030\003 \003(\0132\034.ei.ShellShowcaseListingInfo\"\223\003\n"
  "\030ShellShowcaseListingInfo\022\n\n\002id\030\001 \001(\t\022\020\n"
  "\010local_id\030\014 \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013descrip"
  "tion\030\003 \001(\t\022\024\n\014creator_name\030\016 \001(\t\0223\n\006stat"
  "us\030\013 \001(\0162#.ei.ShellShowcaseListingInfo.S"
  "tatus\0222\n\013farm_config\030\004 \001(\0132\035.ei.ShellDB."
  "FarmConfiguration\022\r\n\005sales\030\005 \001(\r\022\r\n\005gros"
  "s\030\006 \001(\004\022\r\n\005views\030\007 \001(\004\022\016\n\006equips\030\r \001(\004\022\r"
  "\n\005likes\030\010 \001(\r\022\020\n\010dislikes\030\t \001(\r\022\021\n\tshare"
  "_url\030\n \001(\t\"F\n\006Status\022\010\n\004NONE\020\000\022\r\n\tSUBMIT"
  "TED\020\001\022\010\n\004LIVE\020\002\022\014\n\010FEATURED\020\003\022\013\n\007INVALID"
  "\020\004\"g\n#ShowcaseRoyaltyDeliveryConfirmatio"
  "n\022#\n\005rinfo\030\003 \001(\0132\024.ei.BasicRequestInfo\022\013"
  "\n\003ids\030\001 \003(\t\022\016\n\006amount\030\002 \001(\r\"I\n\027ShellShow"
  "caseListingSet\022.\n\010listings\030\001 \003(\0132\034.ei.Sh"
  "ellShowcaseListingInfo\"^\n\021ShellsActionBa"
  "tch\022#\n\005rinfo\030\001 \001(\0132\024.ei.BasicRequestInfo"
  "\022$\n\007actions\030\002 \003(\0132\023.ei.ShellsActionLog\"\321"
  "\t\n\030UserVerificationAnalysis\022;\n\016overall_s"
  "tatus\030\001 \001(\0162#.ei.UserVerificationAnalysi"
  "s.Status\022\022\n\nstart_time\030\002 \001(\001\022\027\n\017completi"
  "on_time\030\003 \001(\001\022\025\n\rnum_prestiges\030\016 \001(\001\022\021\n\t"
  "soul_eggs\030\017 \001(\001\022\030\n\020eggs_of_prophecy\030\033 \001("
  "\r\0227\n\niap_status\030\022 \001(\0162#.ei.UserVerificat"
  "ionAnalysis.Status\022\033\n\023verified_pro_permi"
  "t\030\004 \001(\010\022\035\n\025verified_piggy_breaks\030\005 \001(\r\022\032"
  "\n\022verified_other_iap\030\006 \001(\r\022\026\n\016unverified"
  "_iap\030\007 \001(\r\022\023\n\013gold_earned\030\r \001(\001\022\031\n\021regul"
  "ar_iap_buyer\030\026 \001(\010\022\033\n\023regular_iap_cheate"
  "r\030\027 \001(\010\022=\n\020artifacts_status\030\023 \001(\0162#.ei.U"
  "serVerificationAnalysis.Status\022\032\n\022missio"
  "ns_completed\030\010 \001(\r\022\033\n\023artifacts_collecte"
  "d\030\t \001(\001\022\032\n\022artifacts_consumed\030\n \001(\001\022\036\n\026a"
  "rtifacts_in_inventory\030\013 \001(\001\022#\n\033rare_arti"
  "facts_in_inventory\030! \001(\004\022 \n\030rare_artifac"
  "ts_on_server\030\" \001(\004\022(\n legendary_artifact"
  "s_in_inventory\030# \001(\004\022%\n\035legendary_artifa"
  "cts_on_server\030$ \001(\004\022\033\n\023gold_spent_crafti"
  "ng\030\025 \001(\001\022\032\n\022excessive_consumes\030\030 \001(\010\022\033\n\023"
  "excessive_inventory\030\031 \001(\010\022\027\n\017excessive_s"
  "pend\030\032 \001(\010\022=\n\020contracts_status\030\024 \001(\0162#.e"
  "i.UserVerificationAnalysis.Status\022\034\n\024num"
  "_coop_memberships\030\014 \001(\r\022\027\n\017valid_contrac"
  "ts\030\020 \001(\r\022\031\n\021invalid_contracts\030\021 \003(\t\022\025\n\re"
  "xcessive_eop\030\034 \001(\010\022#\n\033excessive_invalid_"
  "contracts\030\035 \001(\010\022\020\n\010verified\030\036 \001(\010\022\035\n\025ver"
  "ification_override\030\037 \001(\010\022#\n\033verification"
  "_override_value\030  \001(\010\"3\n\006Status\022\013\n\007UNKNO"
  "WN\020\000\022\016\n\nPROCESSING\020\001\022\014\n\010COMPLETE\020\002\"\365\005\n\024U"
  "serSubscriptionInfo\022:\n\022subscription_leve"
  "l\030\r \001(\0162\036.ei.UserSubscriptionInfo.Level\022"
  "\?\n\027next_subscription_level\030\017 \001(\0162\036.ei.Us"
  "erSubscriptionInfo.Level\022$\n\034lock_next_su"
  "bscription_level\030\022 \001(\010\022\036\n\010platform\030\n \001(\016"
  "2\014.ei.Platform\022\037\n\027original_transaction_i"
  "d\030\001 \001(\t\022\035\n\025linked_transaction_id\030\020 \001(\t\022\024"
  "\n\014acknowledged\030\021 \001(\010\022\030\n\020first_subscribed"
  "\030\002 \001(\001\022\022\n\nperiod_end\030\004 \001(\001\022/\n\006status\030\005 \001"
  "(\0162\037.ei.UserSubscriptionInfo.Status\022\024\n\014s"
  "tore_status\030\016 \001(\t\022\022\n\nauto_renew\030\006 \001(\010\022\017\n"
  "\007sandbox\030\023 \001(\010\022\024\n\014last_updated\030\007 \001(\001\0226\n\007"
  "history\030\t \003(\0132%.ei.UserSubscriptionInfo."
  "HistoryEntry\022\025\n\rpast_user_ids\030\013 \003(\t\032F\n\014H"
  "istoryEntry\022\021\n\ttimestamp\030\001 \001(\001\022\022\n\nmessag"
  "e_id\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"\036\n\005Level\022\014\n\010"
  "STANDARD\020\000\022\007\n\003PRO\020\001\"]\n\006Status\022\013\n\007UNKNOWN"
  "\020\000\022\n\n\006ACTIVE\020\001\022\013\n\007EXPIRED\020\002\022\013\n\007REVOKED\020\003"
  "\022\020\n\014GRACE_PERIOD\020\004\022\016\n\nPAUSE_HOLD\020\005\"\246\001\n\035S"
  "ubscriptionChangeHintRequest\022#\n\005rinfo\030\003 "
  "\001(\0132\024.ei.BasicRequestInfo\022\037\n\027original_tr"
  "ansaction_id\030\001 \001(\t\022\?\n\027next_subscription_"
  "level\030\002 \001(\0162\036.ei.UserSubscriptionInfo.Le"
  "vel\">\n\022CXPEvalRolloutInfo\022\022\n\ncurrent_id\030"
  "\001 \001(\t\022\024\n\014basis_points\030\002 \001(\r*4\n\010Platform\022"
  "\024\n\020UNKNOWN_PLATFORM\020\000\022\007\n\003IOS\020\001\022\t\n\005DROID\020"
  "\002*=\n\020DeviceFormFactor\022\022\n\016UNKNOWN_DEVICE\020"
  "\000\022\t\n\005PHONE\020\001\022\n\n\006TABLET\020\002*k\n\tAdNetwork\022\n\n"
  "\006VUNGLE\020\000\022\016\n\nCHARTBOOST\020\001\022\r\n\tAD_COLONY\020\002"
  "\022\014\n\010HYPER_MX\020\003\022\t\n\005UNITY\020\004\022\014\n\010FACEBOOK\020\005\022"
  "\014\n\010APPLOVIN\020\006*\356\002\n\003Egg\022\n\n\006EDIBLE\020\001\022\r\n\tSUP"
  "ERFOOD\020\002\022\013\n\007MEDICAL\020\003\022\017\n\013ROCKET_FUEL\020\004\022\022"
  "\n\016SUPER_MATERIAL\020\005\022\n\n\006FUSION\020\006\022\013\n\007QUANTU"
  "M\020\007\022\017\n\013IMMORTALITY\020\010\022\013\n\007TACHYON\020\t\022\014\n\010GRA"
  "VITON\020\n\022\r\n\tDILITHIUM\020\013\022\013\n\007PRODIGY\020\014\022\r\n\tT"
  "ERRAFORM\020\r\022\016\n\nANTIMATTER\020\016\022\017\n\013DARK_MATTE"
  "R\020\017\022\006\n\002AI\020\020\022\n\n\006NEBULA\020\021\022\014\n\010UNIVERSE\020\022\022\021\n"
  "\rENLIGHTENMENT\020\023\022\r\n\tCHOCOLATE\020d\022\n\n\006EASTE"
  "R\020e\022\020\n\014WATERBALLOON\020f\022\014\n\010FIREWORK\020g\022\013\n\007P"
  "UMPKIN\020h\022\014\n\007UNKNOWN\020\350\007*-\n\010FarmType\022\t\n\005EM"
  "PTY\020\001\022\010\n\004HOME\020\002\022\014\n\010CONTRACT\020\003*+\n\010GoalTyp"
  "e\022\r\n\tEGGS_LAID\020\001\022\020\n\014UNKNOWN_GOAL\020d*\211\002\n\nR"
  "ewardType\022\010\n\004CASH\020\001\022\010\n\004GOLD\020\002\022\r\n\tSOUL_EG"
  "GS\020\003\022\024\n\020EGGS_OF_PROPHECY\020\004\022\026\n\022EPIC_RESEA"
  "RCH_ITEM\020\005\022\016\n\nPIGGY_FILL\020\006\022\024\n\020PIGGY_MULT"
  "IPLIER\020\007\022\024\n\020PIGGY_LEVEL_BUMP\020\010\022\t\n\005BOOST\020"
  "\t\022\017\n\013BOOST_TOKEN\020\n\022\014\n\010ARTIFACT\020\013\022\021\n\rARTI"
  "FACT_CASE\020\014\022\013\n\007CHICKEN\020\r\022\020\n\014SHELL_SCRIPT"
  "\020\016\022\022\n\016UNKNOWN_REWARD\020d*\315\001\n\nUILocation\022\010\n"
  "\004NONE\020\000\022\010\n\004SHOP\020\001\022\016\n\nBOOST_SHOP\020\002\022\t\n\005PIG"
  "GY\020\003\022\016\n\nPRO_PERMIT\020\004\022\016\n\nULTRA_SHOP\020\n\022\n\n\006"
  "SHELLS\020\005\022\016\n\nSHELL_SETS\020\006\022\023\n\017SHELLS_SHOWC"
  "ASE\020\014\022\014\n\010CHICKENS\020\007\022\020\n\014CHICKEN_HATS\020\013\022\021\n"
  "\rEPIC_RESEARCH\020\010\022\014\n\010SETTINGS\020\t*\323\002\n\010UserT"
  "ype\022\r\n\tALL_USERS\020\000\022\014\n\010EGGED_UP\020\017\022\026\n\022CONT"
  "RACTS_UNLOCKED\020\001\022\026\n\022ARTIFACTS_UNLOCKED\020\003"
  "\022\026\n\022FUEL_TANK_UNLOCKED\020\004\022\025\n\021PRO_PERMIT_A"
  "CTIVE\020\005\022\020\n\014ULTRA_ACTIVE\020\006\022\021\n\rNO_PRO_PERM"
  "IT\020\007\022\014\n\010NO_ULTRA\020\010\022\026\n\022CONTRACTS_INACTIVE"
  "\020\t\022\024\n\020CONTRACTS_ACTIVE\020\n\022\024\n\020PLAYING_CONT"
  "RACT\020\013\022\026\n\022ARTIFACTS_INACTIVE\020\014\022\024\n\020ARTIFA"
  "CTS_ACTIVE\020\r\022\022\n\016PRESTIGE_READY\020\016\022\022\n\016PIGG"
  "Y_HESITANT\020\020*4\n\020LeaderboardScope\022\014\n\010ALL_"
  "TIME\020\000\022\022\n\016CURRENT_SEASON\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ei_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ei_2eproto_sccs[194] = {
  &scc_info_AccountTransferPayload_ei_2eproto.base,
  &scc_info_ActionKeyValuePair_ei_2eproto.base,
  &scc_info_AdAttributionInfo_ei_2eproto.base,
  &scc_info_AdAttributionRawData_ei_2eproto.base,
  &scc_info_AdAttributionRow_ei_2eproto.base,
  &scc_info_AppInfo_ei_2eproto.base,
  &scc_info_ArtifactInventoryItem_ei_2eproto.base,
  &scc_info_ArtifactSpec_ei_2eproto.base,
  &scc_info_ArtifactsClientInfo_ei_2eproto.base,
  &scc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationRequest_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationResponse_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto.base,
  &scc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto.base,
  &scc_info_ArtifactsDB_ei_2eproto.base,
  &scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto.base,
  &scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto.base,
  &scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto.base,
  &scc_info_AuthenticateArtifactResponse_ei_2eproto.base,
  &scc_info_AuthenticatedMessage_ei_2eproto.base,
  &scc_info_AutoJoinCoopRequest_ei_2eproto.base,
  &scc_info_Backup_ei_2eproto.base,
  &scc_info_Backup_AchievementInfo_ei_2eproto.base,
  &scc_info_Backup_ActiveBoost_ei_2eproto.base,
  &scc_info_Backup_Artifacts_ei_2eproto.base,
  &scc_info_Backup_Game_ei_2eproto.base,
  &scc_info_Backup_Misc_ei_2eproto.base,
  &scc_info_Backup_Mission_ei_2eproto.base,
  &scc_info_Backup_MissionInfo_ei_2eproto.base,
  &scc_info_Backup_NewsHeadline_ei_2eproto.base,
  &scc_info_Backup_OwnedBoost_ei_2eproto.base,
  &scc_info_Backup_ResearchItem_ei_2eproto.base,
  &scc_info_Backup_Settings_ei_2eproto.base,
  &scc_info_Backup_Shells_ei_2eproto.base,
  &scc_info_Backup_Simulation_ei_2eproto.base,
  &scc_info_Backup_Stats_ei_2eproto.base,
  &scc_info_Backup_Tutorial_ei_2eproto.base,
  &scc_info_BasicRequestInfo_ei_2eproto.base,
  &scc_info_CXPEvalRolloutInfo_ei_2eproto.base,
  &scc_info_CleanAccountRequest_ei_2eproto.base,
  &scc_info_ClearAllUserDataRequest_ei_2eproto.base,
  &scc_info_CollectContractArtifactRewardsRequest_ei_2eproto.base,
  &scc_info_CompleteArtifact_ei_2eproto.base,
  &scc_info_CompleteMissionResponse_ei_2eproto.base,
  &scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto.base,
  &scc_info_ConfigRequest_ei_2eproto.base,
  &scc_info_ConfigResponse_ei_2eproto.base,
  &scc_info_ConsumeArtifactRequest_ei_2eproto.base,
  &scc_info_ConsumeArtifactResponse_ei_2eproto.base,
  &scc_info_Contract_ei_2eproto.base,
  &scc_info_Contract_Goal_ei_2eproto.base,
  &scc_info_Contract_GoalSet_ei_2eproto.base,
  &scc_info_Contract_GradeSpec_ei_2eproto.base,
  &scc_info_ContractAction_ei_2eproto.base,
  &scc_info_ContractCitation_ei_2eproto.base,
  &scc_info_ContractCoopStatusRequest_ei_2eproto.base,
  &scc_info_ContractCoopStatusResponse_ei_2eproto.base,
  &scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto.base,
  &scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto.base,
  &scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto.base,
  &scc_info_ContractCoopStatusUpdateRequest_ei_2eproto.base,
  &scc_info_ContractCoopStatusUpdateResponse_ei_2eproto.base,
  &scc_info_ContractEvaluation_ei_2eproto.base,
  &scc_info_ContractEvaluationBatch_ei_2eproto.base,
  &scc_info_ContractEvaluationBatch_Pair_ei_2eproto.base,
  &scc_info_ContractPlayerInfo_ei_2eproto.base,
  &scc_info_ContractSimConfig_ei_2eproto.base,
  &scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto.base,
  &scc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto.base,
  &scc_info_ContractSimPoll_ei_2eproto.base,
  &scc_info_ContractSimPollResponse_ei_2eproto.base,
  &scc_info_ContractSimResultUpdate_ei_2eproto.base,
  &scc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto.base,
  &scc_info_ContractsArchive_ei_2eproto.base,
  &scc_info_ContractsRequest_ei_2eproto.base,
  &scc_info_ContractsResponse_ei_2eproto.base,
  &scc_info_CoopBuffHistory_ei_2eproto.base,
  &scc_info_CoopBuffState_ei_2eproto.base,
  &scc_info_CoopChickenRunEntry_ei_2eproto.base,
  &scc_info_CoopCompletionSnapshot_ei_2eproto.base,
  &scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto.base,
  &scc_info_CoopLastChickenRunTimes_ei_2eproto.base,
  &scc_info_CraftArtifactRequest_ei_2eproto.base,
  &scc_info_CraftArtifactResponse_ei_2eproto.base,
  &scc_info_CreateCoopRequest_ei_2eproto.base,
  &scc_info_CreateCoopResponse_ei_2eproto.base,
  &scc_info_CurrencyFlowBatchRequest_ei_2eproto.base,
  &scc_info_CurrencyFlowLog_ei_2eproto.base,
  &scc_info_DLCCatalog_ei_2eproto.base,
  &scc_info_DLCItem_ei_2eproto.base,
  &scc_info_DailyGiftInfo_ei_2eproto.base,
  &scc_info_DeviceInfo_ei_2eproto.base,
  &scc_info_EggIncAdConfig_ei_2eproto.base,
  &scc_info_EggIncCurrentEvents_ei_2eproto.base,
  &scc_info_EggIncEvent_ei_2eproto.base,
  &scc_info_EggIncFirstContactRequest_ei_2eproto.base,
  &scc_info_EggIncFirstContactResponse_ei_2eproto.base,
  &scc_info_FarmProductionParams_ei_2eproto.base,
  &scc_info_GameModifier_ei_2eproto.base,
  &scc_info_GenericAction_ei_2eproto.base,
  &scc_info_GenericActionBatchRequest_ei_2eproto.base,
  &scc_info_GetPeriodicalsRequest_ei_2eproto.base,
  &scc_info_GiftPlayerCoopRequest_ei_2eproto.base,
  &scc_info_IAPSaleEntry_ei_2eproto.base,
  &scc_info_InGameMail_ei_2eproto.base,
  &scc_info_InventorySlot_ei_2eproto.base,
  &scc_info_JoinCoopRequest_ei_2eproto.base,
  &scc_info_JoinCoopResponse_ei_2eproto.base,
  &scc_info_KickPlayerCoopRequest_ei_2eproto.base,
  &scc_info_LeaderboardAnalysis_ei_2eproto.base,
  &scc_info_LeaderboardAnalysis_Chunk_ei_2eproto.base,
  &scc_info_LeaderboardInfo_ei_2eproto.base,
  &scc_info_LeaderboardInfo_Season_ei_2eproto.base,
  &scc_info_LeaderboardRequest_ei_2eproto.base,
  &scc_info_LeaderboardResponse_ei_2eproto.base,
  &scc_info_LeaderboardResponse_Entry_ei_2eproto.base,
  &scc_info_LeaveCoopRequest_ei_2eproto.base,
  &scc_info_LiveConfig_ei_2eproto.base,
  &scc_info_LiveConfig_BoostsConfig_ei_2eproto.base,
  &scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto.base,
  &scc_info_LiveConfig_GiftConfig_ei_2eproto.base,
  &scc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto.base,
  &scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto.base,
  &scc_info_LiveConfig_MiscConfig_ei_2eproto.base,
  &scc_info_LocalContract_ei_2eproto.base,
  &scc_info_LogCompleteMissionPayload_ei_2eproto.base,
  &scc_info_LogConsumeArtifactPayload_ei_2eproto.base,
  &scc_info_LogCraftArtifactPayload_ei_2eproto.base,
  &scc_info_LogSetArtifactPayload_ei_2eproto.base,
  &scc_info_MailDB_ei_2eproto.base,
  &scc_info_MailState_ei_2eproto.base,
  &scc_info_MailState_TipState_ei_2eproto.base,
  &scc_info_MissionInfo_ei_2eproto.base,
  &scc_info_MissionInfo_Fuel_ei_2eproto.base,
  &scc_info_MissionRequest_ei_2eproto.base,
  &scc_info_MissionResponse_ei_2eproto.base,
  &scc_info_MyContracts_ei_2eproto.base,
  &scc_info_PeriodicalsResponse_ei_2eproto.base,
  &scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto.base,
  &scc_info_PlayerFarmInfo_ei_2eproto.base,
  &scc_info_QueryCoopRequest_ei_2eproto.base,
  &scc_info_QueryCoopResponse_ei_2eproto.base,
  &scc_info_ReportPlayerCoopRequest_ei_2eproto.base,
  &scc_info_ReturnEDTPayload_ei_2eproto.base,
  &scc_info_Reward_ei_2eproto.base,
  &scc_info_SalesInfo_ei_2eproto.base,
  &scc_info_SalesInfoRequest_ei_2eproto.base,
  &scc_info_SaveBackupResponse_ei_2eproto.base,
  &scc_info_SendChickenRunCoopRequest_ei_2eproto.base,
  &scc_info_ServerGift_ei_2eproto.base,
  &scc_info_SetArtifactRequest_ei_2eproto.base,
  &scc_info_SetArtifactResponse_ei_2eproto.base,
  &scc_info_ShellDB_ei_2eproto.base,
  &scc_info_ShellDB_ChickenConfig_ei_2eproto.base,
  &scc_info_ShellDB_FarmConfiguration_ei_2eproto.base,
  &scc_info_ShellDB_LightingConfig_ei_2eproto.base,
  &scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto.base,
  &scc_info_ShellDB_ShellConfiguration_ei_2eproto.base,
  &scc_info_ShellDB_ShellElementStatus_ei_2eproto.base,
  &scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto.base,
  &scc_info_ShellDB_ShellSetConfiguration_ei_2eproto.base,
  &scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto.base,
  &scc_info_ShellDB_ShellStatus_ei_2eproto.base,
  &scc_info_ShellGroupSpec_ei_2eproto.base,
  &scc_info_ShellObjectSpec_ei_2eproto.base,
  &scc_info_ShellObjectSpec_LODPiece_ei_2eproto.base,
  &scc_info_ShellPopularityStats_ei_2eproto.base,
  &scc_info_ShellPopularityStats_Entry_ei_2eproto.base,
  &scc_info_ShellSetSpec_ei_2eproto.base,
  &scc_info_ShellSetSpec_VariationSpec_ei_2eproto.base,
  &scc_info_ShellShowcase_ei_2eproto.base,
  &scc_info_ShellShowcaseListingInfo_ei_2eproto.base,
  &scc_info_ShellShowcaseListingSet_ei_2eproto.base,
  &scc_info_ShellSpec_ei_2eproto.base,
  &scc_info_ShellSpec_ShellPiece_ei_2eproto.base,
  &scc_info_ShellsActionBatch_ei_2eproto.base,
  &scc_info_ShellsActionLog_ei_2eproto.base,
  &scc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto.base,
  &scc_info_SubmitShellShowcaseRequest_ei_2eproto.base,
  &scc_info_SubscriptionChangeHintRequest_ei_2eproto.base,
  &scc_info_TipsDB_ei_2eproto.base,
  &scc_info_UpdateCoopPermissionsRequest_ei_2eproto.base,
  &scc_info_UpdateCoopPermissionsResponse_ei_2eproto.base,
  &scc_info_UserDataInfoRequest_ei_2eproto.base,
  &scc_info_UserDataInfoResponse_ei_2eproto.base,
  &scc_info_UserSubscriptionInfo_ei_2eproto.base,
  &scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto.base,
  &scc_info_UserVerificationAnalysis_ei_2eproto.base,
  &scc_info_Vector3_ei_2eproto.base,
  &scc_info_Vector4_ei_2eproto.base,
  &scc_info_VerifyPurchaseRequest_ei_2eproto.base,
  &scc_info_VerifyPurchaseResponse_ei_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ei_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ei_2eproto = {
  false, false, descriptor_table_protodef_ei_2eproto, "ei.proto", 48306,
  &descriptor_table_ei_2eproto_once, descriptor_table_ei_2eproto_sccs, descriptor_table_ei_2eproto_deps, 194, 0,
  schemas, file_default_instances, TableStruct_ei_2eproto::offsets,
  file_level_metadata_ei_2eproto, 194, file_level_enum_descriptors_ei_2eproto, file_level_service_descriptors_ei_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ei_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ei_2eproto)), true);
namespace ei {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EggIncFirstContactResponse_ErrorCodes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[0];
}
bool EggIncFirstContactResponse_ErrorCodes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::NO_ERROR;
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::EXISTING_USER_W_GAMER_ID;
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::USER_NOT_FOUND;
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::BACKUP_CONFLICT;
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::ErrorCodes_MIN;
constexpr EggIncFirstContactResponse_ErrorCodes EggIncFirstContactResponse::ErrorCodes_MAX;
constexpr int EggIncFirstContactResponse::ErrorCodes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameModifier_GameDimension_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[1];
}
bool GameModifier_GameDimension_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameModifier_GameDimension GameModifier::EARNINGS;
constexpr GameModifier_GameDimension GameModifier::AWAY_EARNINGS;
constexpr GameModifier_GameDimension GameModifier::INTERNAL_HATCHERY_RATE;
constexpr GameModifier_GameDimension GameModifier::EGG_LAYING_RATE;
constexpr GameModifier_GameDimension GameModifier::SHIPPING_CAPACITY;
constexpr GameModifier_GameDimension GameModifier::HAB_CAPACITY;
constexpr GameModifier_GameDimension GameModifier::VEHICLE_COST;
constexpr GameModifier_GameDimension GameModifier::HAB_COST;
constexpr GameModifier_GameDimension GameModifier::RESEARCH_COST;
constexpr GameModifier_GameDimension GameModifier::GameDimension_MIN;
constexpr GameModifier_GameDimension GameModifier::GameDimension_MAX;
constexpr int GameModifier::GameDimension_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Contract_PlayerGrade_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[2];
}
bool Contract_PlayerGrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Contract_PlayerGrade Contract::GRADE_UNSET;
constexpr Contract_PlayerGrade Contract::GRADE_C;
constexpr Contract_PlayerGrade Contract::GRADE_B;
constexpr Contract_PlayerGrade Contract::GRADE_A;
constexpr Contract_PlayerGrade Contract::GRADE_AA;
constexpr Contract_PlayerGrade Contract::GRADE_AAA;
constexpr Contract_PlayerGrade Contract::PlayerGrade_MIN;
constexpr Contract_PlayerGrade Contract::PlayerGrade_MAX;
constexpr int Contract::PlayerGrade_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractPlayerInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[3];
}
bool ContractPlayerInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractPlayerInfo_Status ContractPlayerInfo::UNKNOWN;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::CALCULATING;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::OUT_OF_DATE;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::INCOMPLETE;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::COMPLETE;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::Status_MIN;
constexpr ContractPlayerInfo_Status ContractPlayerInfo::Status_MAX;
constexpr int ContractPlayerInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractEvaluation_PoorBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[4];
}
bool ContractEvaluation_PoorBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::NONE;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::LOW_CONTRIBUTION;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::BAD_CONTRIBUTION;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::DISHONORABLY_DISCHARGED;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::POOR_TEAMWORK;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::ABANDONED_COOP;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::TIME_CHEAT;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::PoorBehavior_MIN;
constexpr ContractEvaluation_PoorBehavior ContractEvaluation::PoorBehavior_MAX;
constexpr int ContractEvaluation::PoorBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractEvaluation_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[5];
}
bool ContractEvaluation_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractEvaluation_Status ContractEvaluation::UNKNOWN;
constexpr ContractEvaluation_Status ContractEvaluation::PENDING;
constexpr ContractEvaluation_Status ContractEvaluation::EVALUATING;
constexpr ContractEvaluation_Status ContractEvaluation::COMPLETE;
constexpr ContractEvaluation_Status ContractEvaluation::Status_MIN;
constexpr ContractEvaluation_Status ContractEvaluation::Status_MAX;
constexpr int ContractEvaluation::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractCoopStatusResponse_ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[6];
}
bool ContractCoopStatusResponse_ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 500:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::NO_ERROR;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::MISSING_USER;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::MISSING_COOP_ID;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::MISSING_CONTRACT_ID;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::MEMBERSHIP_NOT_FOUND;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::COOP_NOT_FOUND;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::CONTRACT_NOT_FOUND;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::INVALID_MEMBERSHIP;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::NO_HTTP_RESPONSE;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::ResponseStatus_MIN;
constexpr ContractCoopStatusResponse_ResponseStatus ContractCoopStatusResponse::ResponseStatus_MAX;
constexpr int ContractCoopStatusResponse::ResponseStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractCoopStatusResponse_MemberStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[7];
}
bool ContractCoopStatusResponse_MemberStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::VALID;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::KICKED_INACTIVE;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::KICKED_PRIVATE;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::KICKED_CHEATS;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::KICKED_LEECH;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::MemberStatus_MIN;
constexpr ContractCoopStatusResponse_MemberStatus ContractCoopStatusResponse::MemberStatus_MAX;
constexpr int ContractCoopStatusResponse::MemberStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractCoopStatusResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[8];
}
bool ContractCoopStatusResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::UNKNOWN;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::LOBBY;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::ACTIVE;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::COMPLETE;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::FINALIZED;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::Status_MIN;
constexpr ContractCoopStatusResponse_Status ContractCoopStatusResponse::Status_MAX;
constexpr int ContractCoopStatusResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportPlayerCoopRequest_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[9];
}
bool ReportPlayerCoopRequest_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::UNKNOWN;
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::OFFENSIVE_NAME;
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::CHEATING;
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::LEECHING;
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::Reason_MIN;
constexpr ReportPlayerCoopRequest_Reason ReportPlayerCoopRequest::Reason_MAX;
constexpr int ReportPlayerCoopRequest::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KickPlayerCoopRequest_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[10];
}
bool KickPlayerCoopRequest_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::INVALID;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::CHEATER;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::IDLE;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::LEECH;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::PRIVATE;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::Reason_MIN;
constexpr KickPlayerCoopRequest_Reason KickPlayerCoopRequest::Reason_MAX;
constexpr int KickPlayerCoopRequest::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionInfo_Spaceship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[11];
}
bool MissionInfo_Spaceship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionInfo_Spaceship MissionInfo::CHICKEN_ONE;
constexpr MissionInfo_Spaceship MissionInfo::CHICKEN_NINE;
constexpr MissionInfo_Spaceship MissionInfo::CHICKEN_HEAVY;
constexpr MissionInfo_Spaceship MissionInfo::BCR;
constexpr MissionInfo_Spaceship MissionInfo::MILLENIUM_CHICKEN;
constexpr MissionInfo_Spaceship MissionInfo::CORELLIHEN_CORVETTE;
constexpr MissionInfo_Spaceship MissionInfo::GALEGGTICA;
constexpr MissionInfo_Spaceship MissionInfo::CHICKFIANT;
constexpr MissionInfo_Spaceship MissionInfo::VOYEGGER;
constexpr MissionInfo_Spaceship MissionInfo::HENERPRISE;
constexpr MissionInfo_Spaceship MissionInfo::Spaceship_MIN;
constexpr MissionInfo_Spaceship MissionInfo::Spaceship_MAX;
constexpr int MissionInfo::Spaceship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[12];
}
bool MissionInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 10:
    case 15:
    case 16:
    case 20:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionInfo_Status MissionInfo::FUELING;
constexpr MissionInfo_Status MissionInfo::PREPARE_TO_LAUNCH;
constexpr MissionInfo_Status MissionInfo::EXPLORING;
constexpr MissionInfo_Status MissionInfo::RETURNED;
constexpr MissionInfo_Status MissionInfo::ANALYZING;
constexpr MissionInfo_Status MissionInfo::COMPLETE;
constexpr MissionInfo_Status MissionInfo::ARCHIVED;
constexpr MissionInfo_Status MissionInfo::Status_MIN;
constexpr MissionInfo_Status MissionInfo::Status_MAX;
constexpr int MissionInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionInfo_DurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[13];
}
bool MissionInfo_DurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionInfo_DurationType MissionInfo::SHORT;
constexpr MissionInfo_DurationType MissionInfo::LONG;
constexpr MissionInfo_DurationType MissionInfo::EPIC;
constexpr MissionInfo_DurationType MissionInfo::TUTORIAL;
constexpr MissionInfo_DurationType MissionInfo::DurationType_MIN;
constexpr MissionInfo_DurationType MissionInfo::DurationType_MAX;
constexpr int MissionInfo::DurationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArtifactSpec_Name_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[14];
}
bool ArtifactSpec_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 10000:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArtifactSpec_Name ArtifactSpec::LUNAR_TOTEM;
constexpr ArtifactSpec_Name ArtifactSpec::NEODYMIUM_MEDALLION;
constexpr ArtifactSpec_Name ArtifactSpec::BEAK_OF_MIDAS;
constexpr ArtifactSpec_Name ArtifactSpec::LIGHT_OF_EGGENDIL;
constexpr ArtifactSpec_Name ArtifactSpec::DEMETERS_NECKLACE;
constexpr ArtifactSpec_Name ArtifactSpec::VIAL_MARTIAN_DUST;
constexpr ArtifactSpec_Name ArtifactSpec::ORNATE_GUSSET;
constexpr ArtifactSpec_Name ArtifactSpec::THE_CHALICE;
constexpr ArtifactSpec_Name ArtifactSpec::BOOK_OF_BASAN;
constexpr ArtifactSpec_Name ArtifactSpec::PHOENIX_FEATHER;
constexpr ArtifactSpec_Name ArtifactSpec::TUNGSTEN_ANKH;
constexpr ArtifactSpec_Name ArtifactSpec::AURELIAN_BROOCH;
constexpr ArtifactSpec_Name ArtifactSpec::CARVED_RAINSTICK;
constexpr ArtifactSpec_Name ArtifactSpec::PUZZLE_CUBE;
constexpr ArtifactSpec_Name ArtifactSpec::QUANTUM_METRONOME;
constexpr ArtifactSpec_Name ArtifactSpec::SHIP_IN_A_BOTTLE;
constexpr ArtifactSpec_Name ArtifactSpec::TACHYON_DEFLECTOR;
constexpr ArtifactSpec_Name ArtifactSpec::INTERSTELLAR_COMPASS;
constexpr ArtifactSpec_Name ArtifactSpec::DILITHIUM_MONOCLE;
constexpr ArtifactSpec_Name ArtifactSpec::TITANIUM_ACTUATOR;
constexpr ArtifactSpec_Name ArtifactSpec::MERCURYS_LENS;
constexpr ArtifactSpec_Name ArtifactSpec::TACHYON_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::DILITHIUM_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::SHELL_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::LUNAR_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::SOUL_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::PROPHECY_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::QUANTUM_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::TERRA_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::LIFE_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::CLARITY_STONE;
constexpr ArtifactSpec_Name ArtifactSpec::EXTRATERRESTRIAL_ALUMINUM;
constexpr ArtifactSpec_Name ArtifactSpec::ANCIENT_TUNGSTEN;
constexpr ArtifactSpec_Name ArtifactSpec::SPACE_ROCKS;
constexpr ArtifactSpec_Name ArtifactSpec::ALIEN_WOOD;
constexpr ArtifactSpec_Name ArtifactSpec::GOLD_METEORITE;
constexpr ArtifactSpec_Name ArtifactSpec::TAU_CETI_GEODE;
constexpr ArtifactSpec_Name ArtifactSpec::CENTAURIAN_STEEL;
constexpr ArtifactSpec_Name ArtifactSpec::ERIDANI_FEATHER;
constexpr ArtifactSpec_Name ArtifactSpec::DRONE_PARTS;
constexpr ArtifactSpec_Name ArtifactSpec::CELESTIAL_BRONZE;
constexpr ArtifactSpec_Name ArtifactSpec::LALANDE_HIDE;
constexpr ArtifactSpec_Name ArtifactSpec::SOLAR_TITANIUM;
constexpr ArtifactSpec_Name ArtifactSpec::TACHYON_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::DILITHIUM_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::SHELL_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::LUNAR_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::SOUL_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::PROPHECY_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::QUANTUM_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::TERRA_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::LIFE_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::CLARITY_STONE_FRAGMENT;
constexpr ArtifactSpec_Name ArtifactSpec::UNKNOWN;
constexpr ArtifactSpec_Name ArtifactSpec::Name_MIN;
constexpr ArtifactSpec_Name ArtifactSpec::Name_MAX;
constexpr int ArtifactSpec::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArtifactSpec_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[15];
}
bool ArtifactSpec_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArtifactSpec_Level ArtifactSpec::INFERIOR;
constexpr ArtifactSpec_Level ArtifactSpec::LESSER;
constexpr ArtifactSpec_Level ArtifactSpec::NORMAL;
constexpr ArtifactSpec_Level ArtifactSpec::GREATER;
constexpr ArtifactSpec_Level ArtifactSpec::SUPERIOR;
constexpr ArtifactSpec_Level ArtifactSpec::Level_MIN;
constexpr ArtifactSpec_Level ArtifactSpec::Level_MAX;
constexpr int ArtifactSpec::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArtifactSpec_Rarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[16];
}
bool ArtifactSpec_Rarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArtifactSpec_Rarity ArtifactSpec::COMMON;
constexpr ArtifactSpec_Rarity ArtifactSpec::RARE;
constexpr ArtifactSpec_Rarity ArtifactSpec::EPIC;
constexpr ArtifactSpec_Rarity ArtifactSpec::LEGENDARY;
constexpr ArtifactSpec_Rarity ArtifactSpec::Rarity_MIN;
constexpr ArtifactSpec_Rarity ArtifactSpec::Rarity_MAX;
constexpr int ArtifactSpec::Rarity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArtifactSpec_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[17];
}
bool ArtifactSpec_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ArtifactSpec_Type ArtifactSpec::ARTIFACT;
constexpr ArtifactSpec_Type ArtifactSpec::STONE;
constexpr ArtifactSpec_Type ArtifactSpec::INGREDIENT;
constexpr ArtifactSpec_Type ArtifactSpec::STONE_INGREDIENT;
constexpr ArtifactSpec_Type ArtifactSpec::Type_MIN;
constexpr ArtifactSpec_Type ArtifactSpec::Type_MAX;
constexpr int ArtifactSpec::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveBackupResponse_ErrorCodes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[18];
}
bool SaveBackupResponse_ErrorCodes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::NO_ERROR;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::USER_NOT_FOUND;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::COULD_NOT_OVERWRITE;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::BACKUP_OFFERED;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::BAD_USER_ID;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::ErrorCodes_MIN;
constexpr SaveBackupResponse_ErrorCodes SaveBackupResponse::ErrorCodes_MAX;
constexpr int SaveBackupResponse::ErrorCodes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellSpec_AssetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[19];
}
bool ShellSpec_AssetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 59:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 170:
    case 171:
    case 172:
    case 180:
    case 181:
    case 182:
    case 200:
    case 201:
    case 202:
    case 203:
    case 500:
    case 501:
    case 502:
    case 505:
    case 506:
    case 507:
    case 510:
    case 511:
    case 512:
    case 513:
    case 515:
    case 516:
    case 520:
    case 570:
    case 600:
    case 1000:
    case 1010:
    case 9999:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShellSpec_AssetType ShellSpec::COOP;
constexpr ShellSpec_AssetType ShellSpec::SHACK;
constexpr ShellSpec_AssetType ShellSpec::SUPER_SHACK;
constexpr ShellSpec_AssetType ShellSpec::SHORT_HOUSE;
constexpr ShellSpec_AssetType ShellSpec::THE_STANDARD;
constexpr ShellSpec_AssetType ShellSpec::LONG_HOUSE;
constexpr ShellSpec_AssetType ShellSpec::DOUBLE_DECKER;
constexpr ShellSpec_AssetType ShellSpec::WAREHOUSE;
constexpr ShellSpec_AssetType ShellSpec::CENTER;
constexpr ShellSpec_AssetType ShellSpec::BUNKER;
constexpr ShellSpec_AssetType ShellSpec::EGGKEA;
constexpr ShellSpec_AssetType ShellSpec::HAB_1K;
constexpr ShellSpec_AssetType ShellSpec::HANGAR;
constexpr ShellSpec_AssetType ShellSpec::TOWER;
constexpr ShellSpec_AssetType ShellSpec::HAB_10K;
constexpr ShellSpec_AssetType ShellSpec::EGGTOPIA;
constexpr ShellSpec_AssetType ShellSpec::MONOLITH;
constexpr ShellSpec_AssetType ShellSpec::PLANET_PORTAL;
constexpr ShellSpec_AssetType ShellSpec::CHICKEN_UNIVERSE;
constexpr ShellSpec_AssetType ShellSpec::SILO_0_SMALL;
constexpr ShellSpec_AssetType ShellSpec::SILO_0_MED;
constexpr ShellSpec_AssetType ShellSpec::SILO_0_LARGE;
constexpr ShellSpec_AssetType ShellSpec::SILO_1_SMALL;
constexpr ShellSpec_AssetType ShellSpec::SILO_1_MED;
constexpr ShellSpec_AssetType ShellSpec::SILO_1_LARGE;
constexpr ShellSpec_AssetType ShellSpec::SILO_ALL;
constexpr ShellSpec_AssetType ShellSpec::MAILBOX;
constexpr ShellSpec_AssetType ShellSpec::TROPHY_CASE;
constexpr ShellSpec_AssetType ShellSpec::GROUND;
constexpr ShellSpec_AssetType ShellSpec::HARDSCAPE;
constexpr ShellSpec_AssetType ShellSpec::HYPERLOOP;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_1;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_2;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_3;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_4;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_5;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_6;
constexpr ShellSpec_AssetType ShellSpec::DEPOT_7;
constexpr ShellSpec_AssetType ShellSpec::LAB_1;
constexpr ShellSpec_AssetType ShellSpec::LAB_2;
constexpr ShellSpec_AssetType ShellSpec::LAB_3;
constexpr ShellSpec_AssetType ShellSpec::LAB_4;
constexpr ShellSpec_AssetType ShellSpec::LAB_5;
constexpr ShellSpec_AssetType ShellSpec::LAB_6;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_EDIBLE;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_SUPERFOOD;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_MEDICAL;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_ROCKET_FUEL;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_SUPERMATERIAL;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_FUSION;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_QUANTUM;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_IMMORTALITY;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_TACHYON;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_GRAVITON;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_DILITHIUM;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_PRODIGY;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_TERRAFORM;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_ANTIMATTER;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_DARK_MATTER;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_AI;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_NEBULA;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_UNIVERSE;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_ENLIGHTENMENT;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_CHOCOLATE;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_EASTER;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_WATERBALLOON;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_FIREWORK;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_PUMPKIN;
constexpr ShellSpec_AssetType ShellSpec::HOA_1;
constexpr ShellSpec_AssetType ShellSpec::HOA_2;
constexpr ShellSpec_AssetType ShellSpec::HOA_3;
constexpr ShellSpec_AssetType ShellSpec::MISSION_CONTROL_1;
constexpr ShellSpec_AssetType ShellSpec::MISSION_CONTROL_2;
constexpr ShellSpec_AssetType ShellSpec::MISSION_CONTROL_3;
constexpr ShellSpec_AssetType ShellSpec::FUEL_TANK_1;
constexpr ShellSpec_AssetType ShellSpec::FUEL_TANK_2;
constexpr ShellSpec_AssetType ShellSpec::FUEL_TANK_3;
constexpr ShellSpec_AssetType ShellSpec::FUEL_TANK_4;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_GRAVITON_TOP;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_NEBULA_MIDDLE;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_NEBULA_TOP;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_DARK_MATTER_RING_1;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_DARK_MATTER_RING_2;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_DARK_MATTER_RING_3;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_AI_TOP_1;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_AI_TOP_2;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_AI_TOP_3;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_AI_TOP_4;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_UNIVERSE_PROBE;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_UNIVERSE_BOLT;
constexpr ShellSpec_AssetType ShellSpec::HATCHERY_ENLIGHTENMENT_ORB;
constexpr ShellSpec_AssetType ShellSpec::HYPERLOOP_TRACK;
constexpr ShellSpec_AssetType ShellSpec::MAILBOX_FULL;
constexpr ShellSpec_AssetType ShellSpec::CHICKEN;
constexpr ShellSpec_AssetType ShellSpec::HAT;
constexpr ShellSpec_AssetType ShellSpec::UNKNOWN;
constexpr ShellSpec_AssetType ShellSpec::AssetType_MIN;
constexpr ShellSpec_AssetType ShellSpec::AssetType_MAX;
constexpr int ShellSpec::AssetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellObjectSpec_ChickenAnimation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[20];
}
bool ShellObjectSpec_ChickenAnimation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::STANDARD_RUN;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::SLOWMO;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::WOBBLE;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::WOBBLE_LEAN;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::SMOOTH;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::SMOOTH_LEAN;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::HOVER;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::SIDEWAYS_SMOOTH;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::SIDEWAYS_LEAN;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::ChickenAnimation_MIN;
constexpr ShellObjectSpec_ChickenAnimation ShellObjectSpec::ChickenAnimation_MAX;
constexpr int ShellObjectSpec::ChickenAnimation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellDB_FarmElement_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[21];
}
bool ShellDB_FarmElement_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShellDB_FarmElement ShellDB::HEN_HOUSE;
constexpr ShellDB_FarmElement ShellDB::SILO;
constexpr ShellDB_FarmElement ShellDB::MAILBOX;
constexpr ShellDB_FarmElement ShellDB::TROPHY_CASE;
constexpr ShellDB_FarmElement ShellDB::GROUND;
constexpr ShellDB_FarmElement ShellDB::HARDSCAPE;
constexpr ShellDB_FarmElement ShellDB::HYPERLOOP;
constexpr ShellDB_FarmElement ShellDB::DEPOT;
constexpr ShellDB_FarmElement ShellDB::LAB;
constexpr ShellDB_FarmElement ShellDB::HATCHERY;
constexpr ShellDB_FarmElement ShellDB::HOA;
constexpr ShellDB_FarmElement ShellDB::MISSION_CONTROL;
constexpr ShellDB_FarmElement ShellDB::FUEL_TANK;
constexpr ShellDB_FarmElement ShellDB::CHICKEN;
constexpr ShellDB_FarmElement ShellDB::HAT;
constexpr ShellDB_FarmElement ShellDB::UNKNOWN;
constexpr ShellDB_FarmElement ShellDB::FarmElement_MIN;
constexpr ShellDB_FarmElement ShellDB::FarmElement_MAX;
constexpr int ShellDB::FarmElement_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellShowcaseListingInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[22];
}
bool ShellShowcaseListingInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::NONE;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::SUBMITTED;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::LIVE;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::FEATURED;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::INVALID;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::Status_MIN;
constexpr ShellShowcaseListingInfo_Status ShellShowcaseListingInfo::Status_MAX;
constexpr int ShellShowcaseListingInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserVerificationAnalysis_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[23];
}
bool UserVerificationAnalysis_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserVerificationAnalysis_Status UserVerificationAnalysis::UNKNOWN;
constexpr UserVerificationAnalysis_Status UserVerificationAnalysis::PROCESSING;
constexpr UserVerificationAnalysis_Status UserVerificationAnalysis::COMPLETE;
constexpr UserVerificationAnalysis_Status UserVerificationAnalysis::Status_MIN;
constexpr UserVerificationAnalysis_Status UserVerificationAnalysis::Status_MAX;
constexpr int UserVerificationAnalysis::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSubscriptionInfo_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[24];
}
bool UserSubscriptionInfo_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserSubscriptionInfo_Level UserSubscriptionInfo::STANDARD;
constexpr UserSubscriptionInfo_Level UserSubscriptionInfo::PRO;
constexpr UserSubscriptionInfo_Level UserSubscriptionInfo::Level_MIN;
constexpr UserSubscriptionInfo_Level UserSubscriptionInfo::Level_MAX;
constexpr int UserSubscriptionInfo::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserSubscriptionInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[25];
}
bool UserSubscriptionInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::UNKNOWN;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::ACTIVE;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::EXPIRED;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::REVOKED;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::GRACE_PERIOD;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::PAUSE_HOLD;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::Status_MIN;
constexpr UserSubscriptionInfo_Status UserSubscriptionInfo::Status_MAX;
constexpr int UserSubscriptionInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[26];
}
bool Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceFormFactor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[27];
}
bool DeviceFormFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdNetwork_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[28];
}
bool AdNetwork_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Egg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[29];
}
bool Egg_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FarmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[30];
}
bool FarmType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GoalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[31];
}
bool GoalType_IsValid(int value) {
  switch (value) {
    case 1:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[32];
}
bool RewardType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UILocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[33];
}
bool UILocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[34];
}
bool UserType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaderboardScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ei_2eproto);
  return file_level_enum_descriptors_ei_2eproto[35];
}
bool LeaderboardScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector3>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ei.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:ei.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_ei_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector4::InitAsDefaultInstance() {
}
class Vector4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector4>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Vector4::Vector4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Vector4)
}
Vector4::Vector4(const Vector4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:ei.Vector4)
}

void Vector4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:ei.Vector4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector4::ArenaDtor(void* object) {
  Vector4* _this = reinterpret_cast< Vector4* >(object);
  (void)_this;
}
void Vector4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector4& Vector4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector4_ei_2eproto.base);
  return *internal_default_instance();
}


void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Vector4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Vector4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Vector4)
  return target;
}

size_t Vector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Vector4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Vector4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Vector4)
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {
  return true;
}

void Vector4::InternalSwap(Vector4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4, w_)
      + sizeof(Vector4::w_)
      - PROTOBUF_FIELD_OFFSET(Vector4, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Settings::InitAsDefaultInstance() {
}
class Backup_Settings::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Settings>()._has_bits_);
  static void set_has_sfx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_music(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_low_battery_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low_performance_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_force_touch_chicken_btn(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notifications_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_notification_query_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_notifications_on(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_notify_daily_gift(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_low_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_auto_stop_fueling(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hide_cc_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_contracts_widget_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_backup_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_coppa_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_coppa_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gdpr_consent_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gdpr_age_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gdpr_consent_given(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_age_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_age_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_data_collection_consent_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_data_collection_consent_given(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_day_age_queried(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_user_ads_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_user_cloud_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_user_analytics_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_user_personalized_ads_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

Backup_Settings::Backup_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Settings)
}
Backup_Settings::Backup_Settings(const Backup_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sfx_, &from.sfx_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_personalized_ads_enabled_) -
    reinterpret_cast<char*>(&sfx_)) + sizeof(user_personalized_ads_enabled_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Settings)
}

void Backup_Settings::SharedCtor() {
  ::memset(&sfx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_cc_status_) -
      reinterpret_cast<char*>(&sfx_)) + sizeof(hide_cc_status_));
  user_ads_enabled_ = true;
  user_cloud_enabled_ = true;
  user_analytics_enabled_ = true;
  user_personalized_ads_enabled_ = true;
}

Backup_Settings::~Backup_Settings() {
  // @@protoc_insertion_point(destructor:ei.Backup.Settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Settings::ArenaDtor(void* object) {
  Backup_Settings* _this = reinterpret_cast< Backup_Settings* >(object);
  (void)_this;
}
void Backup_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Settings& Backup_Settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Settings_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sfx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_daily_gift_) -
        reinterpret_cast<char*>(&sfx_)) + sizeof(notify_daily_gift_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&contracts_widget_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_restricted_) -
        reinterpret_cast<char*>(&contracts_widget_enabled_)) + sizeof(age_restricted_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&last_day_age_queried_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_enabled_) -
        reinterpret_cast<char*>(&last_day_age_queried_)) + sizeof(max_enabled_));
  }
  if (cached_has_bits & 0x1f000000u) {
    hide_cc_status_ = false;
    user_ads_enabled_ = true;
    user_cloud_enabled_ = true;
    user_analytics_enabled_ = true;
    user_personalized_ads_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool sfx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sfx(&has_bits);
          sfx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool music = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_music(&has_bits);
          music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_battery_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_low_battery_mode(&has_bits);
          low_battery_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_performance_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_low_performance_mode(&has_bits);
          low_performance_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notifications_queried = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_notifications_queried(&has_bits);
          notifications_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notifications_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_notifications_on(&has_bits);
          notifications_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coppa_queried = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_coppa_queried(&has_bits);
          coppa_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coppa_restricted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_coppa_restricted(&has_bits);
          coppa_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_touch_chicken_btn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_force_touch_chicken_btn(&has_bits);
          force_touch_chicken_btn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_performance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_low_performance(&has_bits);
          low_performance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notify_daily_gift = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_notify_daily_gift(&has_bits);
          notify_daily_gift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gdpr_consent_queried = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gdpr_consent_queried(&has_bits);
          gdpr_consent_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gdpr_consent_given = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gdpr_consent_given(&has_bits);
          gdpr_consent_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_ads_enabled = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_user_ads_enabled(&has_bits);
          user_ads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_cloud_enabled = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_user_cloud_enabled(&has_bits);
          user_cloud_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gdpr_age_restricted = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_gdpr_age_restricted(&has_bits);
          gdpr_age_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_day_age_queried = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_last_day_age_queried(&has_bits);
          last_day_age_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool age_queried = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_age_queried(&has_bits);
          age_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool age_restricted = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_age_restricted(&has_bits);
          age_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool data_collection_consent_queried = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_data_collection_consent_queried(&has_bits);
          data_collection_consent_queried_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool data_collection_consent_given = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_data_collection_consent_given(&has_bits);
          data_collection_consent_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_analytics_enabled = 22 [default = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_user_analytics_enabled(&has_bits);
          user_analytics_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_personalized_ads_enabled = 23 [default = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_user_personalized_ads_enabled(&has_bits);
          user_personalized_ads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_backup_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_last_backup_time(&has_bits);
          last_backup_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool auto_stop_fueling = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_auto_stop_fueling(&has_bits);
          auto_stop_fueling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool max_enabled = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_enabled(&has_bits);
          max_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_notification_query_time = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_last_notification_query_time(&has_bits);
          last_notification_query_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool hide_cc_status = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_hide_cc_status(&has_bits);
          hide_cc_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_widget_enabled = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_contracts_widget_enabled(&has_bits);
          contracts_widget_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool sfx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_sfx(), target);
  }

  // optional bool music = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_music(), target);
  }

  // optional bool low_battery_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_low_battery_mode(), target);
  }

  // optional bool low_performance_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_low_performance_mode(), target);
  }

  // optional bool notifications_queried = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_notifications_queried(), target);
  }

  // optional bool notifications_on = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_notifications_on(), target);
  }

  // optional bool coppa_queried = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_coppa_queried(), target);
  }

  // optional bool coppa_restricted = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_coppa_restricted(), target);
  }

  // optional bool force_touch_chicken_btn = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_force_touch_chicken_btn(), target);
  }

  // optional bool low_performance = 10;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_low_performance(), target);
  }

  // optional bool notify_daily_gift = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_notify_daily_gift(), target);
  }

  // optional bool gdpr_consent_queried = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_gdpr_consent_queried(), target);
  }

  // optional bool gdpr_consent_given = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_gdpr_consent_given(), target);
  }

  // optional bool user_ads_enabled = 14 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_user_ads_enabled(), target);
  }

  // optional bool user_cloud_enabled = 15 [default = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_user_cloud_enabled(), target);
  }

  // optional bool gdpr_age_restricted = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_gdpr_age_restricted(), target);
  }

  // optional uint32 last_day_age_queried = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_last_day_age_queried(), target);
  }

  // optional bool age_queried = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_age_queried(), target);
  }

  // optional bool age_restricted = 19 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_age_restricted(), target);
  }

  // optional bool data_collection_consent_queried = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_data_collection_consent_queried(), target);
  }

  // optional bool data_collection_consent_given = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_data_collection_consent_given(), target);
  }

  // optional bool user_analytics_enabled = 22 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_user_analytics_enabled(), target);
  }

  // optional bool user_personalized_ads_enabled = 23 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_user_personalized_ads_enabled(), target);
  }

  // optional double last_backup_time = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_last_backup_time(), target);
  }

  // optional bool auto_stop_fueling = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_auto_stop_fueling(), target);
  }

  // optional bool max_enabled = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_max_enabled(), target);
  }

  // optional double last_notification_query_time = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_last_notification_query_time(), target);
  }

  // optional bool hide_cc_status = 28;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_hide_cc_status(), target);
  }

  // optional bool contracts_widget_enabled = 29;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_contracts_widget_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Settings)
  return target;
}

size_t Backup_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool sfx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool music = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool low_battery_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool low_performance_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool force_touch_chicken_btn = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_queried = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_on = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool notify_daily_gift = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool contracts_widget_enabled = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool coppa_queried = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool coppa_restricted = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool gdpr_consent_queried = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool gdpr_age_restricted = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool gdpr_consent_given = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool age_queried = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool age_restricted = 19 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 last_day_age_queried = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_day_age_queried());
    }

    // optional bool data_collection_consent_queried = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool data_collection_consent_given = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional double last_backup_time = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double last_notification_query_time = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional bool low_performance = 10;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool auto_stop_fueling = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool max_enabled = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional bool hide_cc_status = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool user_ads_enabled = 14 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool user_cloud_enabled = 15 [default = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool user_analytics_enabled = 22 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool user_personalized_ads_enabled = 23 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Settings)
    MergeFrom(*source);
  }
}

void Backup_Settings::MergeFrom(const Backup_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sfx_ = from.sfx_;
    }
    if (cached_has_bits & 0x00000002u) {
      music_ = from.music_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_battery_mode_ = from.low_battery_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      low_performance_mode_ = from.low_performance_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_touch_chicken_btn_ = from.force_touch_chicken_btn_;
    }
    if (cached_has_bits & 0x00000020u) {
      notifications_queried_ = from.notifications_queried_;
    }
    if (cached_has_bits & 0x00000040u) {
      notifications_on_ = from.notifications_on_;
    }
    if (cached_has_bits & 0x00000080u) {
      notify_daily_gift_ = from.notify_daily_gift_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      contracts_widget_enabled_ = from.contracts_widget_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      coppa_queried_ = from.coppa_queried_;
    }
    if (cached_has_bits & 0x00000400u) {
      coppa_restricted_ = from.coppa_restricted_;
    }
    if (cached_has_bits & 0x00000800u) {
      gdpr_consent_queried_ = from.gdpr_consent_queried_;
    }
    if (cached_has_bits & 0x00001000u) {
      gdpr_age_restricted_ = from.gdpr_age_restricted_;
    }
    if (cached_has_bits & 0x00002000u) {
      gdpr_consent_given_ = from.gdpr_consent_given_;
    }
    if (cached_has_bits & 0x00004000u) {
      age_queried_ = from.age_queried_;
    }
    if (cached_has_bits & 0x00008000u) {
      age_restricted_ = from.age_restricted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_day_age_queried_ = from.last_day_age_queried_;
    }
    if (cached_has_bits & 0x00020000u) {
      data_collection_consent_queried_ = from.data_collection_consent_queried_;
    }
    if (cached_has_bits & 0x00040000u) {
      data_collection_consent_given_ = from.data_collection_consent_given_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_backup_time_ = from.last_backup_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_notification_query_time_ = from.last_notification_query_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      low_performance_ = from.low_performance_;
    }
    if (cached_has_bits & 0x00400000u) {
      auto_stop_fueling_ = from.auto_stop_fueling_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_enabled_ = from.max_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      hide_cc_status_ = from.hide_cc_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      user_ads_enabled_ = from.user_ads_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      user_cloud_enabled_ = from.user_cloud_enabled_;
    }
    if (cached_has_bits & 0x08000000u) {
      user_analytics_enabled_ = from.user_analytics_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      user_personalized_ads_enabled_ = from.user_personalized_ads_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Settings::CopyFrom(const Backup_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Settings::IsInitialized() const {
  return true;
}

void Backup_Settings::InternalSwap(Backup_Settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Settings, hide_cc_status_)
      + sizeof(Backup_Settings::hide_cc_status_)
      - PROTOBUF_FIELD_OFFSET(Backup_Settings, sfx_)>(
          reinterpret_cast<char*>(&sfx_),
          reinterpret_cast<char*>(&other->sfx_));
  swap(user_ads_enabled_, other->user_ads_enabled_);
  swap(user_cloud_enabled_, other->user_cloud_enabled_);
  swap(user_analytics_enabled_, other->user_analytics_enabled_);
  swap(user_personalized_ads_enabled_, other->user_personalized_ads_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Tutorial::InitAsDefaultInstance() {
}
class Backup_Tutorial::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Tutorial>()._has_bits_);
  static void set_has_intro_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_click_tutorial_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buy_hab_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hire_vehicle_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_q_num_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s_num_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contracts_tab_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_contract_info_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_join_coop_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_switch_farm_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Backup_Tutorial::Backup_Tutorial(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tutorial_shown_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Tutorial)
}
Backup_Tutorial::Backup_Tutorial(const Backup_Tutorial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tutorial_shown_(from.tutorial_shown_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&intro_shown_, &from.intro_shown_,
    static_cast<size_t>(reinterpret_cast<char*>(&switch_farm_shown_) -
    reinterpret_cast<char*>(&intro_shown_)) + sizeof(switch_farm_shown_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Tutorial)
}

void Backup_Tutorial::SharedCtor() {
  ::memset(&intro_shown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&switch_farm_shown_) -
      reinterpret_cast<char*>(&intro_shown_)) + sizeof(switch_farm_shown_));
}

Backup_Tutorial::~Backup_Tutorial() {
  // @@protoc_insertion_point(destructor:ei.Backup.Tutorial)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Tutorial::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Tutorial::ArenaDtor(void* object) {
  Backup_Tutorial* _this = reinterpret_cast< Backup_Tutorial* >(object);
  (void)_this;
}
void Backup_Tutorial::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Tutorial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Tutorial& Backup_Tutorial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Tutorial_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Tutorial::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Tutorial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tutorial_shown_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&intro_shown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contract_info_shown_) -
        reinterpret_cast<char*>(&intro_shown_)) + sizeof(contract_info_shown_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&join_coop_shown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&switch_farm_shown_) -
        reinterpret_cast<char*>(&join_coop_shown_)) + sizeof(switch_farm_shown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Tutorial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool intro_shown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_intro_shown(&has_bits);
          intro_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool click_tutorial_shown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_click_tutorial_shown(&has_bits);
          click_tutorial_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buy_hab_shown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_buy_hab_shown(&has_bits);
          buy_hab_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hire_vehicle_shown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hire_vehicle_shown(&has_bits);
          hire_vehicle_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool q_num_shown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_q_num_shown(&has_bits);
          q_num_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool s_num_shown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_s_num_shown(&has_bits);
          s_num_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_tab_shown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_contracts_tab_shown(&has_bits);
          contracts_tab_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contract_info_shown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_contract_info_shown(&has_bits);
          contract_info_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool join_coop_shown = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_join_coop_shown(&has_bits);
          join_coop_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool switch_farm_shown = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_switch_farm_shown(&has_bits);
          switch_farm_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool tutorial_shown = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tutorial_shown(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_tutorial_shown(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Tutorial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Tutorial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool intro_shown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_intro_shown(), target);
  }

  // optional bool click_tutorial_shown = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_click_tutorial_shown(), target);
  }

  // optional bool buy_hab_shown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_buy_hab_shown(), target);
  }

  // optional bool hire_vehicle_shown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hire_vehicle_shown(), target);
  }

  // optional bool q_num_shown = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_q_num_shown(), target);
  }

  // optional bool s_num_shown = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_s_num_shown(), target);
  }

  // optional bool contracts_tab_shown = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_contracts_tab_shown(), target);
  }

  // optional bool contract_info_shown = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_contract_info_shown(), target);
  }

  // optional bool join_coop_shown = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_join_coop_shown(), target);
  }

  // optional bool switch_farm_shown = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_switch_farm_shown(), target);
  }

  // repeated bool tutorial_shown = 11;
  for (int i = 0, n = this->_internal_tutorial_shown_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_tutorial_shown(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Tutorial)
  return target;
}

size_t Backup_Tutorial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Tutorial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool tutorial_shown = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tutorial_shown_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tutorial_shown_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool intro_shown = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool click_tutorial_shown = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool buy_hab_shown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hire_vehicle_shown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool q_num_shown = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool s_num_shown = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool contracts_tab_shown = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool contract_info_shown = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool join_coop_shown = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool switch_farm_shown = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Tutorial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Tutorial)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Tutorial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Tutorial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Tutorial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Tutorial)
    MergeFrom(*source);
  }
}

void Backup_Tutorial::MergeFrom(const Backup_Tutorial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Tutorial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tutorial_shown_.MergeFrom(from.tutorial_shown_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      intro_shown_ = from.intro_shown_;
    }
    if (cached_has_bits & 0x00000002u) {
      click_tutorial_shown_ = from.click_tutorial_shown_;
    }
    if (cached_has_bits & 0x00000004u) {
      buy_hab_shown_ = from.buy_hab_shown_;
    }
    if (cached_has_bits & 0x00000008u) {
      hire_vehicle_shown_ = from.hire_vehicle_shown_;
    }
    if (cached_has_bits & 0x00000010u) {
      q_num_shown_ = from.q_num_shown_;
    }
    if (cached_has_bits & 0x00000020u) {
      s_num_shown_ = from.s_num_shown_;
    }
    if (cached_has_bits & 0x00000040u) {
      contracts_tab_shown_ = from.contracts_tab_shown_;
    }
    if (cached_has_bits & 0x00000080u) {
      contract_info_shown_ = from.contract_info_shown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      join_coop_shown_ = from.join_coop_shown_;
    }
    if (cached_has_bits & 0x00000200u) {
      switch_farm_shown_ = from.switch_farm_shown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Tutorial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Tutorial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Tutorial::CopyFrom(const Backup_Tutorial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Tutorial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Tutorial::IsInitialized() const {
  return true;
}

void Backup_Tutorial::InternalSwap(Backup_Tutorial* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tutorial_shown_.InternalSwap(&other->tutorial_shown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Tutorial, switch_farm_shown_)
      + sizeof(Backup_Tutorial::switch_farm_shown_)
      - PROTOBUF_FIELD_OFFSET(Backup_Tutorial, intro_shown_)>(
          reinterpret_cast<char*>(&intro_shown_),
          reinterpret_cast<char*>(&other->intro_shown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Tutorial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Stats::InitAsDefaultInstance() {
}
class Backup_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Stats>()._has_bits_);
  static void set_has_unlimited_chickens_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_refill_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_warp_1_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warp_8_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boosts_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_video_doubler_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drone_takedowns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_drone_takedowns_elite(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_prestiges(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_piggy_breaks(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_iap_packs_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_piggy_found_full(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_time_piggy_filled_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time_piggy_full_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lost_piggy_increments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Backup_Stats::Backup_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  egg_totals_old_(arena),
  egg_totals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Stats)
}
Backup_Stats::Backup_Stats(const Backup_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      egg_totals_old_(from.egg_totals_old_),
      egg_totals_(from.egg_totals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&refill_uses_, &from.refill_uses_,
    static_cast<size_t>(reinterpret_cast<char*>(&piggy_found_full_) -
    reinterpret_cast<char*>(&refill_uses_)) + sizeof(piggy_found_full_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Stats)
}

void Backup_Stats::SharedCtor() {
  ::memset(&refill_uses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piggy_found_full_) -
      reinterpret_cast<char*>(&refill_uses_)) + sizeof(piggy_found_full_));
}

Backup_Stats::~Backup_Stats() {
  // @@protoc_insertion_point(destructor:ei.Backup.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Stats::ArenaDtor(void* object) {
  Backup_Stats* _this = reinterpret_cast< Backup_Stats* >(object);
  (void)_this;
}
void Backup_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Stats& Backup_Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Stats_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  egg_totals_old_.Clear();
  egg_totals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&refill_uses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drone_takedowns_elite_) -
        reinterpret_cast<char*>(&refill_uses_)) + sizeof(drone_takedowns_elite_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&num_piggy_breaks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&piggy_found_full_) -
        reinterpret_cast<char*>(&num_piggy_breaks_)) + sizeof(piggy_found_full_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 egg_totals_OLD = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_egg_totals_old(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_egg_totals_old(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 refill_uses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_refill_uses(&has_bits);
          refill_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_doubler_uses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_video_doubler_uses(&has_bits);
          video_doubler_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 warp_1_uses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_warp_1_uses(&has_bits);
          warp_1_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 warp_8_uses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_warp_8_uses(&has_bits);
          warp_8_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 drone_takedowns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_drone_takedowns(&has_bits);
          drone_takedowns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unlimited_chickens_uses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unlimited_chickens_uses(&has_bits);
          unlimited_chickens_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double egg_totals = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_egg_totals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_egg_totals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_prestiges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_prestiges(&has_bits);
          num_prestiges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 drone_takedowns_elite = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_drone_takedowns_elite(&has_bits);
          drone_takedowns_elite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_piggy_breaks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_piggy_breaks(&has_bits);
          num_piggy_breaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 iap_packs_purchased = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_iap_packs_purchased(&has_bits);
          iap_packs_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 boosts_used = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_boosts_used(&has_bits);
          boosts_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_full = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_piggy_full(&has_bits);
          piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_found_full = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_piggy_found_full(&has_bits);
          piggy_found_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_piggy_filled_realtime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_time_piggy_filled_realtime(&has_bits);
          time_piggy_filled_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_piggy_full_gametime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_time_piggy_full_gametime(&has_bits);
          time_piggy_full_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 lost_piggy_increments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lost_piggy_increments(&has_bits);
          lost_piggy_increments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 egg_totals_OLD = 1;
  for (int i = 0, n = this->_internal_egg_totals_old_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_egg_totals_old(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 refill_uses = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_refill_uses(), target);
  }

  // optional uint64 video_doubler_uses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_video_doubler_uses(), target);
  }

  // optional uint64 warp_1_uses = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_warp_1_uses(), target);
  }

  // optional uint64 warp_8_uses = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_warp_8_uses(), target);
  }

  // optional uint64 drone_takedowns = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_drone_takedowns(), target);
  }

  // optional uint64 unlimited_chickens_uses = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_unlimited_chickens_uses(), target);
  }

  // repeated double egg_totals = 8;
  for (int i = 0, n = this->_internal_egg_totals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_egg_totals(i), target);
  }

  // optional uint64 num_prestiges = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_num_prestiges(), target);
  }

  // optional uint64 drone_takedowns_elite = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_drone_takedowns_elite(), target);
  }

  // optional uint64 num_piggy_breaks = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_num_piggy_breaks(), target);
  }

  // optional uint64 iap_packs_purchased = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_iap_packs_purchased(), target);
  }

  // optional uint64 boosts_used = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_boosts_used(), target);
  }

  // optional bool piggy_full = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_piggy_full(), target);
  }

  // optional bool piggy_found_full = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_piggy_found_full(), target);
  }

  // optional double time_piggy_filled_realtime = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_time_piggy_filled_realtime(), target);
  }

  // optional double time_piggy_full_gametime = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_time_piggy_full_gametime(), target);
  }

  // optional uint64 lost_piggy_increments = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_lost_piggy_increments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Stats)
  return target;
}

size_t Backup_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 egg_totals_OLD = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->egg_totals_old_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_egg_totals_old_size());
    total_size += data_size;
  }

  // repeated double egg_totals = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_egg_totals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_egg_totals_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 refill_uses = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_refill_uses());
    }

    // optional uint64 video_doubler_uses = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_doubler_uses());
    }

    // optional uint64 warp_1_uses = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_warp_1_uses());
    }

    // optional uint64 warp_8_uses = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_warp_8_uses());
    }

    // optional uint64 drone_takedowns = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_drone_takedowns());
    }

    // optional uint64 unlimited_chickens_uses = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unlimited_chickens_uses());
    }

    // optional uint64 num_prestiges = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_prestiges());
    }

    // optional uint64 drone_takedowns_elite = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_drone_takedowns_elite());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 num_piggy_breaks = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_piggy_breaks());
    }

    // optional uint64 iap_packs_purchased = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_iap_packs_purchased());
    }

    // optional uint64 boosts_used = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_boosts_used());
    }

    // optional double time_piggy_filled_realtime = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double time_piggy_full_gametime = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional uint64 lost_piggy_increments = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lost_piggy_increments());
    }

    // optional bool piggy_full = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool piggy_found_full = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Stats)
    MergeFrom(*source);
  }
}

void Backup_Stats::MergeFrom(const Backup_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  egg_totals_old_.MergeFrom(from.egg_totals_old_);
  egg_totals_.MergeFrom(from.egg_totals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      refill_uses_ = from.refill_uses_;
    }
    if (cached_has_bits & 0x00000002u) {
      video_doubler_uses_ = from.video_doubler_uses_;
    }
    if (cached_has_bits & 0x00000004u) {
      warp_1_uses_ = from.warp_1_uses_;
    }
    if (cached_has_bits & 0x00000008u) {
      warp_8_uses_ = from.warp_8_uses_;
    }
    if (cached_has_bits & 0x00000010u) {
      drone_takedowns_ = from.drone_takedowns_;
    }
    if (cached_has_bits & 0x00000020u) {
      unlimited_chickens_uses_ = from.unlimited_chickens_uses_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_prestiges_ = from.num_prestiges_;
    }
    if (cached_has_bits & 0x00000080u) {
      drone_takedowns_elite_ = from.drone_takedowns_elite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_piggy_breaks_ = from.num_piggy_breaks_;
    }
    if (cached_has_bits & 0x00000200u) {
      iap_packs_purchased_ = from.iap_packs_purchased_;
    }
    if (cached_has_bits & 0x00000400u) {
      boosts_used_ = from.boosts_used_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_piggy_filled_realtime_ = from.time_piggy_filled_realtime_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_piggy_full_gametime_ = from.time_piggy_full_gametime_;
    }
    if (cached_has_bits & 0x00002000u) {
      lost_piggy_increments_ = from.lost_piggy_increments_;
    }
    if (cached_has_bits & 0x00004000u) {
      piggy_full_ = from.piggy_full_;
    }
    if (cached_has_bits & 0x00008000u) {
      piggy_found_full_ = from.piggy_found_full_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Stats::CopyFrom(const Backup_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Stats::IsInitialized() const {
  return true;
}

void Backup_Stats::InternalSwap(Backup_Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  egg_totals_old_.InternalSwap(&other->egg_totals_old_);
  egg_totals_.InternalSwap(&other->egg_totals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Stats, piggy_found_full_)
      + sizeof(Backup_Stats::piggy_found_full_)
      - PROTOBUF_FIELD_OFFSET(Backup_Stats, refill_uses_)>(
          reinterpret_cast<char*>(&refill_uses_),
          reinterpret_cast<char*>(&other->refill_uses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Game::InitAsDefaultInstance() {
}
class Backup_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Game>()._has_bits_);
  static void set_has_current_farm(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_egg_reached(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_golden_eggs_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_golden_eggs_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uncliamed_golden_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unclaimed_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_soul_eggs_d(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_unclaimed_soul_eggs_d(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_eggs_of_prophecy(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_unclaimed_eggs_of_prophecy(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_shell_scripts_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_shell_scripts_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_unclaimed_shell_scripts(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_prestige_cash_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prestige_soul_boost_cash(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_lifetime_cash_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_piggy_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_piggy_full_alert_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_permit_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hyperloop_station(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_next_daily_gift_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_daily_gift_collected_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_daily_gifts_collected(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_last_news_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_current_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_multiplier_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_long_idle_notification_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_long_idle_notification_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_long_idle_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_time_cheats_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_force_elite_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_new_player_event_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

Backup_Game::Backup_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  epic_research_(arena),
  news_(arena),
  achievements_(arena),
  max_farm_size_reached_(arena),
  egg_medal_level_(arena),
  boosts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Game)
}
Backup_Game::Backup_Game(const Backup_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      epic_research_(from.epic_research_),
      news_(from.news_),
      achievements_(from.achievements_),
      max_farm_size_reached_(from.max_farm_size_reached_),
      egg_medal_level_(from.egg_medal_level_),
      boosts_(from.boosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&golden_eggs_earned_, &from.golden_eggs_earned_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_egg_reached_) -
    reinterpret_cast<char*>(&golden_eggs_earned_)) + sizeof(max_egg_reached_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Game)
}

void Backup_Game::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_Game_ei_2eproto.base);
  ::memset(&golden_eggs_earned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unclaimed_shell_scripts_) -
      reinterpret_cast<char*>(&golden_eggs_earned_)) + sizeof(unclaimed_shell_scripts_));
  max_egg_reached_ = 1;
}

Backup_Game::~Backup_Game() {
  // @@protoc_insertion_point(destructor:ei.Backup.Game)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Game::ArenaDtor(void* object) {
  Backup_Game* _this = reinterpret_cast< Backup_Game* >(object);
  (void)_this;
}
void Backup_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Game& Backup_Game::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Game_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epic_research_.Clear();
  news_.Clear();
  achievements_.Clear();
  max_farm_size_reached_.Clear();
  egg_medal_level_.Clear();
  boosts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&golden_eggs_earned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_news_time_) -
        reinterpret_cast<char*>(&golden_eggs_earned_)) + sizeof(last_news_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&current_multiplier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unclaimed_eggs_of_prophecy_) -
        reinterpret_cast<char*>(&current_multiplier_)) + sizeof(unclaimed_eggs_of_prophecy_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&current_farm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_elite_contracts_) -
        reinterpret_cast<char*>(&current_farm_)) + sizeof(force_elite_contracts_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&total_time_cheats_detected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unclaimed_shell_scripts_) -
        reinterpret_cast<char*>(&total_time_cheats_detected_)) + sizeof(unclaimed_shell_scripts_));
  }
  max_egg_reached_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Egg max_egg_reached = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_max_egg_reached(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 golden_eggs_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_golden_eggs_earned(&_has_bits_);
          golden_eggs_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 golden_eggs_spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_golden_eggs_spent(&_has_bits_);
          golden_eggs_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 soul_eggs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_soul_eggs(&_has_bits_);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double prestige_cash_earned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_prestige_cash_earned(&_has_bits_);
          prestige_cash_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lifetime_cash_earned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lifetime_cash_earned(&_has_bits_);
          lifetime_cash_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 piggy_bank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_piggy_bank(&_has_bits_);
          piggy_bank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 permit_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_permit_level(&_has_bits_);
          permit_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ResearchItem epic_research = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epic_research(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double next_daily_gift_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_next_daily_gift_time(&_has_bits_);
          next_daily_gift_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.NewsHeadline news = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_news(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double last_news_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_last_news_time(&_has_bits_);
          last_news_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_multiplier = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_current_multiplier(&_has_bits_);
          current_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_multiplier_expiration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_current_multiplier_expiration(&_has_bits_);
          current_multiplier_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.AchievementInfo achievements = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 uncliamed_golden_eggs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_uncliamed_golden_eggs(&_has_bits_);
          uncliamed_golden_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unclaimed_soul_eggs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_unclaimed_soul_eggs(&_has_bits_);
          unclaimed_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 max_farm_size_reached = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_farm_size_reached(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_max_farm_size_reached(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 egg_medal_level = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_egg_medal_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_egg_medal_level(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_daily_gift_collected_day = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_last_daily_gift_collected_day(&_has_bits_);
          last_daily_gift_collected_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_farm = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_current_farm(&_has_bits_);
          current_farm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 eggs_of_prophecy = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_eggs_of_prophecy(&_has_bits_);
          eggs_of_prophecy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unclaimed_eggs_of_prophecy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_unclaimed_eggs_of_prophecy(&_has_bits_);
          unclaimed_eggs_of_prophecy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool long_idle_notification_set = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_long_idle_notification_set(&_has_bits_);
          long_idle_notification_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double long_idle_notification_threshold = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_long_idle_notification_threshold(&_has_bits_);
          long_idle_notification_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double long_idle_reward = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_long_idle_reward(&_has_bits_);
          long_idle_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_daily_gifts_collected = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_num_daily_gifts_collected(&_has_bits_);
          num_daily_gifts_collected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hyperloop_station = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_hyperloop_station(&_has_bits_);
          hyperloop_station_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.OwnedBoost boosts = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_boosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool piggy_full_alert_shown = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_piggy_full_alert_shown(&_has_bits_);
          piggy_full_alert_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_time_cheats_detected = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_total_time_cheats_detected(&_has_bits_);
          total_time_cheats_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double prestige_soul_boost_cash = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_prestige_soul_boost_cash(&_has_bits_);
          prestige_soul_boost_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs_d = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soul_eggs_d(&_has_bits_);
          soul_eggs_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unclaimed_soul_eggs_d = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_unclaimed_soul_eggs_d(&_has_bits_);
          unclaimed_soul_eggs_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool force_elite_contracts = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_force_elite_contracts(&_has_bits_);
          force_elite_contracts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double new_player_event_end_time = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_new_player_event_end_time(&_has_bits_);
          new_player_event_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 shell_scripts_earned = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shell_scripts_earned(&_has_bits_);
          shell_scripts_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 shell_scripts_spent = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_shell_scripts_spent(&_has_bits_);
          shell_scripts_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unclaimed_shell_scripts = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_unclaimed_shell_scripts(&_has_bits_);
          unclaimed_shell_scripts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Game::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional .ei.Egg max_egg_reached = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_max_egg_reached(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 golden_eggs_earned = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_golden_eggs_earned(), target);
  }

  // optional uint64 golden_eggs_spent = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_golden_eggs_spent(), target);
  }

  // optional uint64 soul_eggs = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_soul_eggs(), target);
  }

  // optional double prestige_cash_earned = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_prestige_cash_earned(), target);
  }

  // optional double lifetime_cash_earned = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lifetime_cash_earned(), target);
  }

  // optional uint64 piggy_bank = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_piggy_bank(), target);
  }

  // optional uint32 permit_level = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_permit_level(), target);
  }

  // repeated .ei.Backup.ResearchItem epic_research = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epic_research_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_epic_research(i), target, stream);
  }

  // optional double next_daily_gift_time = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_next_daily_gift_time(), target);
  }

  // repeated .ei.Backup.NewsHeadline news = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_news_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_news(i), target, stream);
  }

  // optional double last_news_time = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_last_news_time(), target);
  }

  // optional double current_multiplier = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_current_multiplier(), target);
  }

  // optional double current_multiplier_expiration = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_current_multiplier_expiration(), target);
  }

  // repeated .ei.Backup.AchievementInfo achievements = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_achievements(i), target, stream);
  }

  // optional uint64 uncliamed_golden_eggs = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_uncliamed_golden_eggs(), target);
  }

  // optional uint64 unclaimed_soul_eggs = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_unclaimed_soul_eggs(), target);
  }

  // repeated uint64 max_farm_size_reached = 18;
  for (int i = 0, n = this->_internal_max_farm_size_reached_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_max_farm_size_reached(i), target);
  }

  // repeated uint32 egg_medal_level = 19;
  for (int i = 0, n = this->_internal_egg_medal_level_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_egg_medal_level(i), target);
  }

  // optional uint32 last_daily_gift_collected_day = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_last_daily_gift_collected_day(), target);
  }

  // optional uint32 current_farm = 22 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_current_farm(), target);
  }

  // optional uint64 eggs_of_prophecy = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_eggs_of_prophecy(), target);
  }

  // optional uint64 unclaimed_eggs_of_prophecy = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_unclaimed_eggs_of_prophecy(), target);
  }

  // optional bool long_idle_notification_set = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_long_idle_notification_set(), target);
  }

  // optional double long_idle_notification_threshold = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_long_idle_notification_threshold(), target);
  }

  // optional double long_idle_reward = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_long_idle_reward(), target);
  }

  // optional uint32 num_daily_gifts_collected = 28;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_num_daily_gifts_collected(), target);
  }

  // optional bool hyperloop_station = 29;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_hyperloop_station(), target);
  }

  // repeated .ei.Backup.OwnedBoost boosts = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_boosts(i), target, stream);
  }

  // optional bool piggy_full_alert_shown = 31;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_piggy_full_alert_shown(), target);
  }

  // optional uint32 total_time_cheats_detected = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_total_time_cheats_detected(), target);
  }

  // optional double prestige_soul_boost_cash = 33;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_prestige_soul_boost_cash(), target);
  }

  // optional double soul_eggs_d = 34;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_soul_eggs_d(), target);
  }

  // optional double unclaimed_soul_eggs_d = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_unclaimed_soul_eggs_d(), target);
  }

  // optional bool force_elite_contracts = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_force_elite_contracts(), target);
  }

  // optional double new_player_event_end_time = 37;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_new_player_event_end_time(), target);
  }

  // optional uint64 shell_scripts_earned = 38;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(38, this->_internal_shell_scripts_earned(), target);
  }

  // optional uint64 shell_scripts_spent = 39;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(39, this->_internal_shell_scripts_spent(), target);
  }

  // optional uint64 unclaimed_shell_scripts = 40;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_unclaimed_shell_scripts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Game)
  return target;
}

size_t Backup_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Game)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Backup.ResearchItem epic_research = 9;
  total_size += 1UL * this->_internal_epic_research_size();
  for (const auto& msg : this->epic_research_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Backup.NewsHeadline news = 11;
  total_size += 1UL * this->_internal_news_size();
  for (const auto& msg : this->news_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Backup.AchievementInfo achievements = 15;
  total_size += 1UL * this->_internal_achievements_size();
  for (const auto& msg : this->achievements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 max_farm_size_reached = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->max_farm_size_reached_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_farm_size_reached_size());
    total_size += data_size;
  }

  // repeated uint32 egg_medal_level = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->egg_medal_level_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_egg_medal_level_size());
    total_size += data_size;
  }

  // repeated .ei.Backup.OwnedBoost boosts = 30;
  total_size += 2UL * this->_internal_boosts_size();
  for (const auto& msg : this->boosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 golden_eggs_earned = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_golden_eggs_earned());
    }

    // optional uint64 golden_eggs_spent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_golden_eggs_spent());
    }

    // optional uint64 soul_eggs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_soul_eggs());
    }

    // optional double prestige_cash_earned = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double lifetime_cash_earned = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 piggy_bank = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_piggy_bank());
    }

    // optional double next_daily_gift_time = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double last_news_time = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double current_multiplier = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double current_multiplier_expiration = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 permit_level = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_permit_level());
    }

    // optional uint32 last_daily_gift_collected_day = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_daily_gift_collected_day());
    }

    // optional uint64 uncliamed_golden_eggs = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uncliamed_golden_eggs());
    }

    // optional uint64 unclaimed_soul_eggs = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unclaimed_soul_eggs());
    }

    // optional uint64 eggs_of_prophecy = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_eggs_of_prophecy());
    }

    // optional uint64 unclaimed_eggs_of_prophecy = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unclaimed_eggs_of_prophecy());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 current_farm = 22 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_farm());
    }

    // optional uint32 num_daily_gifts_collected = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_daily_gifts_collected());
    }

    // optional double long_idle_notification_threshold = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double long_idle_reward = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool piggy_full_alert_shown = 31;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool hyperloop_station = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool long_idle_notification_set = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool force_elite_contracts = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 total_time_cheats_detected = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_time_cheats_detected());
    }

    // optional double prestige_soul_boost_cash = 33;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double soul_eggs_d = 34;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double unclaimed_soul_eggs_d = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double new_player_event_end_time = 37;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional uint64 shell_scripts_earned = 38;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shell_scripts_earned());
    }

    // optional uint64 shell_scripts_spent = 39;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shell_scripts_spent());
    }

    // optional uint64 unclaimed_shell_scripts = 40;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unclaimed_shell_scripts());
    }

  }
  // optional .ei.Egg max_egg_reached = 1;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_max_egg_reached());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Game* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Game)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Game)
    MergeFrom(*source);
  }
}

void Backup_Game::MergeFrom(const Backup_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  epic_research_.MergeFrom(from.epic_research_);
  news_.MergeFrom(from.news_);
  achievements_.MergeFrom(from.achievements_);
  max_farm_size_reached_.MergeFrom(from.max_farm_size_reached_);
  egg_medal_level_.MergeFrom(from.egg_medal_level_);
  boosts_.MergeFrom(from.boosts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      golden_eggs_earned_ = from.golden_eggs_earned_;
    }
    if (cached_has_bits & 0x00000002u) {
      golden_eggs_spent_ = from.golden_eggs_spent_;
    }
    if (cached_has_bits & 0x00000004u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000008u) {
      prestige_cash_earned_ = from.prestige_cash_earned_;
    }
    if (cached_has_bits & 0x00000010u) {
      lifetime_cash_earned_ = from.lifetime_cash_earned_;
    }
    if (cached_has_bits & 0x00000020u) {
      piggy_bank_ = from.piggy_bank_;
    }
    if (cached_has_bits & 0x00000040u) {
      next_daily_gift_time_ = from.next_daily_gift_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_news_time_ = from.last_news_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      current_multiplier_ = from.current_multiplier_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_multiplier_expiration_ = from.current_multiplier_expiration_;
    }
    if (cached_has_bits & 0x00000400u) {
      permit_level_ = from.permit_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      last_daily_gift_collected_day_ = from.last_daily_gift_collected_day_;
    }
    if (cached_has_bits & 0x00001000u) {
      uncliamed_golden_eggs_ = from.uncliamed_golden_eggs_;
    }
    if (cached_has_bits & 0x00002000u) {
      unclaimed_soul_eggs_ = from.unclaimed_soul_eggs_;
    }
    if (cached_has_bits & 0x00004000u) {
      eggs_of_prophecy_ = from.eggs_of_prophecy_;
    }
    if (cached_has_bits & 0x00008000u) {
      unclaimed_eggs_of_prophecy_ = from.unclaimed_eggs_of_prophecy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      current_farm_ = from.current_farm_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_daily_gifts_collected_ = from.num_daily_gifts_collected_;
    }
    if (cached_has_bits & 0x00040000u) {
      long_idle_notification_threshold_ = from.long_idle_notification_threshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      long_idle_reward_ = from.long_idle_reward_;
    }
    if (cached_has_bits & 0x00100000u) {
      piggy_full_alert_shown_ = from.piggy_full_alert_shown_;
    }
    if (cached_has_bits & 0x00200000u) {
      hyperloop_station_ = from.hyperloop_station_;
    }
    if (cached_has_bits & 0x00400000u) {
      long_idle_notification_set_ = from.long_idle_notification_set_;
    }
    if (cached_has_bits & 0x00800000u) {
      force_elite_contracts_ = from.force_elite_contracts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      total_time_cheats_detected_ = from.total_time_cheats_detected_;
    }
    if (cached_has_bits & 0x02000000u) {
      prestige_soul_boost_cash_ = from.prestige_soul_boost_cash_;
    }
    if (cached_has_bits & 0x04000000u) {
      soul_eggs_d_ = from.soul_eggs_d_;
    }
    if (cached_has_bits & 0x08000000u) {
      unclaimed_soul_eggs_d_ = from.unclaimed_soul_eggs_d_;
    }
    if (cached_has_bits & 0x10000000u) {
      new_player_event_end_time_ = from.new_player_event_end_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      shell_scripts_earned_ = from.shell_scripts_earned_;
    }
    if (cached_has_bits & 0x40000000u) {
      shell_scripts_spent_ = from.shell_scripts_spent_;
    }
    if (cached_has_bits & 0x80000000u) {
      unclaimed_shell_scripts_ = from.unclaimed_shell_scripts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_max_egg_reached()) {
    _internal_set_max_egg_reached(from._internal_max_egg_reached());
  }
}

void Backup_Game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Game::CopyFrom(const Backup_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Game::IsInitialized() const {
  return true;
}

void Backup_Game::InternalSwap(Backup_Game* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  epic_research_.InternalSwap(&other->epic_research_);
  news_.InternalSwap(&other->news_);
  achievements_.InternalSwap(&other->achievements_);
  max_farm_size_reached_.InternalSwap(&other->max_farm_size_reached_);
  egg_medal_level_.InternalSwap(&other->egg_medal_level_);
  boosts_.InternalSwap(&other->boosts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Game, unclaimed_shell_scripts_)
      + sizeof(Backup_Game::unclaimed_shell_scripts_)
      - PROTOBUF_FIELD_OFFSET(Backup_Game, golden_eggs_earned_)>(
          reinterpret_cast<char*>(&golden_eggs_earned_),
          reinterpret_cast<char*>(&other->golden_eggs_earned_));
  swap(max_egg_reached_, other->max_egg_reached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Game::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Artifacts::InitAsDefaultInstance() {
  ::ei::_Backup_Artifacts_default_instance_._instance.get_mutable()->item_being_infused_ = const_cast< ::ei::ArtifactInventoryItem*>(
      ::ei::ArtifactInventoryItem::internal_default_instance());
  ::ei::_Backup_Artifacts_default_instance_._instance.get_mutable()->spec_being_infused_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class Backup_Artifacts::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Artifacts>()._has_bits_);
  static void set_has_infusing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ei::ArtifactInventoryItem& item_being_infused(const Backup_Artifacts* msg);
  static void set_has_item_being_infused(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ArtifactSpec& spec_being_infused(const Backup_Artifacts* msg);
  static void set_has_spec_being_infused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_egg_type_infusing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_infusing_eggs_required(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eggs_infused(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flow_percentage_artifacts(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fueling_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tank_filling_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tank_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_fueled_ship(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inventory_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_crafting_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_intro_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_infusing_enabled_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::ei::ArtifactInventoryItem&
Backup_Artifacts::_Internal::item_being_infused(const Backup_Artifacts* msg) {
  return *msg->item_being_infused_;
}
const ::ei::ArtifactSpec&
Backup_Artifacts::_Internal::spec_being_infused(const Backup_Artifacts* msg) {
  return *msg->spec_being_infused_;
}
Backup_Artifacts::Backup_Artifacts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tank_fuels_(arena),
  tank_limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Artifacts)
}
Backup_Artifacts::Backup_Artifacts(const Backup_Artifacts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tank_fuels_(from.tank_fuels_),
      tank_limits_(from.tank_limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_being_infused()) {
    item_being_infused_ = new ::ei::ArtifactInventoryItem(*from.item_being_infused_);
  } else {
    item_being_infused_ = nullptr;
  }
  if (from._internal_has_spec_being_infused()) {
    spec_being_infused_ = new ::ei::ArtifactSpec(*from.spec_being_infused_);
  } else {
    spec_being_infused_ = nullptr;
  }
  ::memcpy(&infusing_eggs_required_, &from.infusing_eggs_required_,
    static_cast<size_t>(reinterpret_cast<char*>(&infusing_enabled_deprecated_) -
    reinterpret_cast<char*>(&infusing_eggs_required_)) + sizeof(infusing_enabled_deprecated_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Artifacts)
}

void Backup_Artifacts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_Artifacts_ei_2eproto.base);
  ::memset(&item_being_infused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tank_level_) -
      reinterpret_cast<char*>(&item_being_infused_)) + sizeof(tank_level_));
  flow_percentage_artifacts_ = 0.5;
  egg_type_infusing_ = 1;
  fueling_enabled_ = true;
  infusing_enabled_deprecated_ = true;
}

Backup_Artifacts::~Backup_Artifacts() {
  // @@protoc_insertion_point(destructor:ei.Backup.Artifacts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Artifacts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_being_infused_;
  if (this != internal_default_instance()) delete spec_being_infused_;
}

void Backup_Artifacts::ArenaDtor(void* object) {
  Backup_Artifacts* _this = reinterpret_cast< Backup_Artifacts* >(object);
  (void)_this;
}
void Backup_Artifacts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Artifacts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Artifacts& Backup_Artifacts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Artifacts_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Artifacts::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Artifacts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tank_fuels_.Clear();
  tank_limits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(item_being_infused_ != nullptr);
      item_being_infused_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_being_infused_ != nullptr);
      spec_being_infused_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&infusing_eggs_required_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&infusing_eggs_required_)) + sizeof(enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&intro_shown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tank_level_) -
        reinterpret_cast<char*>(&intro_shown_)) + sizeof(tank_level_));
    flow_percentage_artifacts_ = 0.5;
    egg_type_infusing_ = 1;
    fueling_enabled_ = true;
    infusing_enabled_deprecated_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Artifacts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool infusing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_infusing(&has_bits);
          infusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactInventoryItem item_being_infused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_being_infused(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Egg egg_type_infusing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg_type_infusing(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double infusing_eggs_required = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_infusing_eggs_required(&has_bits);
          infusing_eggs_required_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double eggs_infused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_eggs_infused(&has_bits);
          eggs_infused_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double flow_percentage_artifacts = 6 [default = 0.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_flow_percentage_artifacts(&has_bits);
          flow_percentage_artifacts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool fueling_enabled = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fueling_enabled(&has_bits);
          fueling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool infusing_enabled_DEPRECATED = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_infusing_enabled_deprecated(&has_bits);
          infusing_enabled_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo.Spaceship last_fueled_ship = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Spaceship_IsValid(val))) {
            _internal_set_last_fueled_ship(static_cast<::ei::MissionInfo_Spaceship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double inventory_score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_inventory_score(&has_bits);
          inventory_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool intro_shown = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_intro_shown(&has_bits);
          intro_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec spec_being_infused = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec_being_infused(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tank_filling_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tank_filling_enabled(&has_bits);
          tank_filling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tank_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tank_level(&has_bits);
          tank_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double tank_fuels = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_tank_fuels(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<129>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_tank_fuels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double crafting_xp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_crafting_xp(&has_bits);
          crafting_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double tank_limits = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_tank_limits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<145>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_tank_limits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Artifacts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Artifacts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool infusing = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_infusing(), target);
  }

  // optional .ei.ArtifactInventoryItem item_being_infused = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_being_infused(this), target, stream);
  }

  // optional .ei.Egg egg_type_infusing = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_egg_type_infusing(), target);
  }

  // optional double infusing_eggs_required = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_infusing_eggs_required(), target);
  }

  // optional double eggs_infused = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_eggs_infused(), target);
  }

  // optional double flow_percentage_artifacts = 6 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_flow_percentage_artifacts(), target);
  }

  // optional bool fueling_enabled = 7 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_fueling_enabled(), target);
  }

  // optional bool infusing_enabled_DEPRECATED = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_infusing_enabled_deprecated(), target);
  }

  // optional .ei.MissionInfo.Spaceship last_fueled_ship = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_last_fueled_ship(), target);
  }

  // optional double inventory_score = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_inventory_score(), target);
  }

  // optional bool enabled = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enabled(), target);
  }

  // optional bool intro_shown = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_intro_shown(), target);
  }

  // optional .ei.ArtifactSpec spec_being_infused = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::spec_being_infused(this), target, stream);
  }

  // optional bool tank_filling_enabled = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_tank_filling_enabled(), target);
  }

  // optional uint32 tank_level = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tank_level(), target);
  }

  // repeated double tank_fuels = 16;
  for (int i = 0, n = this->_internal_tank_fuels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_tank_fuels(i), target);
  }

  // optional double crafting_xp = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_crafting_xp(), target);
  }

  // repeated double tank_limits = 18;
  for (int i = 0, n = this->_internal_tank_limits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_tank_limits(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Artifacts)
  return target;
}

size_t Backup_Artifacts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Artifacts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double tank_fuels = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tank_fuels_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tank_fuels_size());
    total_size += data_size;
  }

  // repeated double tank_limits = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tank_limits_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tank_limits_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ei.ArtifactInventoryItem item_being_infused = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_being_infused_);
    }

    // optional .ei.ArtifactSpec spec_being_infused = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_being_infused_);
    }

    // optional double infusing_eggs_required = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double eggs_infused = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .ei.MissionInfo.Spaceship last_fueled_ship = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_last_fueled_ship());
    }

    // optional bool infusing = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool tank_filling_enabled = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool intro_shown = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional double inventory_score = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double crafting_xp = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional uint32 tank_level = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tank_level());
    }

    // optional double flow_percentage_artifacts = 6 [default = 0.5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional .ei.Egg egg_type_infusing = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg_type_infusing());
    }

    // optional bool fueling_enabled = 7 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool infusing_enabled_DEPRECATED = 8 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Artifacts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Artifacts)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Artifacts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Artifacts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Artifacts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Artifacts)
    MergeFrom(*source);
  }
}

void Backup_Artifacts::MergeFrom(const Backup_Artifacts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Artifacts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tank_fuels_.MergeFrom(from.tank_fuels_);
  tank_limits_.MergeFrom(from.tank_limits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item_being_infused()->::ei::ArtifactInventoryItem::MergeFrom(from._internal_item_being_infused());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec_being_infused()->::ei::ArtifactSpec::MergeFrom(from._internal_spec_being_infused());
    }
    if (cached_has_bits & 0x00000004u) {
      infusing_eggs_required_ = from.infusing_eggs_required_;
    }
    if (cached_has_bits & 0x00000008u) {
      eggs_infused_ = from.eggs_infused_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_fueled_ship_ = from.last_fueled_ship_;
    }
    if (cached_has_bits & 0x00000020u) {
      infusing_ = from.infusing_;
    }
    if (cached_has_bits & 0x00000040u) {
      tank_filling_enabled_ = from.tank_filling_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      intro_shown_ = from.intro_shown_;
    }
    if (cached_has_bits & 0x00000200u) {
      inventory_score_ = from.inventory_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      crafting_xp_ = from.crafting_xp_;
    }
    if (cached_has_bits & 0x00000800u) {
      tank_level_ = from.tank_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      flow_percentage_artifacts_ = from.flow_percentage_artifacts_;
    }
    if (cached_has_bits & 0x00002000u) {
      egg_type_infusing_ = from.egg_type_infusing_;
    }
    if (cached_has_bits & 0x00004000u) {
      fueling_enabled_ = from.fueling_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      infusing_enabled_deprecated_ = from.infusing_enabled_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Artifacts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Artifacts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Artifacts::CopyFrom(const Backup_Artifacts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Artifacts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Artifacts::IsInitialized() const {
  return true;
}

void Backup_Artifacts::InternalSwap(Backup_Artifacts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tank_fuels_.InternalSwap(&other->tank_fuels_);
  tank_limits_.InternalSwap(&other->tank_limits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Artifacts, tank_level_)
      + sizeof(Backup_Artifacts::tank_level_)
      - PROTOBUF_FIELD_OFFSET(Backup_Artifacts, item_being_infused_)>(
          reinterpret_cast<char*>(&item_being_infused_),
          reinterpret_cast<char*>(&other->item_being_infused_));
  swap(flow_percentage_artifacts_, other->flow_percentage_artifacts_);
  swap(egg_type_infusing_, other->egg_type_infusing_);
  swap(fueling_enabled_, other->fueling_enabled_);
  swap(infusing_enabled_deprecated_, other->infusing_enabled_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Artifacts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Shells::InitAsDefaultInstance() {
}
class Backup_Shells::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Shells>()._has_bits_);
  static void set_has_intro_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contracts_intro_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_Shells::Backup_Shells(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  num_new_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Shells)
}
Backup_Shells::Backup_Shells(const Backup_Shells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      num_new_(from.num_new_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&intro_alert_, &from.intro_alert_,
    static_cast<size_t>(reinterpret_cast<char*>(&contracts_intro_alert_) -
    reinterpret_cast<char*>(&intro_alert_)) + sizeof(contracts_intro_alert_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Shells)
}

void Backup_Shells::SharedCtor() {
  ::memset(&intro_alert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracts_intro_alert_) -
      reinterpret_cast<char*>(&intro_alert_)) + sizeof(contracts_intro_alert_));
}

Backup_Shells::~Backup_Shells() {
  // @@protoc_insertion_point(destructor:ei.Backup.Shells)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Shells::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Shells::ArenaDtor(void* object) {
  Backup_Shells* _this = reinterpret_cast< Backup_Shells* >(object);
  (void)_this;
}
void Backup_Shells::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Shells::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Shells& Backup_Shells::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Shells_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Shells::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Shells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_new_.Clear();
  ::memset(&intro_alert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracts_intro_alert_) -
      reinterpret_cast<char*>(&intro_alert_)) + sizeof(contracts_intro_alert_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Shells::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool intro_alert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_intro_alert(&has_bits);
          intro_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_intro_alert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_contracts_intro_alert(&has_bits);
          contracts_intro_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 num_new = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num_new(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_num_new(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Shells::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Shells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool intro_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_intro_alert(), target);
  }

  // optional bool contracts_intro_alert = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_contracts_intro_alert(), target);
  }

  // repeated int32 num_new = 3;
  for (int i = 0, n = this->_internal_num_new_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_new(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Shells)
  return target;
}

size_t Backup_Shells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Shells)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 num_new = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->num_new_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_new_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool intro_alert = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool contracts_intro_alert = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Shells::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Shells)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Shells* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Shells>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Shells)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Shells)
    MergeFrom(*source);
  }
}

void Backup_Shells::MergeFrom(const Backup_Shells& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Shells)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num_new_.MergeFrom(from.num_new_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      intro_alert_ = from.intro_alert_;
    }
    if (cached_has_bits & 0x00000002u) {
      contracts_intro_alert_ = from.contracts_intro_alert_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Shells::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Shells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Shells::CopyFrom(const Backup_Shells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Shells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Shells::IsInitialized() const {
  return true;
}

void Backup_Shells::InternalSwap(Backup_Shells* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  num_new_.InternalSwap(&other->num_new_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Shells, contracts_intro_alert_)
      + sizeof(Backup_Shells::contracts_intro_alert_)
      - PROTOBUF_FIELD_OFFSET(Backup_Shells, intro_alert_)>(
          reinterpret_cast<char*>(&intro_alert_),
          reinterpret_cast<char*>(&other->intro_alert_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Shells::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Simulation::InitAsDefaultInstance() {
}
class Backup_Simulation::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Simulation>()._has_bits_);
  static void set_has_egg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_farm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cash_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cash_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unclaimed_cash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_step_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_chickens(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_chickens_unsettled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_chickens_running(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_eggs_laid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_eggs_shipped(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_eggs_paid_for(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_silos_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hatchery_population(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_cash_boost_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_time_cheats_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_time_cheat_debt(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_boost_tokens_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_boost_tokens_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_boost_tokens_given(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_unclaimed_boost_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gametime_until_next_boost_token(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

Backup_Simulation::Backup_Simulation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  habs_(arena),
  hab_population_(arena),
  hab_population_indound_(arena),
  hab_incubator_popuplation_(arena),
  vehicles_(arena),
  common_research_(arena),
  train_length_(arena),
  active_boosts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Simulation)
}
Backup_Simulation::Backup_Simulation(const Backup_Simulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      habs_(from.habs_),
      hab_population_(from.hab_population_),
      hab_population_indound_(from.hab_population_indound_),
      hab_incubator_popuplation_(from.hab_incubator_popuplation_),
      vehicles_(from.vehicles_),
      common_research_(from.common_research_),
      train_length_(from.train_length_),
      active_boosts_(from.active_boosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_id()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  ::memcpy(&cash_earned_, &from.cash_earned_,
    static_cast<size_t>(reinterpret_cast<char*>(&farm_type_) -
    reinterpret_cast<char*>(&cash_earned_)) + sizeof(farm_type_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Simulation)
}

void Backup_Simulation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_Simulation_ei_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cash_earned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_cash_boost_time_) -
      reinterpret_cast<char*>(&cash_earned_)) + sizeof(last_cash_boost_time_));
  egg_type_ = 1;
  farm_type_ = 1;
}

Backup_Simulation::~Backup_Simulation() {
  // @@protoc_insertion_point(destructor:ei.Backup.Simulation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Simulation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_Simulation::ArenaDtor(void* object) {
  Backup_Simulation* _this = reinterpret_cast< Backup_Simulation* >(object);
  (void)_this;
}
void Backup_Simulation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Simulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Simulation& Backup_Simulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Simulation_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Simulation::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Simulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  habs_.Clear();
  hab_population_.Clear();
  hab_population_indound_.Clear();
  hab_incubator_popuplation_.Clear();
  vehicles_.Clear();
  common_research_.Clear();
  train_length_.Clear();
  active_boosts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contract_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&cash_earned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_chickens_running_) -
        reinterpret_cast<char*>(&cash_earned_)) + sizeof(num_chickens_running_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&eggs_laid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boost_tokens_spent_) -
        reinterpret_cast<char*>(&eggs_laid_)) + sizeof(boost_tokens_spent_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&unclaimed_boost_tokens_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_cash_boost_time_) -
        reinterpret_cast<char*>(&unclaimed_boost_tokens_)) + sizeof(last_cash_boost_time_));
    egg_type_ = 1;
    farm_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Simulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Egg egg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg_type(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double cash_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cash_earned(&has_bits);
          cash_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cash_spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cash_spent(&has_bits);
          cash_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unclaimed_cash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_unclaimed_cash(&has_bits);
          unclaimed_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double last_step_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_last_step_time(&has_bits);
          last_step_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_chickens = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_chickens(&has_bits);
          num_chickens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_chickens_unsettled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_chickens_unsettled(&has_bits);
          num_chickens_unsettled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_chickens_running = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_chickens_running(&has_bits);
          num_chickens_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eggs_laid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_eggs_laid(&has_bits);
          eggs_laid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double eggs_paid_for = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_eggs_paid_for(&has_bits);
          eggs_paid_for_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 silos_owned = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_silos_owned(&has_bits);
          silos_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 habs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_habs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_habs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 hab_population = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hab_population(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hab_population(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 hab_population_indound = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hab_population_indound(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hab_population_indound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double hab_incubator_popuplation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hab_incubator_popuplation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<121>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_hab_incubator_popuplation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double hatchery_population = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_hatchery_population(&has_bits);
          hatchery_population_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vehicles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vehicles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vehicles(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ResearchItem common_research = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_common_research(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.FarmType farm_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::FarmType_IsValid(val))) {
            _internal_set_farm_type(static_cast<::ei::FarmType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string contract_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.Simulation.contract_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 train_length = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_train_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_train_length(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ActiveBoost active_boosts = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_active_boosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 time_cheats_detected = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_time_cheats_detected(&has_bits);
          time_cheats_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_cheat_debt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_time_cheat_debt(&has_bits);
          time_cheat_debt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_received = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_boost_tokens_received(&has_bits);
          boost_tokens_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_spent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_boost_tokens_spent(&has_bits);
          boost_tokens_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unclaimed_boost_tokens = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_unclaimed_boost_tokens(&has_bits);
          unclaimed_boost_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_given = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_boost_tokens_given(&has_bits);
          boost_tokens_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gametime_until_next_boost_token = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_gametime_until_next_boost_token(&has_bits);
          gametime_until_next_boost_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double eggs_shipped = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_eggs_shipped(&has_bits);
          eggs_shipped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double last_cash_boost_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_last_cash_boost_time(&has_bits);
          last_cash_boost_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Simulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Simulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Egg egg_type = 1;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_egg_type(), target);
  }

  // optional double cash_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cash_earned(), target);
  }

  // optional double cash_spent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cash_spent(), target);
  }

  // optional double unclaimed_cash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_unclaimed_cash(), target);
  }

  // optional double last_step_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_last_step_time(), target);
  }

  // optional uint64 num_chickens = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_num_chickens(), target);
  }

  // optional uint64 num_chickens_unsettled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_num_chickens_unsettled(), target);
  }

  // optional uint64 num_chickens_running = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_num_chickens_running(), target);
  }

  // optional double eggs_laid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_eggs_laid(), target);
  }

  // optional double eggs_paid_for = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_eggs_paid_for(), target);
  }

  // optional uint32 silos_owned = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_silos_owned(), target);
  }

  // repeated uint32 habs = 12;
  for (int i = 0, n = this->_internal_habs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_habs(i), target);
  }

  // repeated uint64 hab_population = 13;
  for (int i = 0, n = this->_internal_hab_population_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_hab_population(i), target);
  }

  // repeated uint64 hab_population_indound = 14;
  for (int i = 0, n = this->_internal_hab_population_indound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_hab_population_indound(i), target);
  }

  // repeated double hab_incubator_popuplation = 15;
  for (int i = 0, n = this->_internal_hab_incubator_popuplation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_hab_incubator_popuplation(i), target);
  }

  // optional double hatchery_population = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_hatchery_population(), target);
  }

  // repeated uint32 vehicles = 17;
  for (int i = 0, n = this->_internal_vehicles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_vehicles(i), target);
  }

  // repeated .ei.Backup.ResearchItem common_research = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_common_research_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_common_research(i), target, stream);
  }

  // optional .ei.FarmType farm_type = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_farm_type(), target);
  }

  // optional string contract_id = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.Simulation.contract_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_contract_id(), target);
  }

  // repeated uint32 train_length = 21;
  for (int i = 0, n = this->_internal_train_length_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_train_length(i), target);
  }

  // repeated .ei.Backup.ActiveBoost active_boosts = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_boosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_active_boosts(i), target, stream);
  }

  // optional uint32 time_cheats_detected = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_time_cheats_detected(), target);
  }

  // optional double time_cheat_debt = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_time_cheat_debt(), target);
  }

  // optional uint32 boost_tokens_received = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_boost_tokens_received(), target);
  }

  // optional uint32 boost_tokens_spent = 26;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_boost_tokens_spent(), target);
  }

  // optional uint32 unclaimed_boost_tokens = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_unclaimed_boost_tokens(), target);
  }

  // optional uint32 boost_tokens_given = 28;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_boost_tokens_given(), target);
  }

  // optional double gametime_until_next_boost_token = 29;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_gametime_until_next_boost_token(), target);
  }

  // optional double eggs_shipped = 30;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_eggs_shipped(), target);
  }

  // optional double last_cash_boost_time = 31;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_last_cash_boost_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Simulation)
  return target;
}

size_t Backup_Simulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Simulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 habs = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->habs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_habs_size());
    total_size += data_size;
  }

  // repeated uint64 hab_population = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->hab_population_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hab_population_size());
    total_size += data_size;
  }

  // repeated uint64 hab_population_indound = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->hab_population_indound_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hab_population_indound_size());
    total_size += data_size;
  }

  // repeated double hab_incubator_popuplation = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hab_incubator_popuplation_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hab_incubator_popuplation_size());
    total_size += data_size;
  }

  // repeated uint32 vehicles = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vehicles_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vehicles_size());
    total_size += data_size;
  }

  // repeated .ei.Backup.ResearchItem common_research = 18;
  total_size += 2UL * this->_internal_common_research_size();
  for (const auto& msg : this->common_research_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 train_length = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->train_length_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_train_length_size());
    total_size += data_size;
  }

  // repeated .ei.Backup.ActiveBoost active_boosts = 22;
  total_size += 2UL * this->_internal_active_boosts_size();
  for (const auto& msg : this->active_boosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_id = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_id());
    }

    // optional double cash_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double cash_spent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double unclaimed_cash = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double last_step_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 num_chickens = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_chickens());
    }

    // optional uint64 num_chickens_unsettled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_chickens_unsettled());
    }

    // optional uint64 num_chickens_running = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_chickens_running());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double eggs_laid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double eggs_paid_for = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double hatchery_population = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional uint32 silos_owned = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_silos_owned());
    }

    // optional uint32 time_cheats_detected = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_cheats_detected());
    }

    // optional double time_cheat_debt = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional uint32 boost_tokens_received = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_received());
    }

    // optional uint32 boost_tokens_spent = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_spent());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 unclaimed_boost_tokens = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unclaimed_boost_tokens());
    }

    // optional uint32 boost_tokens_given = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_given());
    }

    // optional double gametime_until_next_boost_token = 29;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double eggs_shipped = 30;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double last_cash_boost_time = 31;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional .ei.Egg egg_type = 1;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg_type());
    }

    // optional .ei.FarmType farm_type = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_farm_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Simulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Simulation)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Simulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Simulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Simulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Simulation)
    MergeFrom(*source);
  }
}

void Backup_Simulation::MergeFrom(const Backup_Simulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Simulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  habs_.MergeFrom(from.habs_);
  hab_population_.MergeFrom(from.hab_population_);
  hab_population_indound_.MergeFrom(from.hab_population_indound_);
  hab_incubator_popuplation_.MergeFrom(from.hab_incubator_popuplation_);
  vehicles_.MergeFrom(from.vehicles_);
  common_research_.MergeFrom(from.common_research_);
  train_length_.MergeFrom(from.train_length_);
  active_boosts_.MergeFrom(from.active_boosts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_id(from._internal_contract_id());
    }
    if (cached_has_bits & 0x00000002u) {
      cash_earned_ = from.cash_earned_;
    }
    if (cached_has_bits & 0x00000004u) {
      cash_spent_ = from.cash_spent_;
    }
    if (cached_has_bits & 0x00000008u) {
      unclaimed_cash_ = from.unclaimed_cash_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_step_time_ = from.last_step_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_chickens_ = from.num_chickens_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_chickens_unsettled_ = from.num_chickens_unsettled_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_chickens_running_ = from.num_chickens_running_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      eggs_laid_ = from.eggs_laid_;
    }
    if (cached_has_bits & 0x00000200u) {
      eggs_paid_for_ = from.eggs_paid_for_;
    }
    if (cached_has_bits & 0x00000400u) {
      hatchery_population_ = from.hatchery_population_;
    }
    if (cached_has_bits & 0x00000800u) {
      silos_owned_ = from.silos_owned_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_cheats_detected_ = from.time_cheats_detected_;
    }
    if (cached_has_bits & 0x00002000u) {
      time_cheat_debt_ = from.time_cheat_debt_;
    }
    if (cached_has_bits & 0x00004000u) {
      boost_tokens_received_ = from.boost_tokens_received_;
    }
    if (cached_has_bits & 0x00008000u) {
      boost_tokens_spent_ = from.boost_tokens_spent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      unclaimed_boost_tokens_ = from.unclaimed_boost_tokens_;
    }
    if (cached_has_bits & 0x00020000u) {
      boost_tokens_given_ = from.boost_tokens_given_;
    }
    if (cached_has_bits & 0x00040000u) {
      gametime_until_next_boost_token_ = from.gametime_until_next_boost_token_;
    }
    if (cached_has_bits & 0x00080000u) {
      eggs_shipped_ = from.eggs_shipped_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_cash_boost_time_ = from.last_cash_boost_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      egg_type_ = from.egg_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      farm_type_ = from.farm_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Simulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Simulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Simulation::CopyFrom(const Backup_Simulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Simulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Simulation::IsInitialized() const {
  return true;
}

void Backup_Simulation::InternalSwap(Backup_Simulation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  habs_.InternalSwap(&other->habs_);
  hab_population_.InternalSwap(&other->hab_population_);
  hab_population_indound_.InternalSwap(&other->hab_population_indound_);
  hab_incubator_popuplation_.InternalSwap(&other->hab_incubator_popuplation_);
  vehicles_.InternalSwap(&other->vehicles_);
  common_research_.InternalSwap(&other->common_research_);
  train_length_.InternalSwap(&other->train_length_);
  active_boosts_.InternalSwap(&other->active_boosts_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Simulation, last_cash_boost_time_)
      + sizeof(Backup_Simulation::last_cash_boost_time_)
      - PROTOBUF_FIELD_OFFSET(Backup_Simulation, cash_earned_)>(
          reinterpret_cast<char*>(&cash_earned_),
          reinterpret_cast<char*>(&other->cash_earned_));
  swap(egg_type_, other->egg_type_);
  swap(farm_type_, other->farm_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Simulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Mission::InitAsDefaultInstance() {
}
class Backup_Mission::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Mission>()._has_bits_);
  static void set_has_current_mission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reference_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_Mission::Backup_Mission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missions_(arena),
  current_missions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Mission)
}
Backup_Mission::Backup_Mission(const Backup_Mission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      missions_(from.missions_),
      current_missions_(from.current_missions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_mission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_mission()) {
    current_mission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_mission(),
      GetArena());
  }
  reference_value_ = from.reference_value_;
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Mission)
}

void Backup_Mission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_Mission_ei_2eproto.base);
  current_mission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_value_ = 0;
}

Backup_Mission::~Backup_Mission() {
  // @@protoc_insertion_point(destructor:ei.Backup.Mission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Mission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  current_mission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_Mission::ArenaDtor(void* object) {
  Backup_Mission* _this = reinterpret_cast< Backup_Mission* >(object);
  (void)_this;
}
void Backup_Mission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Mission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Mission& Backup_Mission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Mission_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Mission::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Mission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missions_.Clear();
  current_missions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    current_mission_.ClearNonDefaultToEmpty();
  }
  reference_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Mission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string current_mission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_mission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.Mission.current_mission");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reference_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_reference_value(&has_bits);
          reference_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.MissionInfo missions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string current_missions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_current_missions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.Mission.current_missions");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Mission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Mission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_mission = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_mission().data(), static_cast<int>(this->_internal_current_mission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.Mission.current_mission");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_mission(), target);
  }

  // optional double reference_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_reference_value(), target);
  }

  // repeated .ei.Backup.MissionInfo missions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_missions(i), target, stream);
  }

  // repeated string current_missions = 4;
  for (int i = 0, n = this->_internal_current_missions_size(); i < n; i++) {
    const auto& s = this->_internal_current_missions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.Mission.current_missions");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Mission)
  return target;
}

size_t Backup_Mission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Mission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Backup.MissionInfo missions = 3;
  total_size += 1UL * this->_internal_missions_size();
  for (const auto& msg : this->missions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string current_missions = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(current_missions_.size());
  for (int i = 0, n = current_missions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      current_missions_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string current_mission = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_mission());
    }

    // optional double reference_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Mission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Mission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Mission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Mission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Mission)
    MergeFrom(*source);
  }
}

void Backup_Mission::MergeFrom(const Backup_Mission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missions_.MergeFrom(from.missions_);
  current_missions_.MergeFrom(from.current_missions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_current_mission(from._internal_current_mission());
    }
    if (cached_has_bits & 0x00000002u) {
      reference_value_ = from.reference_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Mission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Mission::CopyFrom(const Backup_Mission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Mission::IsInitialized() const {
  return true;
}

void Backup_Mission::InternalSwap(Backup_Mission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  missions_.InternalSwap(&other->missions_);
  current_missions_.InternalSwap(&other->current_missions_);
  current_mission_.Swap(&other->current_mission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reference_value_, other->reference_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Mission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_Misc::InitAsDefaultInstance() {
}
class Backup_Misc::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_Misc>()._has_bits_);
  static void set_has_chicken_btn_pref_big(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_hatchery_refill_given(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_share_farm_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_last_share_swarm_farm_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_last_share_swarm_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_last_prestige_alert_soul_eggs_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_friend_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friend_rank_pop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_global_rank_pop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenges_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_trophy_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ar_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_contracts_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_contracts_alert_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_coop_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_coop_alert_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_switch_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_egg_of_prophecy_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_boost_token_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_soul_egg_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_backup_reminder_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_max_button_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mission_target_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

Backup_Misc::Backup_Misc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.Misc)
}
Backup_Misc::Backup_Misc(const Backup_Misc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&friend_rank_, &from.friend_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_prestige_alert_soul_eggs_deprecated_) -
    reinterpret_cast<char*>(&friend_rank_)) + sizeof(last_prestige_alert_soul_eggs_deprecated_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.Misc)
}

void Backup_Misc::SharedCtor() {
  ::memset(&friend_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_target_alert_) -
      reinterpret_cast<char*>(&friend_rank_)) + sizeof(mission_target_alert_));
  last_share_farm_value_ = 10000000;
  last_share_swarm_farm_value_ = 10000000;
  last_share_swarm_size_ = 140;
  last_prestige_alert_soul_eggs_deprecated_ = PROTOBUF_ULONGLONG(45);
}

Backup_Misc::~Backup_Misc() {
  // @@protoc_insertion_point(destructor:ei.Backup.Misc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_Misc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Backup_Misc::ArenaDtor(void* object) {
  Backup_Misc* _this = reinterpret_cast< Backup_Misc* >(object);
  (void)_this;
}
void Backup_Misc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_Misc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_Misc& Backup_Misc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_Misc_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_Misc::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&friend_rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trophy_alert_) -
        reinterpret_cast<char*>(&friend_rank_)) + sizeof(trophy_alert_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ar_alert_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boost_token_alert_) -
        reinterpret_cast<char*>(&ar_alert_)) + sizeof(boost_token_alert_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&soul_egg_alert_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mission_target_alert_) -
        reinterpret_cast<char*>(&soul_egg_alert_)) + sizeof(mission_target_alert_));
    last_share_farm_value_ = 10000000;
    last_share_swarm_farm_value_ = 10000000;
    last_share_swarm_size_ = 140;
    last_prestige_alert_soul_eggs_deprecated_ = PROTOBUF_ULONGLONG(45);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_Misc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool chicken_btn_pref_big = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chicken_btn_pref_big(&has_bits);
          chicken_btn_pref_big_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool free_hatchery_refill_given = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_free_hatchery_refill_given(&has_bits);
          free_hatchery_refill_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_share_farm_value = 3 [default = 10000000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_last_share_farm_value(&has_bits);
          last_share_farm_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double last_share_swarm_farm_value = 4 [default = 10000000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_last_share_swarm_farm_value(&has_bits);
          last_share_swarm_farm_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double last_share_swarm_size = 5 [default = 140];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_last_share_swarm_size(&has_bits);
          last_share_swarm_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 friend_rank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_friend_rank(&has_bits);
          friend_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 friend_rank_pop = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_friend_rank_pop(&has_bits);
          friend_rank_pop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 global_rank = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_global_rank(&has_bits);
          global_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 global_rank_pop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_global_rank_pop(&has_bits);
          global_rank_pop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_prestige_alert_soul_eggs_DEPRECATED = 10 [default = 45];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_last_prestige_alert_soul_eggs_deprecated(&has_bits);
          last_prestige_alert_soul_eggs_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trophy_alert = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_trophy_alert(&has_bits);
          trophy_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ar_alert = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ar_alert(&has_bits);
          ar_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_alert = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_contracts_alert(&has_bits);
          contracts_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coop_alert = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_coop_alert(&has_bits);
          coop_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool switch_alert = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_switch_alert(&has_bits);
          switch_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool egg_of_prophecy_alert = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_egg_of_prophecy_alert(&has_bits);
          egg_of_prophecy_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boost_token_alert = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_boost_token_alert(&has_bits);
          boost_token_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool soul_egg_alert = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_soul_egg_alert(&has_bits);
          soul_egg_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool backup_reminder_alert = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_backup_reminder_alert(&has_bits);
          backup_reminder_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool challenges_alert = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_challenges_alert(&has_bits);
          challenges_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_alert_v2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_contracts_alert_v2(&has_bits);
          contracts_alert_v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coop_alert_v2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_coop_alert_v2(&has_bits);
          coop_alert_v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool max_button_alert = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_max_button_alert(&has_bits);
          max_button_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mission_target_alert = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_mission_target_alert(&has_bits);
          mission_target_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_Misc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool chicken_btn_pref_big = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_chicken_btn_pref_big(), target);
  }

  // optional bool free_hatchery_refill_given = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_free_hatchery_refill_given(), target);
  }

  // optional double last_share_farm_value = 3 [default = 10000000];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_last_share_farm_value(), target);
  }

  // optional double last_share_swarm_farm_value = 4 [default = 10000000];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_share_swarm_farm_value(), target);
  }

  // optional double last_share_swarm_size = 5 [default = 140];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_last_share_swarm_size(), target);
  }

  // optional uint64 friend_rank = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_friend_rank(), target);
  }

  // optional uint64 friend_rank_pop = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_friend_rank_pop(), target);
  }

  // optional uint64 global_rank = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_global_rank(), target);
  }

  // optional uint64 global_rank_pop = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_global_rank_pop(), target);
  }

  // optional uint64 last_prestige_alert_soul_eggs_DEPRECATED = 10 [default = 45];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_last_prestige_alert_soul_eggs_deprecated(), target);
  }

  // optional bool trophy_alert = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_trophy_alert(), target);
  }

  // optional bool ar_alert = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_ar_alert(), target);
  }

  // optional bool contracts_alert = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_contracts_alert(), target);
  }

  // optional bool coop_alert = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_coop_alert(), target);
  }

  // optional bool switch_alert = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_switch_alert(), target);
  }

  // optional bool egg_of_prophecy_alert = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_egg_of_prophecy_alert(), target);
  }

  // optional bool boost_token_alert = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_boost_token_alert(), target);
  }

  // optional bool soul_egg_alert = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_soul_egg_alert(), target);
  }

  // optional bool backup_reminder_alert = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_backup_reminder_alert(), target);
  }

  // optional bool challenges_alert = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_challenges_alert(), target);
  }

  // optional bool contracts_alert_v2 = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_contracts_alert_v2(), target);
  }

  // optional bool coop_alert_v2 = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_coop_alert_v2(), target);
  }

  // optional bool max_button_alert = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_max_button_alert(), target);
  }

  // optional bool mission_target_alert = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_mission_target_alert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.Misc)
  return target;
}

size_t Backup_Misc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.Misc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 friend_rank = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_friend_rank());
    }

    // optional uint64 friend_rank_pop = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_friend_rank_pop());
    }

    // optional uint64 global_rank = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_global_rank());
    }

    // optional uint64 global_rank_pop = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_global_rank_pop());
    }

    // optional bool chicken_btn_pref_big = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool free_hatchery_refill_given = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool challenges_alert = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool trophy_alert = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool ar_alert = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool contracts_alert = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool contracts_alert_v2 = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool coop_alert = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool coop_alert_v2 = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool switch_alert = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool egg_of_prophecy_alert = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool boost_token_alert = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool soul_egg_alert = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool backup_reminder_alert = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool max_button_alert = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool mission_target_alert = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional double last_share_farm_value = 3 [default = 10000000];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double last_share_swarm_farm_value = 4 [default = 10000000];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional double last_share_swarm_size = 5 [default = 140];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional uint64 last_prestige_alert_soul_eggs_DEPRECATED = 10 [default = 45];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_prestige_alert_soul_eggs_deprecated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_Misc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_Misc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_Misc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.Misc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.Misc)
    MergeFrom(*source);
  }
}

void Backup_Misc::MergeFrom(const Backup_Misc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      friend_rank_ = from.friend_rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      friend_rank_pop_ = from.friend_rank_pop_;
    }
    if (cached_has_bits & 0x00000004u) {
      global_rank_ = from.global_rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_rank_pop_ = from.global_rank_pop_;
    }
    if (cached_has_bits & 0x00000010u) {
      chicken_btn_pref_big_ = from.chicken_btn_pref_big_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_hatchery_refill_given_ = from.free_hatchery_refill_given_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenges_alert_ = from.challenges_alert_;
    }
    if (cached_has_bits & 0x00000080u) {
      trophy_alert_ = from.trophy_alert_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ar_alert_ = from.ar_alert_;
    }
    if (cached_has_bits & 0x00000200u) {
      contracts_alert_ = from.contracts_alert_;
    }
    if (cached_has_bits & 0x00000400u) {
      contracts_alert_v2_ = from.contracts_alert_v2_;
    }
    if (cached_has_bits & 0x00000800u) {
      coop_alert_ = from.coop_alert_;
    }
    if (cached_has_bits & 0x00001000u) {
      coop_alert_v2_ = from.coop_alert_v2_;
    }
    if (cached_has_bits & 0x00002000u) {
      switch_alert_ = from.switch_alert_;
    }
    if (cached_has_bits & 0x00004000u) {
      egg_of_prophecy_alert_ = from.egg_of_prophecy_alert_;
    }
    if (cached_has_bits & 0x00008000u) {
      boost_token_alert_ = from.boost_token_alert_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      soul_egg_alert_ = from.soul_egg_alert_;
    }
    if (cached_has_bits & 0x00020000u) {
      backup_reminder_alert_ = from.backup_reminder_alert_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_button_alert_ = from.max_button_alert_;
    }
    if (cached_has_bits & 0x00080000u) {
      mission_target_alert_ = from.mission_target_alert_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_share_farm_value_ = from.last_share_farm_value_;
    }
    if (cached_has_bits & 0x00200000u) {
      last_share_swarm_farm_value_ = from.last_share_swarm_farm_value_;
    }
    if (cached_has_bits & 0x00400000u) {
      last_share_swarm_size_ = from.last_share_swarm_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      last_prestige_alert_soul_eggs_deprecated_ = from.last_prestige_alert_soul_eggs_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_Misc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_Misc::CopyFrom(const Backup_Misc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_Misc::IsInitialized() const {
  return true;
}

void Backup_Misc::InternalSwap(Backup_Misc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_Misc, mission_target_alert_)
      + sizeof(Backup_Misc::mission_target_alert_)
      - PROTOBUF_FIELD_OFFSET(Backup_Misc, friend_rank_)>(
          reinterpret_cast<char*>(&friend_rank_),
          reinterpret_cast<char*>(&other->friend_rank_));
  swap(last_share_farm_value_, other->last_share_farm_value_);
  swap(last_share_swarm_farm_value_, other->last_share_swarm_farm_value_);
  swap(last_share_swarm_size_, other->last_share_swarm_size_);
  swap(last_prestige_alert_soul_eggs_deprecated_, other->last_prestige_alert_soul_eggs_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_Misc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_ResearchItem::InitAsDefaultInstance() {
}
class Backup_ResearchItem::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_ResearchItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_ResearchItem::Backup_ResearchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.ResearchItem)
}
Backup_ResearchItem::Backup_ResearchItem(const Backup_ResearchItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:ei.Backup.ResearchItem)
}

void Backup_ResearchItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_ResearchItem_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
}

Backup_ResearchItem::~Backup_ResearchItem() {
  // @@protoc_insertion_point(destructor:ei.Backup.ResearchItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_ResearchItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_ResearchItem::ArenaDtor(void* object) {
  Backup_ResearchItem* _this = reinterpret_cast< Backup_ResearchItem* >(object);
  (void)_this;
}
void Backup_ResearchItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_ResearchItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_ResearchItem& Backup_ResearchItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_ResearchItem_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_ResearchItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.ResearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_ResearchItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.ResearchItem.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_ResearchItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.ResearchItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.ResearchItem.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.ResearchItem)
  return target;
}

size_t Backup_ResearchItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.ResearchItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_ResearchItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.ResearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_ResearchItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_ResearchItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.ResearchItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.ResearchItem)
    MergeFrom(*source);
  }
}

void Backup_ResearchItem::MergeFrom(const Backup_ResearchItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.ResearchItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_ResearchItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.ResearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_ResearchItem::CopyFrom(const Backup_ResearchItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.ResearchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_ResearchItem::IsInitialized() const {
  return true;
}

void Backup_ResearchItem::InternalSwap(Backup_ResearchItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_ResearchItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_NewsHeadline::InitAsDefaultInstance() {
}
class Backup_NewsHeadline::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_NewsHeadline>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_NewsHeadline::Backup_NewsHeadline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.NewsHeadline)
}
Backup_NewsHeadline::Backup_NewsHeadline(const Backup_NewsHeadline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  read_ = from.read_;
  // @@protoc_insertion_point(copy_constructor:ei.Backup.NewsHeadline)
}

void Backup_NewsHeadline::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_NewsHeadline_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_ = false;
}

Backup_NewsHeadline::~Backup_NewsHeadline() {
  // @@protoc_insertion_point(destructor:ei.Backup.NewsHeadline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_NewsHeadline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_NewsHeadline::ArenaDtor(void* object) {
  Backup_NewsHeadline* _this = reinterpret_cast< Backup_NewsHeadline* >(object);
  (void)_this;
}
void Backup_NewsHeadline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_NewsHeadline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_NewsHeadline& Backup_NewsHeadline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_NewsHeadline_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_NewsHeadline::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.NewsHeadline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  read_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_NewsHeadline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.NewsHeadline.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_read(&has_bits);
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_NewsHeadline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.NewsHeadline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.NewsHeadline.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bool read = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.NewsHeadline)
  return target;
}

size_t Backup_NewsHeadline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.NewsHeadline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional bool read = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_NewsHeadline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.NewsHeadline)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_NewsHeadline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_NewsHeadline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.NewsHeadline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.NewsHeadline)
    MergeFrom(*source);
  }
}

void Backup_NewsHeadline::MergeFrom(const Backup_NewsHeadline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.NewsHeadline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      read_ = from.read_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_NewsHeadline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.NewsHeadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_NewsHeadline::CopyFrom(const Backup_NewsHeadline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.NewsHeadline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_NewsHeadline::IsInitialized() const {
  return true;
}

void Backup_NewsHeadline::InternalSwap(Backup_NewsHeadline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(read_, other->read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_NewsHeadline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_AchievementInfo::InitAsDefaultInstance() {
}
class Backup_AchievementInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_AchievementInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_AchievementInfo::Backup_AchievementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.AchievementInfo)
}
Backup_AchievementInfo::Backup_AchievementInfo(const Backup_AchievementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  achieved_ = from.achieved_;
  // @@protoc_insertion_point(copy_constructor:ei.Backup.AchievementInfo)
}

void Backup_AchievementInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_AchievementInfo_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  achieved_ = false;
}

Backup_AchievementInfo::~Backup_AchievementInfo() {
  // @@protoc_insertion_point(destructor:ei.Backup.AchievementInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_AchievementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_AchievementInfo::ArenaDtor(void* object) {
  Backup_AchievementInfo* _this = reinterpret_cast< Backup_AchievementInfo* >(object);
  (void)_this;
}
void Backup_AchievementInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_AchievementInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_AchievementInfo& Backup_AchievementInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_AchievementInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_AchievementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.AchievementInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  achieved_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_AchievementInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.AchievementInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool achieved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_achieved(&has_bits);
          achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_AchievementInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.AchievementInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.AchievementInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bool achieved = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_achieved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.AchievementInfo)
  return target;
}

size_t Backup_AchievementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.AchievementInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional bool achieved = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_AchievementInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.AchievementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_AchievementInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_AchievementInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.AchievementInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.AchievementInfo)
    MergeFrom(*source);
  }
}

void Backup_AchievementInfo::MergeFrom(const Backup_AchievementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.AchievementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      achieved_ = from.achieved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_AchievementInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.AchievementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_AchievementInfo::CopyFrom(const Backup_AchievementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.AchievementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_AchievementInfo::IsInitialized() const {
  return true;
}

void Backup_AchievementInfo::InternalSwap(Backup_AchievementInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(achieved_, other->achieved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_AchievementInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_ActiveBoost::InitAsDefaultInstance() {
}
class Backup_ActiveBoost::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_ActiveBoost>()._has_bits_);
  static void set_has_boost_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Backup_ActiveBoost::Backup_ActiveBoost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.ActiveBoost)
}
Backup_ActiveBoost::Backup_ActiveBoost(const Backup_ActiveBoost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_boost_id()) {
    boost_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boost_id(),
      GetArena());
  }
  ::memcpy(&time_remaining_, &from.time_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_value_) -
    reinterpret_cast<char*>(&time_remaining_)) + sizeof(reference_value_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.ActiveBoost)
}

void Backup_ActiveBoost::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_ActiveBoost_ei_2eproto.base);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_value_) -
      reinterpret_cast<char*>(&time_remaining_)) + sizeof(reference_value_));
}

Backup_ActiveBoost::~Backup_ActiveBoost() {
  // @@protoc_insertion_point(destructor:ei.Backup.ActiveBoost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_ActiveBoost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  boost_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_ActiveBoost::ArenaDtor(void* object) {
  Backup_ActiveBoost* _this = reinterpret_cast< Backup_ActiveBoost* >(object);
  (void)_this;
}
void Backup_ActiveBoost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_ActiveBoost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_ActiveBoost& Backup_ActiveBoost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_ActiveBoost_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_ActiveBoost::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.ActiveBoost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    boost_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&time_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_value_) -
        reinterpret_cast<char*>(&time_remaining_)) + sizeof(reference_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_ActiveBoost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string boost_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_boost_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.ActiveBoost.boost_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_time_remaining(&has_bits);
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reference_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reference_value(&has_bits);
          reference_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_ActiveBoost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.ActiveBoost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string boost_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boost_id().data(), static_cast<int>(this->_internal_boost_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.ActiveBoost.boost_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_boost_id(), target);
  }

  // optional double time_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_remaining(), target);
  }

  // optional double reference_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reference_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.ActiveBoost)
  return target;
}

size_t Backup_ActiveBoost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.ActiveBoost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string boost_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boost_id());
    }

    // optional double time_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reference_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_ActiveBoost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.ActiveBoost)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_ActiveBoost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_ActiveBoost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.ActiveBoost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.ActiveBoost)
    MergeFrom(*source);
  }
}

void Backup_ActiveBoost::MergeFrom(const Backup_ActiveBoost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.ActiveBoost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_boost_id(from._internal_boost_id());
    }
    if (cached_has_bits & 0x00000002u) {
      time_remaining_ = from.time_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      reference_value_ = from.reference_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_ActiveBoost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.ActiveBoost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_ActiveBoost::CopyFrom(const Backup_ActiveBoost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.ActiveBoost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_ActiveBoost::IsInitialized() const {
  return true;
}

void Backup_ActiveBoost::InternalSwap(Backup_ActiveBoost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boost_id_.Swap(&other->boost_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_ActiveBoost, reference_value_)
      + sizeof(Backup_ActiveBoost::reference_value_)
      - PROTOBUF_FIELD_OFFSET(Backup_ActiveBoost, time_remaining_)>(
          reinterpret_cast<char*>(&time_remaining_),
          reinterpret_cast<char*>(&other->time_remaining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_ActiveBoost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_OwnedBoost::InitAsDefaultInstance() {
}
class Backup_OwnedBoost::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_OwnedBoost>()._has_bits_);
  static void set_has_boost_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_OwnedBoost::Backup_OwnedBoost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.OwnedBoost)
}
Backup_OwnedBoost::Backup_OwnedBoost(const Backup_OwnedBoost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_boost_id()) {
    boost_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boost_id(),
      GetArena());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:ei.Backup.OwnedBoost)
}

void Backup_OwnedBoost::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_OwnedBoost_ei_2eproto.base);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

Backup_OwnedBoost::~Backup_OwnedBoost() {
  // @@protoc_insertion_point(destructor:ei.Backup.OwnedBoost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_OwnedBoost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  boost_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_OwnedBoost::ArenaDtor(void* object) {
  Backup_OwnedBoost* _this = reinterpret_cast< Backup_OwnedBoost* >(object);
  (void)_this;
}
void Backup_OwnedBoost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_OwnedBoost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_OwnedBoost& Backup_OwnedBoost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_OwnedBoost_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_OwnedBoost::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.OwnedBoost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    boost_id_.ClearNonDefaultToEmpty();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_OwnedBoost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string boost_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_boost_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.OwnedBoost.boost_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_OwnedBoost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.OwnedBoost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string boost_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boost_id().data(), static_cast<int>(this->_internal_boost_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.OwnedBoost.boost_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_boost_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.OwnedBoost)
  return target;
}

size_t Backup_OwnedBoost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.OwnedBoost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string boost_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boost_id());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_OwnedBoost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.OwnedBoost)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_OwnedBoost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_OwnedBoost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.OwnedBoost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.OwnedBoost)
    MergeFrom(*source);
  }
}

void Backup_OwnedBoost::MergeFrom(const Backup_OwnedBoost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.OwnedBoost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_boost_id(from._internal_boost_id());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_OwnedBoost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.OwnedBoost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_OwnedBoost::CopyFrom(const Backup_OwnedBoost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.OwnedBoost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_OwnedBoost::IsInitialized() const {
  return true;
}

void Backup_OwnedBoost::InternalSwap(Backup_OwnedBoost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boost_id_.Swap(&other->boost_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_OwnedBoost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup_MissionInfo::InitAsDefaultInstance() {
}
class Backup_MissionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup_MissionInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reference_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Backup_MissionInfo::Backup_MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup.MissionInfo)
}
Backup_MissionInfo::Backup_MissionInfo(const Backup_MissionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&reference_value_, &from.reference_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&reference_value_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup.MissionInfo)
}

void Backup_MissionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_MissionInfo_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reference_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&reference_value_)) + sizeof(completed_));
}

Backup_MissionInfo::~Backup_MissionInfo() {
  // @@protoc_insertion_point(destructor:ei.Backup.MissionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup_MissionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Backup_MissionInfo::ArenaDtor(void* object) {
  Backup_MissionInfo* _this = reinterpret_cast< Backup_MissionInfo* >(object);
  (void)_this;
}
void Backup_MissionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup_MissionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup_MissionInfo& Backup_MissionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_MissionInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup_MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&reference_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&reference_value_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup_MissionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.MissionInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reference_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reference_value(&has_bits);
          reference_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup_MissionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.MissionInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional bool completed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_completed(), target);
  }

  // optional double reference_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reference_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup.MissionInfo)
  return target;
}

size_t Backup_MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup.MissionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double reference_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool completed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup_MissionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup_MissionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup_MissionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup.MissionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup.MissionInfo)
    MergeFrom(*source);
  }
}

void Backup_MissionInfo::MergeFrom(const Backup_MissionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      reference_value_ = from.reference_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Backup_MissionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup_MissionInfo::CopyFrom(const Backup_MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup_MissionInfo::IsInitialized() const {
  return true;
}

void Backup_MissionInfo::InternalSwap(Backup_MissionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup_MissionInfo, completed_)
      + sizeof(Backup_MissionInfo::completed_)
      - PROTOBUF_FIELD_OFFSET(Backup_MissionInfo, reference_value_)>(
          reinterpret_cast<char*>(&reference_value_),
          reinterpret_cast<char*>(&other->reference_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup_MissionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Backup::InitAsDefaultInstance() {
  ::ei::_Backup_default_instance_._instance.get_mutable()->settings_ = const_cast< ::ei::Backup_Settings*>(
      ::ei::Backup_Settings::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->tutorial_ = const_cast< ::ei::Backup_Tutorial*>(
      ::ei::Backup_Tutorial::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->stats_ = const_cast< ::ei::Backup_Stats*>(
      ::ei::Backup_Stats::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->game_ = const_cast< ::ei::Backup_Game*>(
      ::ei::Backup_Game::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->artifacts_ = const_cast< ::ei::Backup_Artifacts*>(
      ::ei::Backup_Artifacts::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->shells_ = const_cast< ::ei::Backup_Shells*>(
      ::ei::Backup_Shells::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->sim_ = const_cast< ::ei::Backup_Simulation*>(
      ::ei::Backup_Simulation::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->mission_ = const_cast< ::ei::Backup_Mission*>(
      ::ei::Backup_Mission::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->misc_ = const_cast< ::ei::Backup_Misc*>(
      ::ei::Backup_Misc::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->contracts_ = const_cast< ::ei::MyContracts*>(
      ::ei::MyContracts::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->artifacts_db_ = const_cast< ::ei::ArtifactsDB*>(
      ::ei::ArtifactsDB::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->shell_db_ = const_cast< ::ei::ShellDB*>(
      ::ei::ShellDB::internal_default_instance());
  ::ei::_Backup_default_instance_._instance.get_mutable()->mail_state_ = const_cast< ::ei::MailState*>(
      ::ei::MailState::internal_default_instance());
}
class Backup::_Internal {
 public:
  using HasBits = decltype(std::declval<Backup>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_services_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_push_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_force_offer_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_force_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::ei::Backup_Settings& settings(const Backup* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ei::Backup_Tutorial& tutorial(const Backup* msg);
  static void set_has_tutorial(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ei::Backup_Stats& stats(const Backup* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ei::Backup_Game& game(const Backup* msg);
  static void set_has_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ei::Backup_Artifacts& artifacts(const Backup* msg);
  static void set_has_artifacts(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::ei::Backup_Shells& shells(const Backup* msg);
  static void set_has_shells(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::ei::Backup_Simulation& sim(const Backup* msg);
  static void set_has_sim(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ei::Backup_Mission& mission(const Backup* msg);
  static void set_has_mission(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::ei::Backup_Misc& misc(const Backup* msg);
  static void set_has_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::ei::MyContracts& contracts(const Backup* msg);
  static void set_has_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::ei::ArtifactsDB& artifacts_db(const Backup* msg);
  static void set_has_artifacts_db(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::ei::ShellDB& shell_db(const Backup* msg);
  static void set_has_shell_db(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::ei::MailState& mail_state(const Backup* msg);
  static void set_has_mail_state(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::ei::Backup_Settings&
Backup::_Internal::settings(const Backup* msg) {
  return *msg->settings_;
}
const ::ei::Backup_Tutorial&
Backup::_Internal::tutorial(const Backup* msg) {
  return *msg->tutorial_;
}
const ::ei::Backup_Stats&
Backup::_Internal::stats(const Backup* msg) {
  return *msg->stats_;
}
const ::ei::Backup_Game&
Backup::_Internal::game(const Backup* msg) {
  return *msg->game_;
}
const ::ei::Backup_Artifacts&
Backup::_Internal::artifacts(const Backup* msg) {
  return *msg->artifacts_;
}
const ::ei::Backup_Shells&
Backup::_Internal::shells(const Backup* msg) {
  return *msg->shells_;
}
const ::ei::Backup_Simulation&
Backup::_Internal::sim(const Backup* msg) {
  return *msg->sim_;
}
const ::ei::Backup_Mission&
Backup::_Internal::mission(const Backup* msg) {
  return *msg->mission_;
}
const ::ei::Backup_Misc&
Backup::_Internal::misc(const Backup* msg) {
  return *msg->misc_;
}
const ::ei::MyContracts&
Backup::_Internal::contracts(const Backup* msg) {
  return *msg->contracts_;
}
const ::ei::ArtifactsDB&
Backup::_Internal::artifacts_db(const Backup* msg) {
  return *msg->artifacts_db_;
}
const ::ei::ShellDB&
Backup::_Internal::shell_db(const Backup* msg) {
  return *msg->shell_db_;
}
const ::ei::MailState&
Backup::_Internal::mail_state(const Backup* msg) {
  return *msg->mail_state_;
}
Backup::Backup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  farms_(arena),
  read_mail_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Backup)
}
Backup::Backup(const Backup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      farms_(from.farms_),
      read_mail_ids_(from.read_mail_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_services_id()) {
    game_services_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_services_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  push_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_push_user_id()) {
    push_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_push_user_id(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::ei::Backup_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_tutorial()) {
    tutorial_ = new ::ei::Backup_Tutorial(*from.tutorial_);
  } else {
    tutorial_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::ei::Backup_Stats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  if (from._internal_has_game()) {
    game_ = new ::ei::Backup_Game(*from.game_);
  } else {
    game_ = nullptr;
  }
  if (from._internal_has_sim()) {
    sim_ = new ::ei::Backup_Simulation(*from.sim_);
  } else {
    sim_ = nullptr;
  }
  if (from._internal_has_mission()) {
    mission_ = new ::ei::Backup_Mission(*from.mission_);
  } else {
    mission_ = nullptr;
  }
  if (from._internal_has_misc()) {
    misc_ = new ::ei::Backup_Misc(*from.misc_);
  } else {
    misc_ = nullptr;
  }
  if (from._internal_has_contracts()) {
    contracts_ = new ::ei::MyContracts(*from.contracts_);
  } else {
    contracts_ = nullptr;
  }
  if (from._internal_has_artifacts()) {
    artifacts_ = new ::ei::Backup_Artifacts(*from.artifacts_);
  } else {
    artifacts_ = nullptr;
  }
  if (from._internal_has_artifacts_db()) {
    artifacts_db_ = new ::ei::ArtifactsDB(*from.artifacts_db_);
  } else {
    artifacts_db_ = nullptr;
  }
  if (from._internal_has_shell_db()) {
    shell_db_ = new ::ei::ShellDB(*from.shell_db_);
  } else {
    shell_db_ = nullptr;
  }
  if (from._internal_has_shells()) {
    shells_ = new ::ei::Backup_Shells(*from.shells_);
  } else {
    shells_ = nullptr;
  }
  if (from._internal_has_mail_state()) {
    mail_state_ = new ::ei::MailState(*from.mail_state_);
  } else {
    mail_state_ = nullptr;
  }
  ::memcpy(&approx_time_, &from.approx_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&approx_time_)) + sizeof(checksum_));
  // @@protoc_insertion_point(copy_constructor:ei.Backup)
}

void Backup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Backup_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(checksum_));
}

Backup::~Backup() {
  // @@protoc_insertion_point(destructor:ei.Backup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Backup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete tutorial_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete game_;
  if (this != internal_default_instance()) delete sim_;
  if (this != internal_default_instance()) delete mission_;
  if (this != internal_default_instance()) delete misc_;
  if (this != internal_default_instance()) delete contracts_;
  if (this != internal_default_instance()) delete artifacts_;
  if (this != internal_default_instance()) delete artifacts_db_;
  if (this != internal_default_instance()) delete shell_db_;
  if (this != internal_default_instance()) delete shells_;
  if (this != internal_default_instance()) delete mail_state_;
}

void Backup::ArenaDtor(void* object) {
  Backup* _this = reinterpret_cast< Backup* >(object);
  (void)_this;
}
void Backup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Backup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Backup& Backup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Backup_ei_2eproto.base);
  return *internal_default_instance();
}


void Backup::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  farms_.Clear();
  read_mail_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_services_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      push_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tutorial_ != nullptr);
      tutorial_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(game_ != nullptr);
      game_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(sim_ != nullptr);
      sim_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(mission_ != nullptr);
      mission_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(misc_ != nullptr);
      misc_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(contracts_ != nullptr);
      contracts_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(artifacts_ != nullptr);
      artifacts_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(artifacts_db_ != nullptr);
      artifacts_db_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(shell_db_ != nullptr);
      shell_db_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(shells_ != nullptr);
      shells_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(mail_state_ != nullptr);
      mail_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&approx_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_backup_) -
        reinterpret_cast<char*>(&approx_time_)) + sizeof(force_backup_));
  }
  checksum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Backup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double approx_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Settings settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Tutorial tutorial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tutorial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Stats stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Game game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Simulation sim = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Mission mission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Misc misc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_misc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.Simulation farms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_farms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.MyContracts contracts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contracts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Artifacts artifacts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_artifacts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactsDB artifacts_db = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_artifacts_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_services_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_game_services_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.game_services_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_offer_backup = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_force_offer_backup(&has_bits);
          force_offer_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_backup = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_force_backup(&has_bits);
          force_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string read_mail_ids = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_read_mail_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.read_mail_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB shell_db = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_shell_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup.Shells shells = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_shells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string push_user_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_push_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.push_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MailState mail_state = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 checksum = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_checksum(&has_bits);
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signature = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Backup.signature");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Backup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // optional double approx_time = 3;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_approx_time(), target);
  }

  // optional .ei.Backup.Settings settings = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::settings(this), target, stream);
  }

  // optional .ei.Backup.Tutorial tutorial = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tutorial(this), target, stream);
  }

  // optional .ei.Backup.Stats stats = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stats(this), target, stream);
  }

  // optional .ei.Backup.Game game = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::game(this), target, stream);
  }

  // optional .ei.Backup.Simulation sim = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sim(this), target, stream);
  }

  // optional .ei.Backup.Mission mission = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mission(this), target, stream);
  }

  // optional .ei.Backup.Misc misc = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::misc(this), target, stream);
  }

  // repeated .ei.Backup.Simulation farms = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_farms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_farms(i), target, stream);
  }

  // optional .ei.MyContracts contracts = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::contracts(this), target, stream);
  }

  // optional .ei.Backup.Artifacts artifacts = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::artifacts(this), target, stream);
  }

  // optional .ei.ArtifactsDB artifacts_db = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::artifacts_db(this), target, stream);
  }

  // optional string game_services_id = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_services_id().data(), static_cast<int>(this->_internal_game_services_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.game_services_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_game_services_id(), target);
  }

  // optional string device_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.device_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_device_id(), target);
  }

  // optional string ei_user_id = 18;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_ei_user_id(), target);
  }

  // optional bool force_offer_backup = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_force_offer_backup(), target);
  }

  // optional uint32 version = 21 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_version(), target);
  }

  // optional bool force_backup = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_force_backup(), target);
  }

  // repeated string read_mail_ids = 23;
  for (int i = 0, n = this->_internal_read_mail_ids_size(); i < n; i++) {
    const auto& s = this->_internal_read_mail_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.read_mail_ids");
    target = stream->WriteString(23, s, target);
  }

  // optional .ei.ShellDB shell_db = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::shell_db(this), target, stream);
  }

  // optional .ei.Backup.Shells shells = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::shells(this), target, stream);
  }

  // optional string push_user_id = 26;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_push_user_id().data(), static_cast<int>(this->_internal_push_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.push_user_id");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_push_user_id(), target);
  }

  // optional .ei.MailState mail_state = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::mail_state(this), target, stream);
  }

  // optional uint64 checksum = 100;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(100, this->_internal_checksum(), target);
  }

  // optional string signature = 101;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Backup.signature");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Backup)
  return target;
}

size_t Backup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Backup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Backup.Simulation farms = 12;
  total_size += 1UL * this->_internal_farms_size();
  for (const auto& msg : this->farms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string read_mail_ids = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(read_mail_ids_.size());
  for (int i = 0, n = read_mail_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      read_mail_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string game_services_id = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_services_id());
    }

    // optional string device_id = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional string ei_user_id = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional string push_user_id = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_push_user_id());
    }

    // optional string signature = 101;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional .ei.Backup.Settings settings = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ei.Backup.Tutorial tutorial = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tutorial_);
    }

    // optional .ei.Backup.Stats stats = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional .ei.Backup.Game game = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_);
    }

    // optional .ei.Backup.Simulation sim = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sim_);
    }

    // optional .ei.Backup.Mission mission = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mission_);
    }

    // optional .ei.Backup.Misc misc = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_);
    }

    // optional .ei.MyContracts contracts = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contracts_);
    }

    // optional .ei.Backup.Artifacts artifacts = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *artifacts_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .ei.ArtifactsDB artifacts_db = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *artifacts_db_);
    }

    // optional .ei.ShellDB shell_db = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shell_db_);
    }

    // optional .ei.Backup.Shells shells = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shells_);
    }

    // optional .ei.MailState mail_state = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mail_state_);
    }

    // optional double approx_time = 3;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional uint32 version = 21 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional bool force_offer_backup = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool force_backup = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  // optional uint64 checksum = 100;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_checksum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Backup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Backup)
  GOOGLE_DCHECK_NE(&from, this);
  const Backup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Backup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Backup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Backup)
    MergeFrom(*source);
  }
}

void Backup::MergeFrom(const Backup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Backup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  farms_.MergeFrom(from.farms_);
  read_mail_ids_.MergeFrom(from.read_mail_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_services_id(from._internal_game_services_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_push_user_id(from._internal_push_user_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_settings()->::ei::Backup_Settings::MergeFrom(from._internal_settings());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tutorial()->::ei::Backup_Tutorial::MergeFrom(from._internal_tutorial());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_stats()->::ei::Backup_Stats::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_game()->::ei::Backup_Game::MergeFrom(from._internal_game());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_sim()->::ei::Backup_Simulation::MergeFrom(from._internal_sim());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_mission()->::ei::Backup_Mission::MergeFrom(from._internal_mission());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_misc()->::ei::Backup_Misc::MergeFrom(from._internal_misc());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_contracts()->::ei::MyContracts::MergeFrom(from._internal_contracts());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_artifacts()->::ei::Backup_Artifacts::MergeFrom(from._internal_artifacts());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_artifacts_db()->::ei::ArtifactsDB::MergeFrom(from._internal_artifacts_db());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_shell_db()->::ei::ShellDB::MergeFrom(from._internal_shell_db());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_shells()->::ei::Backup_Shells::MergeFrom(from._internal_shells());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_mail_state()->::ei::MailState::MergeFrom(from._internal_mail_state());
    }
    if (cached_has_bits & 0x00100000u) {
      approx_time_ = from.approx_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00400000u) {
      force_offer_backup_ = from.force_offer_backup_;
    }
    if (cached_has_bits & 0x00800000u) {
      force_backup_ = from.force_backup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_checksum(from._internal_checksum());
  }
}

void Backup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backup::CopyFrom(const Backup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backup::IsInitialized() const {
  return true;
}

void Backup::InternalSwap(Backup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  farms_.InternalSwap(&other->farms_);
  read_mail_ids_.InternalSwap(&other->read_mail_ids_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_services_id_.Swap(&other->game_services_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  push_user_id_.Swap(&other->push_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Backup, checksum_)
      + sizeof(Backup::checksum_)
      - PROTOBUF_FIELD_OFFSET(Backup, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Backup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EggIncFirstContactRequest::InitAsDefaultInstance() {
  ::ei::_EggIncFirstContactRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class EggIncFirstContactRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EggIncFirstContactRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const EggIncFirstContactRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_services_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::BasicRequestInfo&
EggIncFirstContactRequest::_Internal::rinfo(const EggIncFirstContactRequest* msg) {
  return *msg->rinfo_;
}
EggIncFirstContactRequest::EggIncFirstContactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.EggIncFirstContactRequest)
}
EggIncFirstContactRequest::EggIncFirstContactRequest(const EggIncFirstContactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_services_id()) {
    game_services_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_services_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(platform_));
  // @@protoc_insertion_point(copy_constructor:ei.EggIncFirstContactRequest)
}

void EggIncFirstContactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EggIncFirstContactRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(platform_));
}

EggIncFirstContactRequest::~EggIncFirstContactRequest() {
  // @@protoc_insertion_point(destructor:ei.EggIncFirstContactRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EggIncFirstContactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void EggIncFirstContactRequest::ArenaDtor(void* object) {
  EggIncFirstContactRequest* _this = reinterpret_cast< EggIncFirstContactRequest* >(object);
  (void)_this;
}
void EggIncFirstContactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EggIncFirstContactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EggIncFirstContactRequest& EggIncFirstContactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EggIncFirstContactRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void EggIncFirstContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.EggIncFirstContactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      game_services_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platform_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(platform_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EggIncFirstContactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactRequest.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactRequest.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactRequest.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_services_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_game_services_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactRequest.game_services_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EggIncFirstContactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.EggIncFirstContactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional .ei.Platform platform = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_platform(), target);
  }

  // optional string ei_user_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactRequest.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ei_user_id(), target);
  }

  // optional string device_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_id(), target);
  }

  // optional string username = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactRequest.username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // optional string game_services_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_services_id().data(), static_cast<int>(this->_internal_game_services_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactRequest.game_services_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_game_services_id(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.EggIncFirstContactRequest)
  return target;
}

size_t EggIncFirstContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.EggIncFirstContactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string ei_user_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional string device_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional string username = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string game_services_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_services_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .ei.Platform platform = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EggIncFirstContactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.EggIncFirstContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EggIncFirstContactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EggIncFirstContactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.EggIncFirstContactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.EggIncFirstContactRequest)
    MergeFrom(*source);
  }
}

void EggIncFirstContactRequest::MergeFrom(const EggIncFirstContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.EggIncFirstContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_game_services_id(from._internal_game_services_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      platform_ = from.platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EggIncFirstContactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.EggIncFirstContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggIncFirstContactRequest::CopyFrom(const EggIncFirstContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.EggIncFirstContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggIncFirstContactRequest::IsInitialized() const {
  return true;
}

void EggIncFirstContactRequest::InternalSwap(EggIncFirstContactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_services_id_.Swap(&other->game_services_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EggIncFirstContactRequest, platform_)
      + sizeof(EggIncFirstContactRequest::platform_)
      - PROTOBUF_FIELD_OFFSET(EggIncFirstContactRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EggIncFirstContactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EggIncFirstContactResponse::InitAsDefaultInstance() {
  ::ei::_EggIncFirstContactResponse_default_instance_._instance.get_mutable()->backup_ = const_cast< ::ei::Backup*>(
      ::ei::Backup::internal_default_instance());
}
class EggIncFirstContactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EggIncFirstContactResponse>()._has_bits_);
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::Backup& backup(const EggIncFirstContactResponse* msg);
  static void set_has_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::Backup&
EggIncFirstContactResponse::_Internal::backup(const EggIncFirstContactResponse* msg) {
  return *msg->backup_;
}
EggIncFirstContactResponse::EggIncFirstContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_transferred_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.EggIncFirstContactResponse)
}
EggIncFirstContactResponse::EggIncFirstContactResponse(const EggIncFirstContactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ids_transferred_(from.ids_transferred_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_message()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  if (from._internal_has_backup()) {
    backup_ = new ::ei::Backup(*from.backup_);
  } else {
    backup_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:ei.EggIncFirstContactResponse)
}

void EggIncFirstContactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EggIncFirstContactResponse_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&backup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&backup_)) + sizeof(error_code_));
}

EggIncFirstContactResponse::~EggIncFirstContactResponse() {
  // @@protoc_insertion_point(destructor:ei.EggIncFirstContactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EggIncFirstContactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete backup_;
}

void EggIncFirstContactResponse::ArenaDtor(void* object) {
  EggIncFirstContactResponse* _this = reinterpret_cast< EggIncFirstContactResponse* >(object);
  (void)_this;
}
void EggIncFirstContactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EggIncFirstContactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EggIncFirstContactResponse& EggIncFirstContactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EggIncFirstContactResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void EggIncFirstContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.EggIncFirstContactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_transferred_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(backup_ != nullptr);
      backup_->Clear();
    }
  }
  error_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EggIncFirstContactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Backup backup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_backup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids_transferred = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids_transferred();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactResponse.ids_transferred");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 error_code = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncFirstContactResponse.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EggIncFirstContactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.EggIncFirstContactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Backup backup = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::backup(this), target, stream);
  }

  // optional string ei_user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ei_user_id(), target);
  }

  // repeated string ids_transferred = 3;
  for (int i = 0, n = this->_internal_ids_transferred_size(); i < n; i++) {
    const auto& s = this->_internal_ids_transferred(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactResponse.ids_transferred");
    target = stream->WriteString(3, s, target);
  }

  // optional uint32 error_code = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_error_code(), target);
  }

  // optional string error_message = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncFirstContactResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.EggIncFirstContactResponse)
  return target;
}

size_t EggIncFirstContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.EggIncFirstContactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids_transferred = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_transferred_.size());
  for (int i = 0, n = ids_transferred_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_transferred_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ei_user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional string error_message = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional .ei.Backup backup = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backup_);
    }

    // optional uint32 error_code = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EggIncFirstContactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.EggIncFirstContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EggIncFirstContactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EggIncFirstContactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.EggIncFirstContactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.EggIncFirstContactResponse)
    MergeFrom(*source);
  }
}

void EggIncFirstContactResponse::MergeFrom(const EggIncFirstContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.EggIncFirstContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_transferred_.MergeFrom(from.ids_transferred_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_backup()->::ei::Backup::MergeFrom(from._internal_backup());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EggIncFirstContactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.EggIncFirstContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggIncFirstContactResponse::CopyFrom(const EggIncFirstContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.EggIncFirstContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggIncFirstContactResponse::IsInitialized() const {
  return true;
}

void EggIncFirstContactResponse::InternalSwap(EggIncFirstContactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_transferred_.InternalSwap(&other->ids_transferred_);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EggIncFirstContactResponse, error_code_)
      + sizeof(EggIncFirstContactResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(EggIncFirstContactResponse, backup_)>(
          reinterpret_cast<char*>(&backup_),
          reinterpret_cast<char*>(&other->backup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EggIncFirstContactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EggIncAdConfig::InitAsDefaultInstance() {
}
class EggIncAdConfig::_Internal {
 public:
};

EggIncAdConfig::EggIncAdConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  network_priority_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.EggIncAdConfig)
}
EggIncAdConfig::EggIncAdConfig(const EggIncAdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      network_priority_(from.network_priority_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.EggIncAdConfig)
}

void EggIncAdConfig::SharedCtor() {
}

EggIncAdConfig::~EggIncAdConfig() {
  // @@protoc_insertion_point(destructor:ei.EggIncAdConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EggIncAdConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EggIncAdConfig::ArenaDtor(void* object) {
  EggIncAdConfig* _this = reinterpret_cast< EggIncAdConfig* >(object);
  (void)_this;
}
void EggIncAdConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EggIncAdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EggIncAdConfig& EggIncAdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EggIncAdConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void EggIncAdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.EggIncAdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_priority_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EggIncAdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.AdNetwork network_priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ei::AdNetwork_IsValid(val))) {
              _internal_add_network_priority(static_cast<::ei::AdNetwork>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_network_priority(), ptr, ctx, ::ei::AdNetwork_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EggIncAdConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.EggIncAdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.AdNetwork network_priority = 1;
  for (int i = 0, n = this->_internal_network_priority_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_network_priority(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.EggIncAdConfig)
  return target;
}

size_t EggIncAdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.EggIncAdConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.AdNetwork network_priority = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_network_priority_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_network_priority(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EggIncAdConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.EggIncAdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EggIncAdConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EggIncAdConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.EggIncAdConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.EggIncAdConfig)
    MergeFrom(*source);
  }
}

void EggIncAdConfig::MergeFrom(const EggIncAdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.EggIncAdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_priority_.MergeFrom(from.network_priority_);
}

void EggIncAdConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.EggIncAdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggIncAdConfig::CopyFrom(const EggIncAdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.EggIncAdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggIncAdConfig::IsInitialized() const {
  return true;
}

void EggIncAdConfig::InternalSwap(EggIncAdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  network_priority_.InternalSwap(&other->network_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EggIncAdConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DailyGiftInfo::InitAsDefaultInstance() {
}
class DailyGiftInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DailyGiftInfo>()._has_bits_);
  static void set_has_current_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_to_next_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DailyGiftInfo::DailyGiftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.DailyGiftInfo)
}
DailyGiftInfo::DailyGiftInfo(const DailyGiftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_to_next_day_, &from.seconds_to_next_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_day_) -
    reinterpret_cast<char*>(&seconds_to_next_day_)) + sizeof(current_day_));
  // @@protoc_insertion_point(copy_constructor:ei.DailyGiftInfo)
}

void DailyGiftInfo::SharedCtor() {
  ::memset(&seconds_to_next_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_day_) -
      reinterpret_cast<char*>(&seconds_to_next_day_)) + sizeof(current_day_));
}

DailyGiftInfo::~DailyGiftInfo() {
  // @@protoc_insertion_point(destructor:ei.DailyGiftInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DailyGiftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DailyGiftInfo::ArenaDtor(void* object) {
  DailyGiftInfo* _this = reinterpret_cast< DailyGiftInfo* >(object);
  (void)_this;
}
void DailyGiftInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DailyGiftInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DailyGiftInfo& DailyGiftInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DailyGiftInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void DailyGiftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.DailyGiftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&seconds_to_next_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_day_) -
        reinterpret_cast<char*>(&seconds_to_next_day_)) + sizeof(current_day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DailyGiftInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 current_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_day(&has_bits);
          current_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_to_next_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_seconds_to_next_day(&has_bits);
          seconds_to_next_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DailyGiftInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.DailyGiftInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_day = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_day(), target);
  }

  // optional double seconds_to_next_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_to_next_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.DailyGiftInfo)
  return target;
}

size_t DailyGiftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.DailyGiftInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double seconds_to_next_day = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 current_day = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_day());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DailyGiftInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.DailyGiftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DailyGiftInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DailyGiftInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.DailyGiftInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.DailyGiftInfo)
    MergeFrom(*source);
  }
}

void DailyGiftInfo::MergeFrom(const DailyGiftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.DailyGiftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_to_next_day_ = from.seconds_to_next_day_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_day_ = from.current_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DailyGiftInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.DailyGiftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyGiftInfo::CopyFrom(const DailyGiftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.DailyGiftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyGiftInfo::IsInitialized() const {
  return true;
}

void DailyGiftInfo::InternalSwap(DailyGiftInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DailyGiftInfo, current_day_)
      + sizeof(DailyGiftInfo::current_day_)
      - PROTOBUF_FIELD_OFFSET(DailyGiftInfo, seconds_to_next_day_)>(
          reinterpret_cast<char*>(&seconds_to_next_day_),
          reinterpret_cast<char*>(&other->seconds_to_next_day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DailyGiftInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SalesInfoRequest::InitAsDefaultInstance() {
}
class SalesInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SalesInfoRequest>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_piggy_found_full(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seconds_full_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_full_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lost_increments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_current_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SalesInfoRequest::SalesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SalesInfoRequest)
}
SalesInfoRequest::SalesInfoRequest(const SalesInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ::memcpy(&seconds_full_realtime_, &from.seconds_full_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_client_version_) -
    reinterpret_cast<char*>(&seconds_full_realtime_)) + sizeof(current_client_version_));
  // @@protoc_insertion_point(copy_constructor:ei.SalesInfoRequest)
}

void SalesInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SalesInfoRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seconds_full_realtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_client_version_) -
      reinterpret_cast<char*>(&seconds_full_realtime_)) + sizeof(current_client_version_));
}

SalesInfoRequest::~SalesInfoRequest() {
  // @@protoc_insertion_point(destructor:ei.SalesInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SalesInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SalesInfoRequest::ArenaDtor(void* object) {
  SalesInfoRequest* _this = reinterpret_cast< SalesInfoRequest* >(object);
  (void)_this;
}
void SalesInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SalesInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SalesInfoRequest& SalesInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SalesInfoRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void SalesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SalesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&seconds_full_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_client_version_) -
        reinterpret_cast<char*>(&seconds_full_realtime_)) + sizeof(current_client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SalesInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SalesInfoRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_piggy_full(&has_bits);
          piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_found_full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_piggy_found_full(&has_bits);
          piggy_found_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_full_realtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_seconds_full_realtime(&has_bits);
          seconds_full_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_full_gametime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_seconds_full_gametime(&has_bits);
          seconds_full_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 lost_increments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lost_increments(&has_bits);
          lost_increments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_client_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_current_client_version(&has_bits);
          current_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SalesInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SalesInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SalesInfoRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional bool piggy_full = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_piggy_full(), target);
  }

  // optional bool piggy_found_full = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_piggy_found_full(), target);
  }

  // optional double seconds_full_realtime = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_seconds_full_realtime(), target);
  }

  // optional double seconds_full_gametime = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_full_gametime(), target);
  }

  // optional uint32 lost_increments = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lost_increments(), target);
  }

  // optional uint32 current_client_version = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SalesInfoRequest)
  return target;
}

size_t SalesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SalesInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional double seconds_full_realtime = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool piggy_full = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool piggy_found_full = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 lost_increments = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lost_increments());
    }

    // optional double seconds_full_gametime = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 current_client_version = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SalesInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SalesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SalesInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SalesInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SalesInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SalesInfoRequest)
    MergeFrom(*source);
  }
}

void SalesInfoRequest::MergeFrom(const SalesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SalesInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_full_realtime_ = from.seconds_full_realtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      piggy_full_ = from.piggy_full_;
    }
    if (cached_has_bits & 0x00000008u) {
      piggy_found_full_ = from.piggy_found_full_;
    }
    if (cached_has_bits & 0x00000010u) {
      lost_increments_ = from.lost_increments_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_full_gametime_ = from.seconds_full_gametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      current_client_version_ = from.current_client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SalesInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SalesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalesInfoRequest::CopyFrom(const SalesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SalesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalesInfoRequest::IsInitialized() const {
  return true;
}

void SalesInfoRequest::InternalSwap(SalesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SalesInfoRequest, current_client_version_)
      + sizeof(SalesInfoRequest::current_client_version_)
      - PROTOBUF_FIELD_OFFSET(SalesInfoRequest, seconds_full_realtime_)>(
          reinterpret_cast<char*>(&seconds_full_realtime_),
          reinterpret_cast<char*>(&other->seconds_full_realtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SalesInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IAPSaleEntry::InitAsDefaultInstance() {
}
class IAPSaleEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<IAPSaleEntry>()._has_bits_);
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discount_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sale_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IAPSaleEntry::IAPSaleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.IAPSaleEntry)
}
IAPSaleEntry::IAPSaleEntry(const IAPSaleEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_product_id()) {
    product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_id(),
      GetArena());
  }
  discount_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_discount_string()) {
    discount_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_discount_string(),
      GetArena());
  }
  sale_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sale_id()) {
    sale_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sale_id(),
      GetArena());
  }
  seconds_remaining_ = from.seconds_remaining_;
  // @@protoc_insertion_point(copy_constructor:ei.IAPSaleEntry)
}

void IAPSaleEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IAPSaleEntry_ei_2eproto.base);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discount_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sale_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seconds_remaining_ = 0;
}

IAPSaleEntry::~IAPSaleEntry() {
  // @@protoc_insertion_point(destructor:ei.IAPSaleEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IAPSaleEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discount_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sale_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IAPSaleEntry::ArenaDtor(void* object) {
  IAPSaleEntry* _this = reinterpret_cast< IAPSaleEntry* >(object);
  (void)_this;
}
void IAPSaleEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IAPSaleEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IAPSaleEntry& IAPSaleEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IAPSaleEntry_ei_2eproto.base);
  return *internal_default_instance();
}


void IAPSaleEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.IAPSaleEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      product_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      discount_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sale_id_.ClearNonDefaultToEmpty();
    }
  }
  seconds_remaining_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IAPSaleEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.IAPSaleEntry.product_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string discount_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_discount_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.IAPSaleEntry.discount_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sale_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sale_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.IAPSaleEntry.sale_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IAPSaleEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.IAPSaleEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.IAPSaleEntry.product_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // optional double seconds_remaining = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_remaining(), target);
  }

  // optional string discount_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_discount_string().data(), static_cast<int>(this->_internal_discount_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.IAPSaleEntry.discount_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_discount_string(), target);
  }

  // optional string sale_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sale_id().data(), static_cast<int>(this->_internal_sale_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.IAPSaleEntry.sale_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sale_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.IAPSaleEntry)
  return target;
}

size_t IAPSaleEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.IAPSaleEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string product_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_id());
    }

    // optional string discount_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_discount_string());
    }

    // optional string sale_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sale_id());
    }

    // optional double seconds_remaining = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IAPSaleEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.IAPSaleEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const IAPSaleEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IAPSaleEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.IAPSaleEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.IAPSaleEntry)
    MergeFrom(*source);
  }
}

void IAPSaleEntry::MergeFrom(const IAPSaleEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.IAPSaleEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product_id(from._internal_product_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_discount_string(from._internal_discount_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sale_id(from._internal_sale_id());
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IAPSaleEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.IAPSaleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAPSaleEntry::CopyFrom(const IAPSaleEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.IAPSaleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IAPSaleEntry::IsInitialized() const {
  return true;
}

void IAPSaleEntry::InternalSwap(IAPSaleEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  discount_string_.Swap(&other->discount_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sale_id_.Swap(&other->sale_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(seconds_remaining_, other->seconds_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IAPSaleEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SalesInfo::InitAsDefaultInstance() {
}
class SalesInfo::_Internal {
 public:
};

SalesInfo::SalesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sales_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SalesInfo)
}
SalesInfo::SalesInfo(const SalesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sales_(from.sales_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.SalesInfo)
}

void SalesInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SalesInfo_ei_2eproto.base);
}

SalesInfo::~SalesInfo() {
  // @@protoc_insertion_point(destructor:ei.SalesInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SalesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SalesInfo::ArenaDtor(void* object) {
  SalesInfo* _this = reinterpret_cast< SalesInfo* >(object);
  (void)_this;
}
void SalesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SalesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SalesInfo& SalesInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SalesInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void SalesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SalesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sales_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SalesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.IAPSaleEntry sales = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sales(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SalesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SalesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.IAPSaleEntry sales = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sales_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sales(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SalesInfo)
  return target;
}

size_t SalesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SalesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.IAPSaleEntry sales = 1;
  total_size += 1UL * this->_internal_sales_size();
  for (const auto& msg : this->sales_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SalesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SalesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SalesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SalesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SalesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SalesInfo)
    MergeFrom(*source);
  }
}

void SalesInfo::MergeFrom(const SalesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SalesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sales_.MergeFrom(from.sales_);
}

void SalesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SalesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalesInfo::CopyFrom(const SalesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SalesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalesInfo::IsInitialized() const {
  return true;
}

void SalesInfo::InternalSwap(SalesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sales_.InternalSwap(&other->sales_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SalesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EggIncEvent::InitAsDefaultInstance() {
}
class EggIncEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<EggIncEvent>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cc_only(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

EggIncEvent::EggIncEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.EggIncEvent)
}
EggIncEvent::EggIncEvent(const EggIncEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  subtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subtitle()) {
    subtitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subtitle(),
      GetArena());
  }
  ::memcpy(&seconds_remaining_, &from.seconds_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&cc_only_) -
    reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(cc_only_));
  // @@protoc_insertion_point(copy_constructor:ei.EggIncEvent)
}

void EggIncEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EggIncEvent_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seconds_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_only_) -
      reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(cc_only_));
}

EggIncEvent::~EggIncEvent() {
  // @@protoc_insertion_point(destructor:ei.EggIncEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EggIncEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EggIncEvent::ArenaDtor(void* object) {
  EggIncEvent* _this = reinterpret_cast< EggIncEvent* >(object);
  (void)_this;
}
void EggIncEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EggIncEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EggIncEvent& EggIncEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EggIncEvent_ei_2eproto.base);
  return *internal_default_instance();
}


void EggIncEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.EggIncEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      subtitle_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&seconds_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cc_only_) -
        reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(cc_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EggIncEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncEvent.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncEvent.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_multiplier(&has_bits);
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string subtitle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.EggIncEvent.subtitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool cc_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cc_only(&has_bits);
          cc_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EggIncEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.EggIncEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncEvent.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional double seconds_remaining = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_remaining(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncEvent.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // optional double multiplier = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_multiplier(), target);
  }

  // optional string subtitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.EggIncEvent.subtitle");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subtitle(), target);
  }

  // optional double start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_start_time(), target);
  }

  // optional double duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_duration(), target);
  }

  // optional bool cc_only = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_cc_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.EggIncEvent)
  return target;
}

size_t EggIncEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.EggIncEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string subtitle = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional double seconds_remaining = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double multiplier = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double duration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool cc_only = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EggIncEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.EggIncEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EggIncEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EggIncEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.EggIncEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.EggIncEvent)
    MergeFrom(*source);
  }
}

void EggIncEvent::MergeFrom(const EggIncEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.EggIncEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_subtitle(from._internal_subtitle());
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000010u) {
      multiplier_ = from.multiplier_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000080u) {
      cc_only_ = from.cc_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EggIncEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.EggIncEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggIncEvent::CopyFrom(const EggIncEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.EggIncEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggIncEvent::IsInitialized() const {
  return true;
}

void EggIncEvent::InternalSwap(EggIncEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subtitle_.Swap(&other->subtitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EggIncEvent, cc_only_)
      + sizeof(EggIncEvent::cc_only_)
      - PROTOBUF_FIELD_OFFSET(EggIncEvent, seconds_remaining_)>(
          reinterpret_cast<char*>(&seconds_remaining_),
          reinterpret_cast<char*>(&other->seconds_remaining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EggIncEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EggIncCurrentEvents::InitAsDefaultInstance() {
}
class EggIncCurrentEvents::_Internal {
 public:
};

EggIncCurrentEvents::EggIncCurrentEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.EggIncCurrentEvents)
}
EggIncCurrentEvents::EggIncCurrentEvents(const EggIncCurrentEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.EggIncCurrentEvents)
}

void EggIncCurrentEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EggIncCurrentEvents_ei_2eproto.base);
}

EggIncCurrentEvents::~EggIncCurrentEvents() {
  // @@protoc_insertion_point(destructor:ei.EggIncCurrentEvents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EggIncCurrentEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EggIncCurrentEvents::ArenaDtor(void* object) {
  EggIncCurrentEvents* _this = reinterpret_cast< EggIncCurrentEvents* >(object);
  (void)_this;
}
void EggIncCurrentEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EggIncCurrentEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EggIncCurrentEvents& EggIncCurrentEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EggIncCurrentEvents_ei_2eproto.base);
  return *internal_default_instance();
}


void EggIncCurrentEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.EggIncCurrentEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EggIncCurrentEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.EggIncEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EggIncCurrentEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.EggIncCurrentEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.EggIncEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.EggIncCurrentEvents)
  return target;
}

size_t EggIncCurrentEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.EggIncCurrentEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.EggIncEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EggIncCurrentEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.EggIncCurrentEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const EggIncCurrentEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EggIncCurrentEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.EggIncCurrentEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.EggIncCurrentEvents)
    MergeFrom(*source);
  }
}

void EggIncCurrentEvents::MergeFrom(const EggIncCurrentEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.EggIncCurrentEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void EggIncCurrentEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.EggIncCurrentEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggIncCurrentEvents::CopyFrom(const EggIncCurrentEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.EggIncCurrentEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggIncCurrentEvents::IsInitialized() const {
  return true;
}

void EggIncCurrentEvents::InternalSwap(EggIncCurrentEvents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EggIncCurrentEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfo>()._has_bits_);
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_advertising_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_form_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_locale_country(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_locale_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gpu_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gpu_model(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_screen_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_screen_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  form_factor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_form_factor()) {
    form_factor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_form_factor(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_name()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_version()) {
    platform_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform_version(),
      GetArena());
  }
  locale_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locale_country()) {
    locale_country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_locale_country(),
      GetArena());
  }
  locale_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locale_language()) {
    locale_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_locale_language(),
      GetArena());
  }
  gpu_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gpu_vendor()) {
    gpu_vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gpu_vendor(),
      GetArena());
  }
  gpu_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gpu_model()) {
    gpu_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gpu_model(),
      GetArena());
  }
  device_bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_bucket()) {
    device_bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_bucket(),
      GetArena());
  }
  advertising_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_advertising_id()) {
    advertising_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_advertising_id(),
      GetArena());
  }
  ::memcpy(&screen_width_, &from.screen_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&screen_height_) -
    reinterpret_cast<char*>(&screen_width_)) + sizeof(screen_height_));
  // @@protoc_insertion_point(copy_constructor:ei.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_ei_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  form_factor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  advertising_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&screen_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screen_height_) -
      reinterpret_cast<char*>(&screen_width_)) + sizeof(screen_height_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:ei.DeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  form_factor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  advertising_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      form_factor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      platform_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      locale_country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      locale_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      gpu_vendor_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      gpu_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      device_bucket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      advertising_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    ::memset(&screen_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_height_) -
        reinterpret_cast<char*>(&screen_width_)) + sizeof(screen_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string form_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_form_factor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.form_factor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_platform_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.platform_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale_country = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_locale_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.locale_country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale_language = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_locale_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.locale_language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gpu_vendor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_gpu_vendor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.gpu_vendor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gpu_model = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_gpu_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.gpu_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_bucket = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_device_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.device_bucket");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_screen_width(&has_bits);
          screen_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_screen_height(&has_bits);
          screen_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string advertising_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_advertising_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DeviceInfo.advertising_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // optional string platform = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.platform");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_platform(), target);
  }

  // optional string form_factor = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_form_factor().data(), static_cast<int>(this->_internal_form_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.form_factor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_form_factor(), target);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.device_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_name(), target);
  }

  // optional string platform_version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform_version().data(), static_cast<int>(this->_internal_platform_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.platform_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform_version(), target);
  }

  // optional string locale_country = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_country().data(), static_cast<int>(this->_internal_locale_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.locale_country");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_locale_country(), target);
  }

  // optional string locale_language = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_language().data(), static_cast<int>(this->_internal_locale_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.locale_language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_locale_language(), target);
  }

  // optional string gpu_vendor = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gpu_vendor().data(), static_cast<int>(this->_internal_gpu_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.gpu_vendor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_gpu_vendor(), target);
  }

  // optional string gpu_model = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gpu_model().data(), static_cast<int>(this->_internal_gpu_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.gpu_model");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gpu_model(), target);
  }

  // optional string device_bucket = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_bucket().data(), static_cast<int>(this->_internal_device_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.device_bucket");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_device_bucket(), target);
  }

  // optional uint32 screen_width = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_screen_width(), target);
  }

  // optional uint32 screen_height = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_screen_height(), target);
  }

  // optional string advertising_id = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_advertising_id().data(), static_cast<int>(this->_internal_advertising_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DeviceInfo.advertising_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_advertising_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional string platform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string form_factor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_form_factor());
    }

    // optional string device_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional string platform_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform_version());
    }

    // optional string locale_country = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_country());
    }

    // optional string locale_language = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_language());
    }

    // optional string gpu_vendor = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gpu_vendor());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional string gpu_model = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gpu_model());
    }

    // optional string device_bucket = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_bucket());
    }

    // optional string advertising_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_advertising_id());
    }

    // optional uint32 screen_width = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_width());
    }

    // optional uint32 screen_height = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_form_factor(from._internal_form_factor());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_platform_version(from._internal_platform_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_locale_country(from._internal_locale_country());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_locale_language(from._internal_locale_language());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_gpu_vendor(from._internal_gpu_vendor());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_gpu_model(from._internal_gpu_model());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_device_bucket(from._internal_device_bucket());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_advertising_id(from._internal_advertising_id());
    }
    if (cached_has_bits & 0x00000800u) {
      screen_width_ = from.screen_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      screen_height_ = from.screen_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  form_factor_.Swap(&other->form_factor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_version_.Swap(&other->platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locale_country_.Swap(&other->locale_country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locale_language_.Swap(&other->locale_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gpu_vendor_.Swap(&other->gpu_vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gpu_model_.Swap(&other->gpu_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_bucket_.Swap(&other->device_bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  advertising_id_.Swap(&other->advertising_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, screen_height_)
      + sizeof(DeviceInfo::screen_height_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, screen_width_)>(
          reinterpret_cast<char*>(&screen_width_),
          reinterpret_cast<char*>(&other->screen_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppInfo::InitAsDefaultInstance() {
}
class AppInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppInfo>()._has_bits_);
  static void set_has_version_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_prestiges(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_current_egg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gold_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_mission(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_piggy_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_piggy_breaks(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_verified_piggy_breaks(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_iap_packs_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_permit_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_video_doubler_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_drone_takedowns(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_drone_takedowns_elite(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_trophies_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_egg_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_struggle_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_piggy_found_full(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_time_piggy_full_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_time_piggy_full_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_lost_piggy_increments(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_sale_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlimited_chickens_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_refill_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_short_warp_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_long_warp_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version_str()) {
    version_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_str(),
      GetArena());
  }
  sale_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sale_id()) {
    sale_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sale_id(),
      GetArena());
  }
  ::memcpy(&sessions_, &from.sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&piggy_found_full_) -
    reinterpret_cast<char*>(&sessions_)) + sizeof(piggy_found_full_));
  // @@protoc_insertion_point(copy_constructor:ei.AppInfo)
}

void AppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInfo_ei_2eproto.base);
  version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sale_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&piggy_found_full_) -
      reinterpret_cast<char*>(&sessions_)) + sizeof(piggy_found_full_));
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:ei.AppInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sale_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  (void)_this;
}
void AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInfo& AppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sale_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_mission_) -
        reinterpret_cast<char*>(&sessions_)) + sizeof(current_mission_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gold_spent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&video_doubler_uses_) -
        reinterpret_cast<char*>(&gold_spent_)) + sizeof(video_doubler_uses_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&short_warp_uses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_piggy_full_gametime_) -
        reinterpret_cast<char*>(&short_warp_uses_)) + sizeof(time_piggy_full_gametime_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&lost_piggy_increments_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&piggy_found_full_) -
        reinterpret_cast<char*>(&lost_piggy_increments_)) + sizeof(piggy_found_full_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string version_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AppInfo.version_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sessions(&has_bits);
          sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_prestiges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_prestiges(&has_bits);
          num_prestiges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 soul_eggs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_egg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_current_egg(&has_bits);
          current_egg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gold_earned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gold_earned(&has_bits);
          gold_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gold_spent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gold_spent(&has_bits);
          gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_mission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_current_mission(&has_bits);
          current_mission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 piggy_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_piggy_size(&has_bits);
          piggy_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 num_piggy_breaks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_piggy_breaks(&has_bits);
          num_piggy_breaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 iap_packs_purchased = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_iap_packs_purchased(&has_bits);
          iap_packs_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 permit_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_permit_level(&has_bits);
          permit_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unlimited_chickens_uses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_unlimited_chickens_uses(&has_bits);
          unlimited_chickens_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 refill_uses = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_refill_uses(&has_bits);
          refill_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_doubler_uses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_video_doubler_uses(&has_bits);
          video_doubler_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 short_warp_uses = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_short_warp_uses(&has_bits);
          short_warp_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 long_warp_uses = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_long_warp_uses(&has_bits);
          long_warp_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 drone_takedowns = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_drone_takedowns(&has_bits);
          drone_takedowns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 drone_takedowns_elite = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_drone_takedowns_elite(&has_bits);
          drone_takedowns_elite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trophies_unlocked = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_trophies_unlocked(&has_bits);
          trophies_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float egg_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_egg_level(&has_bits);
          egg_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float struggle_factor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_struggle_factor(&has_bits);
          struggle_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_full = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_piggy_full(&has_bits);
          piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_found_full = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_piggy_found_full(&has_bits);
          piggy_found_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_piggy_full_realtime = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_time_piggy_full_realtime(&has_bits);
          time_piggy_full_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_piggy_full_gametime = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_time_piggy_full_gametime(&has_bits);
          time_piggy_full_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 lost_piggy_increments = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_lost_piggy_increments(&has_bits);
          lost_piggy_increments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sale_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_sale_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AppInfo.sale_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 verified_piggy_breaks = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_verified_piggy_breaks(&has_bits);
          verified_piggy_breaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version_str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version_str().data(), static_cast<int>(this->_internal_version_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AppInfo.version_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_str(), target);
  }

  // optional uint32 sessions = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sessions(), target);
  }

  // optional uint32 num_prestiges = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_prestiges(), target);
  }

  // optional uint64 soul_eggs = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_soul_eggs(), target);
  }

  // optional uint32 current_egg = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_current_egg(), target);
  }

  // optional uint64 gold_earned = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gold_earned(), target);
  }

  // optional uint64 gold_spent = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gold_spent(), target);
  }

  // optional uint32 current_mission = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_current_mission(), target);
  }

  // optional uint32 piggy_size = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_piggy_size(), target);
  }

  // optional uint64 num_piggy_breaks = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_num_piggy_breaks(), target);
  }

  // optional uint64 iap_packs_purchased = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_iap_packs_purchased(), target);
  }

  // optional uint32 permit_level = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_permit_level(), target);
  }

  // optional uint64 unlimited_chickens_uses = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_unlimited_chickens_uses(), target);
  }

  // optional uint64 refill_uses = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_refill_uses(), target);
  }

  // optional uint64 video_doubler_uses = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_video_doubler_uses(), target);
  }

  // optional uint64 short_warp_uses = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_short_warp_uses(), target);
  }

  // optional uint64 long_warp_uses = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_long_warp_uses(), target);
  }

  // optional uint64 drone_takedowns = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_drone_takedowns(), target);
  }

  // optional uint64 drone_takedowns_elite = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_drone_takedowns_elite(), target);
  }

  // optional bool trophies_unlocked = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_trophies_unlocked(), target);
  }

  // optional float egg_level = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_egg_level(), target);
  }

  // optional float struggle_factor = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_struggle_factor(), target);
  }

  // optional bool piggy_full = 23;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_piggy_full(), target);
  }

  // optional bool piggy_found_full = 24;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_piggy_found_full(), target);
  }

  // optional double time_piggy_full_realtime = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_time_piggy_full_realtime(), target);
  }

  // optional double time_piggy_full_gametime = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_time_piggy_full_gametime(), target);
  }

  // optional uint64 lost_piggy_increments = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_lost_piggy_increments(), target);
  }

  // optional string sale_id = 28;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sale_id().data(), static_cast<int>(this->_internal_sale_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AppInfo.sale_id");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_sale_id(), target);
  }

  // optional uint64 verified_piggy_breaks = 29;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(29, this->_internal_verified_piggy_breaks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AppInfo)
  return target;
}

size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version_str = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version_str());
    }

    // optional string sale_id = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sale_id());
    }

    // optional uint32 sessions = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sessions());
    }

    // optional uint32 num_prestiges = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_prestiges());
    }

    // optional uint64 soul_eggs = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_soul_eggs());
    }

    // optional uint64 gold_earned = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gold_earned());
    }

    // optional uint32 current_egg = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_egg());
    }

    // optional uint32 current_mission = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_mission());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 gold_spent = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gold_spent());
    }

    // optional uint64 num_piggy_breaks = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_num_piggy_breaks());
    }

    // optional uint32 piggy_size = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_piggy_size());
    }

    // optional uint32 permit_level = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_permit_level());
    }

    // optional uint64 iap_packs_purchased = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_iap_packs_purchased());
    }

    // optional uint64 unlimited_chickens_uses = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unlimited_chickens_uses());
    }

    // optional uint64 refill_uses = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_refill_uses());
    }

    // optional uint64 video_doubler_uses = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_doubler_uses());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 short_warp_uses = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_short_warp_uses());
    }

    // optional uint64 long_warp_uses = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_long_warp_uses());
    }

    // optional uint64 drone_takedowns = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_drone_takedowns());
    }

    // optional uint64 drone_takedowns_elite = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_drone_takedowns_elite());
    }

    // optional float egg_level = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float struggle_factor = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional double time_piggy_full_realtime = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double time_piggy_full_gametime = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional uint64 lost_piggy_increments = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lost_piggy_increments());
    }

    // optional uint64 verified_piggy_breaks = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_verified_piggy_breaks());
    }

    // optional bool trophies_unlocked = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool piggy_full = 23;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool piggy_found_full = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AppInfo)
    MergeFrom(*source);
  }
}

void AppInfo::MergeFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version_str(from._internal_version_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sale_id(from._internal_sale_id());
    }
    if (cached_has_bits & 0x00000004u) {
      sessions_ = from.sessions_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_prestiges_ = from.num_prestiges_;
    }
    if (cached_has_bits & 0x00000010u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000020u) {
      gold_earned_ = from.gold_earned_;
    }
    if (cached_has_bits & 0x00000040u) {
      current_egg_ = from.current_egg_;
    }
    if (cached_has_bits & 0x00000080u) {
      current_mission_ = from.current_mission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_piggy_breaks_ = from.num_piggy_breaks_;
    }
    if (cached_has_bits & 0x00000400u) {
      piggy_size_ = from.piggy_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      permit_level_ = from.permit_level_;
    }
    if (cached_has_bits & 0x00001000u) {
      iap_packs_purchased_ = from.iap_packs_purchased_;
    }
    if (cached_has_bits & 0x00002000u) {
      unlimited_chickens_uses_ = from.unlimited_chickens_uses_;
    }
    if (cached_has_bits & 0x00004000u) {
      refill_uses_ = from.refill_uses_;
    }
    if (cached_has_bits & 0x00008000u) {
      video_doubler_uses_ = from.video_doubler_uses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      short_warp_uses_ = from.short_warp_uses_;
    }
    if (cached_has_bits & 0x00020000u) {
      long_warp_uses_ = from.long_warp_uses_;
    }
    if (cached_has_bits & 0x00040000u) {
      drone_takedowns_ = from.drone_takedowns_;
    }
    if (cached_has_bits & 0x00080000u) {
      drone_takedowns_elite_ = from.drone_takedowns_elite_;
    }
    if (cached_has_bits & 0x00100000u) {
      egg_level_ = from.egg_level_;
    }
    if (cached_has_bits & 0x00200000u) {
      struggle_factor_ = from.struggle_factor_;
    }
    if (cached_has_bits & 0x00400000u) {
      time_piggy_full_realtime_ = from.time_piggy_full_realtime_;
    }
    if (cached_has_bits & 0x00800000u) {
      time_piggy_full_gametime_ = from.time_piggy_full_gametime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      lost_piggy_increments_ = from.lost_piggy_increments_;
    }
    if (cached_has_bits & 0x02000000u) {
      verified_piggy_breaks_ = from.verified_piggy_breaks_;
    }
    if (cached_has_bits & 0x04000000u) {
      trophies_unlocked_ = from.trophies_unlocked_;
    }
    if (cached_has_bits & 0x08000000u) {
      piggy_full_ = from.piggy_full_;
    }
    if (cached_has_bits & 0x10000000u) {
      piggy_found_full_ = from.piggy_found_full_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_str_.Swap(&other->version_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sale_id_.Swap(&other->sale_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfo, piggy_found_full_)
      + sizeof(AppInfo::piggy_found_full_)
      - PROTOBUF_FIELD_OFFSET(AppInfo, sessions_)>(
          reinterpret_cast<char*>(&sessions_),
          reinterpret_cast<char*>(&other->sessions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionKeyValuePair::InitAsDefaultInstance() {
}
class ActionKeyValuePair::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionKeyValuePair>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ActionKeyValuePair::ActionKeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ActionKeyValuePair)
}
ActionKeyValuePair::ActionKeyValuePair(const ActionKeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.ActionKeyValuePair)
}

void ActionKeyValuePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionKeyValuePair_ei_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActionKeyValuePair::~ActionKeyValuePair() {
  // @@protoc_insertion_point(destructor:ei.ActionKeyValuePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionKeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActionKeyValuePair::ArenaDtor(void* object) {
  ActionKeyValuePair* _this = reinterpret_cast< ActionKeyValuePair* >(object);
  (void)_this;
}
void ActionKeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionKeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionKeyValuePair& ActionKeyValuePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionKeyValuePair_ei_2eproto.base);
  return *internal_default_instance();
}


void ActionKeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ActionKeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionKeyValuePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ActionKeyValuePair.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ActionKeyValuePair.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionKeyValuePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ActionKeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ActionKeyValuePair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ActionKeyValuePair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ActionKeyValuePair)
  return target;
}

size_t ActionKeyValuePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ei.ActionKeyValuePair)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return total_size;
}
size_t ActionKeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ActionKeyValuePair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionKeyValuePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ActionKeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionKeyValuePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionKeyValuePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ActionKeyValuePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ActionKeyValuePair)
    MergeFrom(*source);
  }
}

void ActionKeyValuePair::MergeFrom(const ActionKeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ActionKeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void ActionKeyValuePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ActionKeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionKeyValuePair::CopyFrom(const ActionKeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ActionKeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionKeyValuePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ActionKeyValuePair::InternalSwap(ActionKeyValuePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionKeyValuePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericAction::InitAsDefaultInstance() {
  ::ei::_GenericAction_default_instance_._instance.get_mutable()->app_ = const_cast< ::ei::AppInfo*>(
      ::ei::AppInfo::internal_default_instance());
  ::ei::_GenericAction_default_instance_._instance.get_mutable()->device_ = const_cast< ::ei::DeviceInfo*>(
      ::ei::DeviceInfo::internal_default_instance());
}
class GenericAction::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericAction>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cc_user(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_advertising_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_approx_time_dep(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_action_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::AppInfo& app(const GenericAction* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ei::DeviceInfo& device(const GenericAction* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ei::AppInfo&
GenericAction::_Internal::app(const GenericAction* msg) {
  return *msg->app_;
}
const ::ei::DeviceInfo&
GenericAction::_Internal::device(const GenericAction* msg) {
  return *msg->device_;
}
GenericAction::GenericAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.GenericAction)
}
GenericAction::GenericAction(const GenericAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  action_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_name()) {
    action_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_name(),
      GetArena());
  }
  advertising_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_advertising_id()) {
    advertising_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_advertising_id(),
      GetArena());
  }
  if (from._internal_has_app()) {
    app_ = new ::ei::AppInfo(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::ei::DeviceInfo(*from.device_);
  } else {
    device_ = nullptr;
  }
  ::memcpy(&approx_time_dep_, &from.approx_time_dep_,
    static_cast<size_t>(reinterpret_cast<char*>(&approx_time_) -
    reinterpret_cast<char*>(&approx_time_dep_)) + sizeof(approx_time_));
  // @@protoc_insertion_point(copy_constructor:ei.GenericAction)
}

void GenericAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericAction_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  advertising_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approx_time_) -
      reinterpret_cast<char*>(&app_)) + sizeof(approx_time_));
}

GenericAction::~GenericAction() {
  // @@protoc_insertion_point(destructor:ei.GenericAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  advertising_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete device_;
}

void GenericAction::ArenaDtor(void* object) {
  GenericAction* _this = reinterpret_cast< GenericAction* >(object);
  (void)_this;
}
void GenericAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericAction& GenericAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericAction_ei_2eproto.base);
  return *internal_default_instance();
}


void GenericAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.GenericAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      action_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      advertising_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(device_ != nullptr);
      device_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&approx_time_dep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&approx_time_) -
        reinterpret_cast<char*>(&approx_time_dep_)) + sizeof(approx_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GenericAction.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float approx_time_DEP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_approx_time_dep(&has_bits);
          approx_time_dep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string action_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GenericAction.action_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ActionKeyValuePair data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.AppInfo app = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.DeviceInfo device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string advertising_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_advertising_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GenericAction.advertising_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double approx_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool cc_user = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cc_user(&has_bits);
          cc_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.GenericAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GenericAction.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional float approx_time_DEP = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_approx_time_dep(), target);
  }

  // optional string action_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_name().data(), static_cast<int>(this->_internal_action_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GenericAction.action_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action_name(), target);
  }

  // repeated .ei.ActionKeyValuePair data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data(i), target, stream);
  }

  // optional .ei.AppInfo app = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::app(this), target, stream);
  }

  // optional .ei.DeviceInfo device = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device(this), target, stream);
  }

  // optional string advertising_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_advertising_id().data(), static_cast<int>(this->_internal_advertising_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GenericAction.advertising_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_advertising_id(), target);
  }

  // optional double approx_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_approx_time(), target);
  }

  // optional bool cc_user = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_cc_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.GenericAction)
  return target;
}

size_t GenericAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.GenericAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ActionKeyValuePair data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string action_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_name());
    }

    // optional string advertising_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_advertising_id());
    }

    // optional .ei.AppInfo app = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .ei.DeviceInfo device = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_);
    }

    // optional float approx_time_DEP = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool cc_user = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double approx_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.GenericAction)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.GenericAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.GenericAction)
    MergeFrom(*source);
  }
}

void GenericAction::MergeFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.GenericAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_action_name(from._internal_action_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_advertising_id(from._internal_advertising_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_app()->::ei::AppInfo::MergeFrom(from._internal_app());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_device()->::ei::DeviceInfo::MergeFrom(from._internal_device());
    }
    if (cached_has_bits & 0x00000020u) {
      approx_time_dep_ = from.approx_time_dep_;
    }
    if (cached_has_bits & 0x00000040u) {
      cc_user_ = from.cc_user_;
    }
    if (cached_has_bits & 0x00000080u) {
      approx_time_ = from.approx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.GenericAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericAction::CopyFrom(const GenericAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.GenericAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAction::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(data_)) return false;
  return true;
}

void GenericAction::InternalSwap(GenericAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_name_.Swap(&other->action_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  advertising_id_.Swap(&other->advertising_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericAction, approx_time_)
      + sizeof(GenericAction::approx_time_)
      - PROTOBUF_FIELD_OFFSET(GenericAction, app_)>(
          reinterpret_cast<char*>(&app_),
          reinterpret_cast<char*>(&other->app_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericActionBatchRequest::InitAsDefaultInstance() {
  ::ei::_GenericActionBatchRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class GenericActionBatchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericActionBatchRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const GenericActionBatchRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::BasicRequestInfo&
GenericActionBatchRequest::_Internal::rinfo(const GenericActionBatchRequest* msg) {
  return *msg->rinfo_;
}
GenericActionBatchRequest::GenericActionBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.GenericActionBatchRequest)
}
GenericActionBatchRequest::GenericActionBatchRequest(const GenericActionBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.GenericActionBatchRequest)
}

void GenericActionBatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericActionBatchRequest_ei_2eproto.base);
  rinfo_ = nullptr;
}

GenericActionBatchRequest::~GenericActionBatchRequest() {
  // @@protoc_insertion_point(destructor:ei.GenericActionBatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericActionBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
}

void GenericActionBatchRequest::ArenaDtor(void* object) {
  GenericActionBatchRequest* _this = reinterpret_cast< GenericActionBatchRequest* >(object);
  (void)_this;
}
void GenericActionBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericActionBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericActionBatchRequest& GenericActionBatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericActionBatchRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void GenericActionBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.GenericActionBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rinfo_ != nullptr);
    rinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericActionBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.GenericAction actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericActionBatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.GenericActionBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // repeated .ei.GenericAction actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.GenericActionBatchRequest)
  return target;
}

size_t GenericActionBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.GenericActionBatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.GenericAction actions = 2;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ei.BasicRequestInfo rinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericActionBatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.GenericActionBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericActionBatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericActionBatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.GenericActionBatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.GenericActionBatchRequest)
    MergeFrom(*source);
  }
}

void GenericActionBatchRequest::MergeFrom(const GenericActionBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.GenericActionBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from._internal_has_rinfo()) {
    _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
  }
}

void GenericActionBatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.GenericActionBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericActionBatchRequest::CopyFrom(const GenericActionBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.GenericActionBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericActionBatchRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(actions_)) return false;
  return true;
}

void GenericActionBatchRequest::InternalSwap(GenericActionBatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actions_.InternalSwap(&other->actions_);
  swap(rinfo_, other->rinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericActionBatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyPurchaseRequest::InitAsDefaultInstance() {
  ::ei::_VerifyPurchaseRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_VerifyPurchaseRequest_default_instance_._instance.get_mutable()->log_ = const_cast< ::ei::GenericAction*>(
      ::ei::GenericAction::internal_default_instance());
}
class VerifyPurchaseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyPurchaseRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const VerifyPurchaseRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sku(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_receipt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sandbox(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ei::GenericAction& log(const VerifyPurchaseRequest* msg);
  static void set_has_log(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::BasicRequestInfo&
VerifyPurchaseRequest::_Internal::rinfo(const VerifyPurchaseRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::GenericAction&
VerifyPurchaseRequest::_Internal::log(const VerifyPurchaseRequest* msg) {
  return *msg->log_;
}
VerifyPurchaseRequest::VerifyPurchaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.VerifyPurchaseRequest)
}
VerifyPurchaseRequest::VerifyPurchaseRequest(const VerifyPurchaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sku_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sku()) {
    sku_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sku(),
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_id()) {
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction_id(),
      GetArena());
  }
  receipt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_receipt()) {
    receipt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_receipt(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_transaction_id()) {
    original_transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_transaction_id(),
      GetArena());
  }
  if (from._internal_has_log()) {
    log_ = new ::ei::GenericAction(*from.log_);
  } else {
    log_ = nullptr;
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  sandbox_ = from.sandbox_;
  // @@protoc_insertion_point(copy_constructor:ei.VerifyPurchaseRequest)
}

void VerifyPurchaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyPurchaseRequest_ei_2eproto.base);
  sku_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receipt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sandbox_) -
      reinterpret_cast<char*>(&log_)) + sizeof(sandbox_));
}

VerifyPurchaseRequest::~VerifyPurchaseRequest() {
  // @@protoc_insertion_point(destructor:ei.VerifyPurchaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyPurchaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sku_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receipt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete rinfo_;
}

void VerifyPurchaseRequest::ArenaDtor(void* object) {
  VerifyPurchaseRequest* _this = reinterpret_cast< VerifyPurchaseRequest* >(object);
  (void)_this;
}
void VerifyPurchaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyPurchaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyPurchaseRequest& VerifyPurchaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyPurchaseRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void VerifyPurchaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.VerifyPurchaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      sku_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      receipt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      original_transaction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(log_ != nullptr);
      log_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  sandbox_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyPurchaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sku = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sku();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseRequest.sku");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseRequest.transaction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string receipt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_receipt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseRequest.receipt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseRequest.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.GenericAction log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sandbox = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sandbox(&has_bits);
          sandbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_transaction_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_original_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseRequest.original_transaction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyPurchaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.VerifyPurchaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sku = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sku().data(), static_cast<int>(this->_internal_sku().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseRequest.sku");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sku(), target);
  }

  // optional string transaction_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseRequest.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // optional string receipt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_receipt().data(), static_cast<int>(this->_internal_receipt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseRequest.receipt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receipt(), target);
  }

  // optional string platform = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseRequest.platform");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_platform(), target);
  }

  // optional .ei.GenericAction log = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::log(this), target, stream);
  }

  // optional .ei.BasicRequestInfo rinfo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rinfo(this), target, stream);
  }

  // optional bool sandbox = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sandbox(), target);
  }

  // optional string original_transaction_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_transaction_id().data(), static_cast<int>(this->_internal_original_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseRequest.original_transaction_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_original_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.VerifyPurchaseRequest)
  return target;
}

size_t VerifyPurchaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.VerifyPurchaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sku = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sku());
    }

    // optional string transaction_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_transaction_id());
    }

    // optional string receipt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_receipt());
    }

    // optional string platform = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string original_transaction_id = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_transaction_id());
    }

    // optional .ei.GenericAction log = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_);
    }

    // optional .ei.BasicRequestInfo rinfo = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional bool sandbox = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyPurchaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.VerifyPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPurchaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyPurchaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.VerifyPurchaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.VerifyPurchaseRequest)
    MergeFrom(*source);
  }
}

void VerifyPurchaseRequest::MergeFrom(const VerifyPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.VerifyPurchaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sku(from._internal_sku());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_transaction_id(from._internal_transaction_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_receipt(from._internal_receipt());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_original_transaction_id(from._internal_original_transaction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_log()->::ei::GenericAction::MergeFrom(from._internal_log());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      sandbox_ = from.sandbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPurchaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.VerifyPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPurchaseRequest::CopyFrom(const VerifyPurchaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.VerifyPurchaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPurchaseRequest::IsInitialized() const {
  if (_internal_has_log()) {
    if (!log_->IsInitialized()) return false;
  }
  return true;
}

void VerifyPurchaseRequest::InternalSwap(VerifyPurchaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sku_.Swap(&other->sku_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receipt_.Swap(&other->receipt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_transaction_id_.Swap(&other->original_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyPurchaseRequest, sandbox_)
      + sizeof(VerifyPurchaseRequest::sandbox_)
      - PROTOBUF_FIELD_OFFSET(VerifyPurchaseRequest, log_)>(
          reinterpret_cast<char*>(&log_),
          reinterpret_cast<char*>(&other->log_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyPurchaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyPurchaseResponse::InitAsDefaultInstance() {
}
class VerifyPurchaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyPurchaseResponse>()._has_bits_);
  static void set_has_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VerifyPurchaseResponse::VerifyPurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.VerifyPurchaseResponse)
}
VerifyPurchaseResponse::VerifyPurchaseResponse(const VerifyPurchaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  verified_ = from.verified_;
  // @@protoc_insertion_point(copy_constructor:ei.VerifyPurchaseResponse)
}

void VerifyPurchaseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyPurchaseResponse_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verified_ = false;
}

VerifyPurchaseResponse::~VerifyPurchaseResponse() {
  // @@protoc_insertion_point(destructor:ei.VerifyPurchaseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VerifyPurchaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyPurchaseResponse::ArenaDtor(void* object) {
  VerifyPurchaseResponse* _this = reinterpret_cast< VerifyPurchaseResponse* >(object);
  (void)_this;
}
void VerifyPurchaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VerifyPurchaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyPurchaseResponse& VerifyPurchaseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyPurchaseResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void VerifyPurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.VerifyPurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  verified_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyPurchaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool verified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_verified(&has_bits);
          verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.VerifyPurchaseResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyPurchaseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.VerifyPurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool verified = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_verified(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.VerifyPurchaseResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.VerifyPurchaseResponse)
  return target;
}

size_t VerifyPurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.VerifyPurchaseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional bool verified = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyPurchaseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.VerifyPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyPurchaseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyPurchaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.VerifyPurchaseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.VerifyPurchaseResponse)
    MergeFrom(*source);
  }
}

void VerifyPurchaseResponse::MergeFrom(const VerifyPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.VerifyPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      verified_ = from.verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyPurchaseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.VerifyPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyPurchaseResponse::CopyFrom(const VerifyPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.VerifyPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyPurchaseResponse::IsInitialized() const {
  return true;
}

void VerifyPurchaseResponse::InternalSwap(VerifyPurchaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(verified_, other->verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyPurchaseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrencyFlowLog::InitAsDefaultInstance() {
}
class CurrencyFlowLog::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrencyFlowLog>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tickets_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CurrencyFlowLog::CurrencyFlowLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CurrencyFlowLog)
}
CurrencyFlowLog::CurrencyFlowLog(const CurrencyFlowLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  ::memcpy(&approx_time_, &from.approx_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&approx_time_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:ei.CurrencyFlowLog)
}

void CurrencyFlowLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrencyFlowLog_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&approx_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_spent_) -
      reinterpret_cast<char*>(&approx_time_)) + sizeof(gold_spent_));
  currency_ = 1;
}

CurrencyFlowLog::~CurrencyFlowLog() {
  // @@protoc_insertion_point(destructor:ei.CurrencyFlowLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrencyFlowLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrencyFlowLog::ArenaDtor(void* object) {
  CurrencyFlowLog* _this = reinterpret_cast< CurrencyFlowLog* >(object);
  (void)_this;
}
void CurrencyFlowLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrencyFlowLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyFlowLog& CurrencyFlowLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyFlowLog_ei_2eproto.base);
  return *internal_default_instance();
}


void CurrencyFlowLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CurrencyFlowLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      platform_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&approx_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tickets_spent_) -
        reinterpret_cast<char*>(&approx_time_)) + sizeof(tickets_spent_));
  }
  if (cached_has_bits & 0x00000300u) {
    gold_spent_ = PROTOBUF_ULONGLONG(0);
    currency_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyFlowLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CurrencyFlowLog.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double approx_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.RewardType currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::RewardType_IsValid(val))) {
            _internal_set_currency(static_cast<::ei::RewardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CurrencyFlowLog.location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CurrencyFlowLog.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CurrencyFlowLog.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 tickets_spent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tickets_spent(&has_bits);
          tickets_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gold_spent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gold_spent(&has_bits);
          gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyFlowLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CurrencyFlowLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CurrencyFlowLog.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional double approx_time = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_approx_time(), target);
  }

  // optional .ei.RewardType currency = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_currency(), target);
  }

  // optional int64 amount = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_amount(), target);
  }

  // optional string location = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CurrencyFlowLog.location");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location(), target);
  }

  // optional string version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CurrencyFlowLog.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // optional string platform = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CurrencyFlowLog.platform");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_platform(), target);
  }

  // optional double soul_eggs = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_soul_eggs(), target);
  }

  // optional uint64 tickets_spent = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tickets_spent(), target);
  }

  // optional uint64 gold_spent = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_gold_spent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CurrencyFlowLog)
  return target;
}

size_t CurrencyFlowLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CurrencyFlowLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string location = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location());
    }

    // optional string version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string platform = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional double approx_time = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 amount = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_amount());
    }

    // optional double soul_eggs = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint64 tickets_spent = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tickets_spent());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 gold_spent = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gold_spent());
    }

    // optional .ei.RewardType currency = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyFlowLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CurrencyFlowLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyFlowLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyFlowLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CurrencyFlowLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CurrencyFlowLog)
    MergeFrom(*source);
  }
}

void CurrencyFlowLog::MergeFrom(const CurrencyFlowLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CurrencyFlowLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000010u) {
      approx_time_ = from.approx_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000080u) {
      tickets_spent_ = from.tickets_spent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00000200u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrencyFlowLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CurrencyFlowLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyFlowLog::CopyFrom(const CurrencyFlowLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CurrencyFlowLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyFlowLog::IsInitialized() const {
  return true;
}

void CurrencyFlowLog::InternalSwap(CurrencyFlowLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrencyFlowLog, gold_spent_)
      + sizeof(CurrencyFlowLog::gold_spent_)
      - PROTOBUF_FIELD_OFFSET(CurrencyFlowLog, approx_time_)>(
          reinterpret_cast<char*>(&approx_time_),
          reinterpret_cast<char*>(&other->approx_time_));
  swap(currency_, other->currency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyFlowLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrencyFlowBatchRequest::InitAsDefaultInstance() {
  ::ei::_CurrencyFlowBatchRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class CurrencyFlowBatchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrencyFlowBatchRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const CurrencyFlowBatchRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::BasicRequestInfo&
CurrencyFlowBatchRequest::_Internal::rinfo(const CurrencyFlowBatchRequest* msg) {
  return *msg->rinfo_;
}
CurrencyFlowBatchRequest::CurrencyFlowBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CurrencyFlowBatchRequest)
}
CurrencyFlowBatchRequest::CurrencyFlowBatchRequest(const CurrencyFlowBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.CurrencyFlowBatchRequest)
}

void CurrencyFlowBatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrencyFlowBatchRequest_ei_2eproto.base);
  rinfo_ = nullptr;
}

CurrencyFlowBatchRequest::~CurrencyFlowBatchRequest() {
  // @@protoc_insertion_point(destructor:ei.CurrencyFlowBatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrencyFlowBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
}

void CurrencyFlowBatchRequest::ArenaDtor(void* object) {
  CurrencyFlowBatchRequest* _this = reinterpret_cast< CurrencyFlowBatchRequest* >(object);
  (void)_this;
}
void CurrencyFlowBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrencyFlowBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyFlowBatchRequest& CurrencyFlowBatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyFlowBatchRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void CurrencyFlowBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CurrencyFlowBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rinfo_ != nullptr);
    rinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyFlowBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.CurrencyFlowLog logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyFlowBatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CurrencyFlowBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.CurrencyFlowLog logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_logs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CurrencyFlowBatchRequest)
  return target;
}

size_t CurrencyFlowBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CurrencyFlowBatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CurrencyFlowLog logs = 1;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ei.BasicRequestInfo rinfo = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyFlowBatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CurrencyFlowBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyFlowBatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyFlowBatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CurrencyFlowBatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CurrencyFlowBatchRequest)
    MergeFrom(*source);
  }
}

void CurrencyFlowBatchRequest::MergeFrom(const CurrencyFlowBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CurrencyFlowBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from._internal_has_rinfo()) {
    _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
  }
}

void CurrencyFlowBatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CurrencyFlowBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyFlowBatchRequest::CopyFrom(const CurrencyFlowBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CurrencyFlowBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyFlowBatchRequest::IsInitialized() const {
  return true;
}

void CurrencyFlowBatchRequest::InternalSwap(CurrencyFlowBatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  logs_.InternalSwap(&other->logs_);
  swap(rinfo_, other->rinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyFlowBatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reward::InitAsDefaultInstance() {
}
class Reward::_Internal {
 public:
  using HasBits = decltype(std::declval<Reward>()._has_bits_);
  static void set_has_reward_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reward_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Reward::Reward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Reward)
}
Reward::Reward(const Reward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_sub_type()) {
    reward_sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_sub_type(),
      GetArena());
  }
  ::memcpy(&reward_amount_, &from.reward_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&reward_amount_)) + sizeof(reward_type_));
  // @@protoc_insertion_point(copy_constructor:ei.Reward)
}

void Reward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reward_ei_2eproto.base);
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_amount_ = 0;
  reward_type_ = 1;
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:ei.Reward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reward_sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reward::ArenaDtor(void* object) {
  Reward* _this = reinterpret_cast< Reward* >(object);
  (void)_this;
}
void Reward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reward& Reward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reward_ei_2eproto.base);
  return *internal_default_instance();
}


void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reward_sub_type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    reward_amount_ = 0;
    reward_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.RewardType reward_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::RewardType_IsValid(val))) {
            _internal_set_reward_type(static_cast<::ei::RewardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reward_sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reward_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Reward.reward_sub_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reward_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reward_amount(&has_bits);
          reward_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.RewardType reward_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reward_type(), target);
  }

  // optional string reward_sub_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_sub_type().data(), static_cast<int>(this->_internal_reward_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Reward.reward_sub_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reward_sub_type(), target);
  }

  // optional double reward_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reward_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Reward)
  return target;
}

size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Reward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string reward_sub_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_sub_type());
    }

    // optional double reward_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ei.RewardType reward_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const Reward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Reward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Reward)
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reward_sub_type(from._internal_reward_sub_type());
    }
    if (cached_has_bits & 0x00000002u) {
      reward_amount_ = from.reward_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      reward_type_ = from.reward_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  return true;
}

void Reward::InternalSwap(Reward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reward_sub_type_.Swap(&other->reward_sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reward_amount_, other->reward_amount_);
  swap(reward_type_, other->reward_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameModifier::InitAsDefaultInstance() {
}
class GameModifier::_Internal {
 public:
  using HasBits = decltype(std::declval<GameModifier>()._has_bits_);
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameModifier::GameModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.GameModifier)
}
GameModifier::GameModifier(const GameModifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&dimension_) -
    reinterpret_cast<char*>(&value_)) + sizeof(dimension_));
  // @@protoc_insertion_point(copy_constructor:ei.GameModifier)
}

void GameModifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameModifier_ei_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  dimension_ = 1;
}

GameModifier::~GameModifier() {
  // @@protoc_insertion_point(destructor:ei.GameModifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameModifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameModifier::ArenaDtor(void* object) {
  GameModifier* _this = reinterpret_cast< GameModifier* >(object);
  (void)_this;
}
void GameModifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameModifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameModifier& GameModifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameModifier_ei_2eproto.base);
  return *internal_default_instance();
}


void GameModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.GameModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    value_ = 0;
    dimension_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameModifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.GameModifier.GameDimension dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::GameModifier_GameDimension_IsValid(val))) {
            _internal_set_dimension(static_cast<::ei::GameModifier_GameDimension>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GameModifier.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameModifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.GameModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.GameModifier.GameDimension dimension = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dimension(), target);
  }

  // optional double value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GameModifier.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.GameModifier)
  return target;
}

size_t GameModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.GameModifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional double value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ei.GameModifier.GameDimension dimension = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dimension());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameModifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.GameModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const GameModifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameModifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.GameModifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.GameModifier)
    MergeFrom(*source);
  }
}

void GameModifier::MergeFrom(const GameModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.GameModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      dimension_ = from.dimension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameModifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.GameModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameModifier::CopyFrom(const GameModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.GameModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameModifier::IsInitialized() const {
  return true;
}

void GameModifier::InternalSwap(GameModifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
  swap(dimension_, other->dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameModifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract_Goal::InitAsDefaultInstance() {
}
class Contract_Goal::_Internal {
 public:
  using HasBits = decltype(std::declval<Contract_Goal>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reward_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reward_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Contract_Goal::Contract_Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Contract.Goal)
}
Contract_Goal::Contract_Goal(const Contract_Goal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_sub_type()) {
    reward_sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_sub_type(),
      GetArena());
  }
  ::memcpy(&target_amount_, &from.target_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&target_amount_)) + sizeof(reward_type_));
  // @@protoc_insertion_point(copy_constructor:ei.Contract.Goal)
}

void Contract_Goal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_Goal_ei_2eproto.base);
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_soul_eggs_) -
      reinterpret_cast<char*>(&target_amount_)) + sizeof(target_soul_eggs_));
  type_ = 1;
  reward_type_ = 1;
}

Contract_Goal::~Contract_Goal() {
  // @@protoc_insertion_point(destructor:ei.Contract.Goal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract_Goal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reward_sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contract_Goal::ArenaDtor(void* object) {
  Contract_Goal* _this = reinterpret_cast< Contract_Goal* >(object);
  (void)_this;
}
void Contract_Goal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract_Goal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract_Goal& Contract_Goal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_Goal_ei_2eproto.base);
  return *internal_default_instance();
}


void Contract_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Contract.Goal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reward_sub_type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&target_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_soul_eggs_) -
        reinterpret_cast<char*>(&target_amount_)) + sizeof(target_soul_eggs_));
    type_ = 1;
    reward_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract_Goal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.GoalType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::GoalType_IsValid(val))) {
            _internal_set_type(static_cast<::ei::GoalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double target_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_target_amount(&has_bits);
          target_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.RewardType reward_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::RewardType_IsValid(val))) {
            _internal_set_reward_type(static_cast<::ei::RewardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reward_sub_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reward_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.Goal.reward_sub_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reward_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_reward_amount(&has_bits);
          reward_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double target_soul_eggs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_target_soul_eggs(&has_bits);
          target_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract_Goal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Contract.Goal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.GoalType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double target_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_target_amount(), target);
  }

  // optional .ei.RewardType reward_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_type(), target);
  }

  // optional string reward_sub_type = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_sub_type().data(), static_cast<int>(this->_internal_reward_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.Goal.reward_sub_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reward_sub_type(), target);
  }

  // optional double reward_amount = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_reward_amount(), target);
  }

  // optional double target_soul_eggs = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_target_soul_eggs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Contract.Goal)
  return target;
}

size_t Contract_Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Contract.Goal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string reward_sub_type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_sub_type());
    }

    // optional double target_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reward_amount = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double target_soul_eggs = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .ei.GoalType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .ei.RewardType reward_type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract_Goal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Contract.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract_Goal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract_Goal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Contract.Goal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Contract.Goal)
    MergeFrom(*source);
  }
}

void Contract_Goal::MergeFrom(const Contract_Goal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Contract.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reward_sub_type(from._internal_reward_sub_type());
    }
    if (cached_has_bits & 0x00000002u) {
      target_amount_ = from.target_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      reward_amount_ = from.reward_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_soul_eggs_ = from.target_soul_eggs_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      reward_type_ = from.reward_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Contract_Goal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Contract.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract_Goal::CopyFrom(const Contract_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Contract.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract_Goal::IsInitialized() const {
  return true;
}

void Contract_Goal::InternalSwap(Contract_Goal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reward_sub_type_.Swap(&other->reward_sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contract_Goal, target_soul_eggs_)
      + sizeof(Contract_Goal::target_soul_eggs_)
      - PROTOBUF_FIELD_OFFSET(Contract_Goal, target_amount_)>(
          reinterpret_cast<char*>(&target_amount_),
          reinterpret_cast<char*>(&other->target_amount_));
  swap(type_, other->type_);
  swap(reward_type_, other->reward_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract_Goal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract_GoalSet::InitAsDefaultInstance() {
}
class Contract_GoalSet::_Internal {
 public:
};

Contract_GoalSet::Contract_GoalSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Contract.GoalSet)
}
Contract_GoalSet::Contract_GoalSet(const Contract_GoalSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      goals_(from.goals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.Contract.GoalSet)
}

void Contract_GoalSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_GoalSet_ei_2eproto.base);
}

Contract_GoalSet::~Contract_GoalSet() {
  // @@protoc_insertion_point(destructor:ei.Contract.GoalSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract_GoalSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Contract_GoalSet::ArenaDtor(void* object) {
  Contract_GoalSet* _this = reinterpret_cast< Contract_GoalSet* >(object);
  (void)_this;
}
void Contract_GoalSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract_GoalSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract_GoalSet& Contract_GoalSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_GoalSet_ei_2eproto.base);
  return *internal_default_instance();
}


void Contract_GoalSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Contract.GoalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract_GoalSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.Contract.Goal goals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract_GoalSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Contract.GoalSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.Contract.Goal goals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_goals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Contract.GoalSet)
  return target;
}

size_t Contract_GoalSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Contract.GoalSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Contract.Goal goals = 1;
  total_size += 1UL * this->_internal_goals_size();
  for (const auto& msg : this->goals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract_GoalSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Contract.GoalSet)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract_GoalSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract_GoalSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Contract.GoalSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Contract.GoalSet)
    MergeFrom(*source);
  }
}

void Contract_GoalSet::MergeFrom(const Contract_GoalSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Contract.GoalSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goals_.MergeFrom(from.goals_);
}

void Contract_GoalSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Contract.GoalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract_GoalSet::CopyFrom(const Contract_GoalSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Contract.GoalSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract_GoalSet::IsInitialized() const {
  return true;
}

void Contract_GoalSet::InternalSwap(Contract_GoalSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  goals_.InternalSwap(&other->goals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract_GoalSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract_GradeSpec::InitAsDefaultInstance() {
}
class Contract_GradeSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<Contract_GradeSpec>()._has_bits_);
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Contract_GradeSpec::Contract_GradeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goals_(arena),
  modifiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Contract.GradeSpec)
}
Contract_GradeSpec::Contract_GradeSpec(const Contract_GradeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      goals_(from.goals_),
      modifiers_(from.modifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_seconds_, &from.length_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&length_seconds_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:ei.Contract.GradeSpec)
}

void Contract_GradeSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_GradeSpec_ei_2eproto.base);
  ::memset(&length_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&length_seconds_)) + sizeof(grade_));
}

Contract_GradeSpec::~Contract_GradeSpec() {
  // @@protoc_insertion_point(destructor:ei.Contract.GradeSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract_GradeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Contract_GradeSpec::ArenaDtor(void* object) {
  Contract_GradeSpec* _this = reinterpret_cast< Contract_GradeSpec* >(object);
  (void)_this;
}
void Contract_GradeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract_GradeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract_GradeSpec& Contract_GradeSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_GradeSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void Contract_GradeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Contract.GradeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goals_.Clear();
  modifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&length_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&length_seconds_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract_GradeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract.PlayerGrade grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ei.Contract.Goal goals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.GameModifier modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double length_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_length_seconds(&has_bits);
          length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract_GradeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Contract.GradeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract.PlayerGrade grade = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_grade(), target);
  }

  // repeated .ei.Contract.Goal goals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goals(i), target, stream);
  }

  // repeated .ei.GameModifier modifiers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_modifiers(i), target, stream);
  }

  // optional double length_seconds = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_length_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Contract.GradeSpec)
  return target;
}

size_t Contract_GradeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Contract.GradeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Contract.Goal goals = 2;
  total_size += 1UL * this->_internal_goals_size();
  for (const auto& msg : this->goals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.GameModifier modifiers = 3;
  total_size += 1UL * this->_internal_modifiers_size();
  for (const auto& msg : this->modifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double length_seconds = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ei.Contract.PlayerGrade grade = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract_GradeSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Contract.GradeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract_GradeSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract_GradeSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Contract.GradeSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Contract.GradeSpec)
    MergeFrom(*source);
  }
}

void Contract_GradeSpec::MergeFrom(const Contract_GradeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Contract.GradeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goals_.MergeFrom(from.goals_);
  modifiers_.MergeFrom(from.modifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      length_seconds_ = from.length_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Contract_GradeSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Contract.GradeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract_GradeSpec::CopyFrom(const Contract_GradeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Contract.GradeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract_GradeSpec::IsInitialized() const {
  return true;
}

void Contract_GradeSpec::InternalSwap(Contract_GradeSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  goals_.InternalSwap(&other->goals_);
  modifiers_.InternalSwap(&other->modifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contract_GradeSpec, grade_)
      + sizeof(Contract_GradeSpec::grade_)
      - PROTOBUF_FIELD_OFFSET(Contract_GradeSpec, length_seconds_)>(
          reinterpret_cast<char*>(&length_seconds_),
          reinterpret_cast<char*>(&other->length_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract_GradeSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract::InitAsDefaultInstance() {
}
class Contract::_Internal {
 public:
  using HasBits = decltype(std::declval<Contract>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_egg(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coop_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_coop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_boosts(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_minutes_per_token(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chicken_run_cooldown_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_length_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_leggacy(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cc_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Contract::Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goals_(arena),
  goal_sets_(arena),
  grade_specs_(arena),
  default_shell_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.Contract)
}
Contract::Contract(const Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      goals_(from.goals_),
      goal_sets_(from.goal_sets_),
      grade_specs_(from.grade_specs_),
      default_shell_ids_(from.default_shell_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_season_id()) {
    season_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_season_id(),
      GetArena());
  }
  ::memcpy(&expiration_time_, &from.expiration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&chicken_run_cooldown_minutes_) -
    reinterpret_cast<char*>(&expiration_time_)) + sizeof(chicken_run_cooldown_minutes_));
  // @@protoc_insertion_point(copy_constructor:ei.Contract)
}

void Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiration_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&expiration_time_)) + sizeof(start_time_));
  egg_ = 1;
  minutes_per_token_ = 60;
  chicken_run_cooldown_minutes_ = 180;
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:ei.Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  season_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contract::ArenaDtor(void* object) {
  Contract* _this = reinterpret_cast< Contract* >(object);
  (void)_this;
}
void Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract& Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_ei_2eproto.base);
  return *internal_default_instance();
}


void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goals_.Clear();
  goal_sets_.Clear();
  grade_specs_.Clear();
  default_shell_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      season_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&expiration_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_coop_size_) -
        reinterpret_cast<char*>(&expiration_time_)) + sizeof(max_coop_size_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&max_boosts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&max_boosts_)) + sizeof(start_time_));
  }
  if (cached_has_bits & 0x00070000u) {
    egg_ = 1;
    minutes_per_token_ = 60;
    chicken_run_cooldown_minutes_ = 180;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Egg egg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ei.Contract.Goal goals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool coop_allowed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_coop_allowed(&has_bits);
          coop_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_coop_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_coop_size(&has_bits);
          max_coop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double expiration_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_length_seconds(&has_bits);
          length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_boosts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_boosts(&has_bits);
          max_boosts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_soul_eggs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_max_soul_eggs(&has_bits);
          max_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_client_version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_min_client_version(&has_bits);
          min_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double minutes_per_token = 15 [default = 60];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_minutes_per_token(&has_bits);
          minutes_per_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Contract.GoalSet goal_sets = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_goal_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double start_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double chicken_run_cooldown_minutes = 18 [default = 180];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_chicken_run_cooldown_minutes(&has_bits);
          chicken_run_cooldown_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool leggacy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_leggacy(&has_bits);
          leggacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Contract.GradeSpec grade_specs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_grade_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string key = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cc_only = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cc_only(&has_bits);
          cc_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string season_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_season_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.season_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string default_shell_ids = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_default_shell_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.Contract.default_shell_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional .ei.Egg egg = 2;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_egg(), target);
  }

  // repeated .ei.Contract.Goal goals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_goals(i), target, stream);
  }

  // optional bool coop_allowed = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_coop_allowed(), target);
  }

  // optional uint32 max_coop_size = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_coop_size(), target);
  }

  // optional double expiration_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_expiration_time(), target);
  }

  // optional double length_seconds = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_length_seconds(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // optional string description = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.description");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_description(), target);
  }

  // optional bool debug = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_debug(), target);
  }

  // optional uint32 max_boosts = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_boosts(), target);
  }

  // optional double max_soul_eggs = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_soul_eggs(), target);
  }

  // optional uint32 min_client_version = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_min_client_version(), target);
  }

  // optional double minutes_per_token = 15 [default = 60];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_minutes_per_token(), target);
  }

  // repeated .ei.Contract.GoalSet goal_sets = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goal_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_goal_sets(i), target, stream);
  }

  // optional double start_time = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_start_time(), target);
  }

  // optional double chicken_run_cooldown_minutes = 18 [default = 180];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_chicken_run_cooldown_minutes(), target);
  }

  // optional bool leggacy = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_leggacy(), target);
  }

  // repeated .ei.Contract.GradeSpec grade_specs = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grade_specs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_grade_specs(i), target, stream);
  }

  // optional string key = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.key");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_key(), target);
  }

  // optional bool cc_only = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_cc_only(), target);
  }

  // optional string season_id = 23;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_season_id().data(), static_cast<int>(this->_internal_season_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.season_id");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_season_id(), target);
  }

  // repeated string default_shell_ids = 24;
  for (int i = 0, n = this->_internal_default_shell_ids_size(); i < n; i++) {
    const auto& s = this->_internal_default_shell_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.Contract.default_shell_ids");
    target = stream->WriteString(24, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.Contract)
  return target;
}

size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Contract.Goal goals = 3;
  total_size += 1UL * this->_internal_goals_size();
  for (const auto& msg : this->goals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Contract.GoalSet goal_sets = 16;
  total_size += 2UL * this->_internal_goal_sets_size();
  for (const auto& msg : this->goal_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Contract.GradeSpec grade_specs = 20;
  total_size += 2UL * this->_internal_grade_specs_size();
  for (const auto& msg : this->grade_specs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string default_shell_ids = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(default_shell_ids_.size());
  for (int i = 0, n = default_shell_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      default_shell_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string key = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string season_id = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_season_id());
    }

    // optional double expiration_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double length_seconds = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 max_coop_size = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_coop_size());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 max_boosts = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_boosts());
    }

    // optional double max_soul_eggs = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 min_client_version = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_client_version());
    }

    // optional bool coop_allowed = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool leggacy = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool cc_only = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool debug = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional double start_time = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .ei.Egg egg = 2;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg());
    }

    // optional double minutes_per_token = 15 [default = 60];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double chicken_run_cooldown_minutes = 18 [default = 180];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.Contract)
    MergeFrom(*source);
  }
}

void Contract::MergeFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goals_.MergeFrom(from.goals_);
  goal_sets_.MergeFrom(from.goal_sets_);
  grade_specs_.MergeFrom(from.grade_specs_);
  default_shell_ids_.MergeFrom(from.default_shell_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_season_id(from._internal_season_id());
    }
    if (cached_has_bits & 0x00000020u) {
      expiration_time_ = from.expiration_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_seconds_ = from.length_seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_coop_size_ = from.max_coop_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_boosts_ = from.max_boosts_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_soul_eggs_ = from.max_soul_eggs_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_client_version_ = from.min_client_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      coop_allowed_ = from.coop_allowed_;
    }
    if (cached_has_bits & 0x00001000u) {
      leggacy_ = from.leggacy_;
    }
    if (cached_has_bits & 0x00002000u) {
      cc_only_ = from.cc_only_;
    }
    if (cached_has_bits & 0x00004000u) {
      debug_ = from.debug_;
    }
    if (cached_has_bits & 0x00008000u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      egg_ = from.egg_;
    }
    if (cached_has_bits & 0x00020000u) {
      minutes_per_token_ = from.minutes_per_token_;
    }
    if (cached_has_bits & 0x00040000u) {
      chicken_run_cooldown_minutes_ = from.chicken_run_cooldown_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::InternalSwap(Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  goals_.InternalSwap(&other->goals_);
  goal_sets_.InternalSwap(&other->goal_sets_);
  grade_specs_.InternalSwap(&other->grade_specs_);
  default_shell_ids_.InternalSwap(&other->default_shell_ids_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  season_id_.Swap(&other->season_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contract, start_time_)
      + sizeof(Contract::start_time_)
      - PROTOBUF_FIELD_OFFSET(Contract, expiration_time_)>(
          reinterpret_cast<char*>(&expiration_time_),
          reinterpret_cast<char*>(&other->expiration_time_));
  swap(egg_, other->egg_);
  swap(minutes_per_token_, other->minutes_per_token_);
  swap(chicken_run_cooldown_minutes_, other->chicken_run_cooldown_minutes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractPlayerInfo::InitAsDefaultInstance() {
}
class ContractPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractPlayerInfo>()._has_bits_);
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_cxp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_season_cxp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_grade_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_grade_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_grade_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_issue_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_evaluation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_evaluation_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractPlayerInfo::ContractPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unread_evaluations_(arena),
  issues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractPlayerInfo)
}
ContractPlayerInfo::ContractPlayerInfo(const ContractPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unread_evaluations_(from.unread_evaluations_),
      issues_(from.issues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_evaluation_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_evaluation_version()) {
    last_evaluation_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_evaluation_version(),
      GetArena());
  }
  ::memcpy(&total_cxp_, &from.total_cxp_,
    static_cast<size_t>(reinterpret_cast<char*>(&issue_score_) -
    reinterpret_cast<char*>(&total_cxp_)) + sizeof(issue_score_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractPlayerInfo)
}

void ContractPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractPlayerInfo_ei_2eproto.base);
  last_evaluation_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_cxp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issue_score_) -
      reinterpret_cast<char*>(&total_cxp_)) + sizeof(issue_score_));
}

ContractPlayerInfo::~ContractPlayerInfo() {
  // @@protoc_insertion_point(destructor:ei.ContractPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_evaluation_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractPlayerInfo::ArenaDtor(void* object) {
  ContractPlayerInfo* _this = reinterpret_cast< ContractPlayerInfo* >(object);
  (void)_this;
}
void ContractPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractPlayerInfo& ContractPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractPlayerInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unread_evaluations_.Clear();
  issues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    last_evaluation_version_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&total_cxp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_grade_score_) -
        reinterpret_cast<char*>(&total_cxp_)) + sizeof(target_grade_score_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&soul_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issue_score_) -
        reinterpret_cast<char*>(&soul_power_)) + sizeof(issue_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract.PlayerGrade grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double total_cxp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_total_cxp(&has_bits);
          total_cxp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractPlayerInfo.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractPlayerInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::ContractPlayerInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double last_evaluation_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_last_evaluation_time(&has_bits);
          last_evaluation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string last_evaluation_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_evaluation_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractPlayerInfo.last_evaluation_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractEvaluation unread_evaluations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unread_evaluations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double grade_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_grade_score(&has_bits);
          grade_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double target_soul_power = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_target_soul_power(&has_bits);
          target_soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double target_grade_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_target_grade_score(&has_bits);
          target_grade_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractEvaluation.PoorBehavior issues = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ei::ContractEvaluation_PoorBehavior_IsValid(val))) {
              _internal_add_issues(static_cast<::ei::ContractEvaluation_PoorBehavior>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_issues(), ptr, ctx, ::ei::ContractEvaluation_PoorBehavior_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double grade_progress = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_grade_progress(&has_bits);
          grade_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double season_cxp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_season_cxp(&has_bits);
          season_cxp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double issue_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_issue_score(&has_bits);
          issue_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract.PlayerGrade grade = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_grade(), target);
  }

  // optional double total_cxp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_cxp(), target);
  }

  // optional .ei.ContractPlayerInfo.Status status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional double last_evaluation_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_evaluation_time(), target);
  }

  // optional string last_evaluation_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_evaluation_version().data(), static_cast<int>(this->_internal_last_evaluation_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractPlayerInfo.last_evaluation_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last_evaluation_version(), target);
  }

  // repeated .ei.ContractEvaluation unread_evaluations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unread_evaluations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_unread_evaluations(i), target, stream);
  }

  // optional double grade_score = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_grade_score(), target);
  }

  // optional double target_soul_power = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_target_soul_power(), target);
  }

  // optional double target_grade_score = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_target_grade_score(), target);
  }

  // optional double soul_power = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_soul_power(), target);
  }

  // repeated .ei.ContractEvaluation.PoorBehavior issues = 11;
  for (int i = 0, n = this->_internal_issues_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        11, this->_internal_issues(i), target);
  }

  // optional double grade_progress = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_grade_progress(), target);
  }

  // optional double season_cxp = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_season_cxp(), target);
  }

  // optional double issue_score = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_issue_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractPlayerInfo)
  return target;
}

size_t ContractPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractEvaluation unread_evaluations = 6;
  total_size += 1UL * this->_internal_unread_evaluations_size();
  for (const auto& msg : this->unread_evaluations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ContractEvaluation.PoorBehavior issues = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_issues_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_issues(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string last_evaluation_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_evaluation_version());
    }

    // optional double total_cxp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ei.Contract.PlayerGrade grade = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional .ei.ContractPlayerInfo.Status status = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional double last_evaluation_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double grade_score = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double target_soul_power = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double target_grade_score = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double soul_power = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double grade_progress = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double season_cxp = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double issue_score = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractPlayerInfo)
    MergeFrom(*source);
  }
}

void ContractPlayerInfo::MergeFrom(const ContractPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unread_evaluations_.MergeFrom(from.unread_evaluations_);
  issues_.MergeFrom(from.issues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_evaluation_version(from._internal_last_evaluation_version());
    }
    if (cached_has_bits & 0x00000002u) {
      total_cxp_ = from.total_cxp_;
    }
    if (cached_has_bits & 0x00000004u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_evaluation_time_ = from.last_evaluation_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      grade_score_ = from.grade_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      target_soul_power_ = from.target_soul_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      target_grade_score_ = from.target_grade_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00000200u) {
      grade_progress_ = from.grade_progress_;
    }
    if (cached_has_bits & 0x00000400u) {
      season_cxp_ = from.season_cxp_;
    }
    if (cached_has_bits & 0x00000800u) {
      issue_score_ = from.issue_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractPlayerInfo::CopyFrom(const ContractPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractPlayerInfo::IsInitialized() const {
  return true;
}

void ContractPlayerInfo::InternalSwap(ContractPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unread_evaluations_.InternalSwap(&other->unread_evaluations_);
  issues_.InternalSwap(&other->issues_);
  last_evaluation_version_.Swap(&other->last_evaluation_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractPlayerInfo, issue_score_)
      + sizeof(ContractPlayerInfo::issue_score_)
      - PROTOBUF_FIELD_OFFSET(ContractPlayerInfo, total_cxp_)>(
          reinterpret_cast<char*>(&total_cxp_),
          reinterpret_cast<char*>(&other->total_cxp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractEvaluation::InitAsDefaultInstance() {
}
class ContractEvaluation::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractEvaluation>()._has_bits_);
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cxp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_cxp_change(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_grade_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_old_league(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_old_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_contribution_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_completion_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_original_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_coop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_solo(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_last_contribution_time(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chicken_runs_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gift_tokens_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gift_tokens_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_gift_token_value_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_gift_token_value_received(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_boost_token_allotment(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_buff_time_value(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_teamwork_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_other_bonuses(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_counted_in_season(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_evaluation_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

ContractEvaluation::ContractEvaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notes_(arena),
  issues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractEvaluation)
}
ContractEvaluation::ContractEvaluation(const ContractEvaluation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      notes_(from.notes_),
      issues_(from.issues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_season_id()) {
    season_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_season_id(),
      GetArena());
  }
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  ::memcpy(&cxp_, &from.cxp_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluation_start_time_) -
    reinterpret_cast<char*>(&cxp_)) + sizeof(evaluation_start_time_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractEvaluation)
}

void ContractEvaluation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractEvaluation_ei_2eproto.base);
  season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cxp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluation_start_time_) -
      reinterpret_cast<char*>(&cxp_)) + sizeof(evaluation_start_time_));
}

ContractEvaluation::~ContractEvaluation() {
  // @@protoc_insertion_point(destructor:ei.ContractEvaluation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractEvaluation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  season_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractEvaluation::ArenaDtor(void* object) {
  ContractEvaluation* _this = reinterpret_cast< ContractEvaluation* >(object);
  (void)_this;
}
void ContractEvaluation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractEvaluation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractEvaluation& ContractEvaluation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractEvaluation_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractEvaluation::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractEvaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.Clear();
  issues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      season_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&cxp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contribution_ratio_) -
        reinterpret_cast<char*>(&cxp_)) + sizeof(contribution_ratio_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&completion_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamwork_score_) -
        reinterpret_cast<char*>(&completion_percent_)) + sizeof(teamwork_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&other_bonuses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&counted_in_season_) -
        reinterpret_cast<char*>(&other_bonuses_)) + sizeof(counted_in_season_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&time_cheats_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&evaluation_start_time_) -
        reinterpret_cast<char*>(&time_cheats_)) + sizeof(evaluation_start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractEvaluation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double cxp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_cxp(&has_bits);
          cxp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 grade_performance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grade_performance(&has_bits);
          grade_performance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double contribution_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_contribution_ratio(&has_bits);
          contribution_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double completion_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_completion_percent(&has_bits);
          completion_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double completion_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_completion_time(&has_bits);
          completion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 chicken_runs_sent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_chicken_runs_sent(&has_bits);
          chicken_runs_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gift_tokens_sent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gift_tokens_sent(&has_bits);
          gift_tokens_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 old_league = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_old_league(&has_bits);
          old_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool old_goals = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_old_goals(&has_bits);
          old_goals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double original_length = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_original_length(&has_bits);
          original_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string notes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluation.notes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double teamwork_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_teamwork_score(&has_bits);
          teamwork_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double other_bonuses = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_other_bonuses(&has_bits);
          other_bonuses_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 gift_tokens_received = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_gift_tokens_received(&has_bits);
          gift_tokens_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_token_allotment = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_boost_token_allotment(&has_bits);
          boost_token_allotment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double buff_time_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_buff_time_value(&has_bits);
          buff_time_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 coop_size = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_coop_size(&has_bits);
          coop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractEvaluation.PoorBehavior issues = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ei::ContractEvaluation_PoorBehavior_IsValid(val))) {
              _internal_add_issues(static_cast<::ei::ContractEvaluation_PoorBehavior>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_issues(), ptr, ctx, ::ei::ContractEvaluation_PoorBehavior_IsValid, &_internal_metadata_, 19);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool counted_in_season = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_counted_in_season(&has_bits);
          counted_in_season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string season_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_season_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluation.season_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_contribution_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_last_contribution_time(&has_bits);
          last_contribution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool replay = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_replay(&has_bits);
          replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cxp_change = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_cxp_change(&has_bits);
          cxp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool solo = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_solo(&has_bits);
          solo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_cheats = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_time_cheats(&has_bits);
          time_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gift_token_value_sent = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_gift_token_value_sent(&has_bits);
          gift_token_value_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gift_token_value_received = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_gift_token_value_received(&has_bits);
          gift_token_value_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string contract_identifier = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluation.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluation.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluation.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double evaluation_start_time = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_evaluation_start_time(&has_bits);
          evaluation_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractEvaluation.Status status = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractEvaluation_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::ContractEvaluation_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractEvaluation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractEvaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cxp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cxp(), target);
  }

  // optional int32 grade_performance = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grade_performance(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_grade(), target);
  }

  // optional double contribution_ratio = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_contribution_ratio(), target);
  }

  // optional double completion_percent = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_completion_percent(), target);
  }

  // optional double completion_time = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_completion_time(), target);
  }

  // optional uint32 chicken_runs_sent = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chicken_runs_sent(), target);
  }

  // optional uint32 gift_tokens_sent = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_gift_tokens_sent(), target);
  }

  // optional int32 old_league = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_old_league(), target);
  }

  // optional bool old_goals = 10;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_old_goals(), target);
  }

  // optional double original_length = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_original_length(), target);
  }

  // repeated string notes = 12;
  for (int i = 0, n = this->_internal_notes_size(); i < n; i++) {
    const auto& s = this->_internal_notes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluation.notes");
    target = stream->WriteString(12, s, target);
  }

  // optional double teamwork_score = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_teamwork_score(), target);
  }

  // optional double other_bonuses = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_other_bonuses(), target);
  }

  // optional uint32 gift_tokens_received = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_gift_tokens_received(), target);
  }

  // optional uint32 boost_token_allotment = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_boost_token_allotment(), target);
  }

  // optional double buff_time_value = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_buff_time_value(), target);
  }

  // optional uint32 coop_size = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_coop_size(), target);
  }

  // repeated .ei.ContractEvaluation.PoorBehavior issues = 19;
  for (int i = 0, n = this->_internal_issues_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        19, this->_internal_issues(i), target);
  }

  // optional bool counted_in_season = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_counted_in_season(), target);
  }

  // optional string season_id = 21;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_season_id().data(), static_cast<int>(this->_internal_season_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluation.season_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_season_id(), target);
  }

  // optional double last_contribution_time = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_last_contribution_time(), target);
  }

  // optional double soul_power = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_soul_power(), target);
  }

  // optional bool replay = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_replay(), target);
  }

  // optional double cxp_change = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_cxp_change(), target);
  }

  // optional bool solo = 26;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_solo(), target);
  }

  // optional uint32 time_cheats = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_time_cheats(), target);
  }

  // optional double gift_token_value_sent = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_gift_token_value_sent(), target);
  }

  // optional double gift_token_value_received = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_gift_token_value_received(), target);
  }

  // optional string contract_identifier = 40;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluation.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 41;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluation.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_coop_identifier(), target);
  }

  // optional string version = 50;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluation.version");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_version(), target);
  }

  // optional double evaluation_start_time = 51;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_evaluation_start_time(), target);
  }

  // optional .ei.ContractEvaluation.Status status = 52;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      52, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractEvaluation)
  return target;
}

size_t ContractEvaluation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractEvaluation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notes = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notes_.size());
  for (int i = 0, n = notes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notes_.Get(i));
  }

  // repeated .ei.ContractEvaluation.PoorBehavior issues = 19;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_issues_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_issues(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string season_id = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_season_id());
    }

    // optional string contract_identifier = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 41;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string version = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional double cxp = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 grade_performance = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_grade_performance());
    }

    // optional .ei.Contract.PlayerGrade grade = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional double contribution_ratio = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double completion_percent = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double completion_time = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 chicken_runs_sent = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chicken_runs_sent());
    }

    // optional uint32 gift_tokens_sent = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gift_tokens_sent());
    }

    // optional double original_length = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional int32 old_league = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_old_league());
    }

    // optional uint32 gift_tokens_received = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gift_tokens_received());
    }

    // optional double teamwork_score = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double other_bonuses = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double buff_time_value = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional uint32 boost_token_allotment = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_token_allotment());
    }

    // optional uint32 coop_size = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coop_size());
    }

    // optional bool replay = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool old_goals = 10;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool solo = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool counted_in_season = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 time_cheats = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_cheats());
    }

    // optional double last_contribution_time = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double soul_power = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double cxp_change = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double gift_token_value_sent = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double gift_token_value_received = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional .ei.ContractEvaluation.Status status = 52;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional double evaluation_start_time = 51;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractEvaluation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractEvaluation)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractEvaluation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractEvaluation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractEvaluation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractEvaluation)
    MergeFrom(*source);
  }
}

void ContractEvaluation::MergeFrom(const ContractEvaluation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractEvaluation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_.MergeFrom(from.notes_);
  issues_.MergeFrom(from.issues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_season_id(from._internal_season_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000010u) {
      cxp_ = from.cxp_;
    }
    if (cached_has_bits & 0x00000020u) {
      grade_performance_ = from.grade_performance_;
    }
    if (cached_has_bits & 0x00000040u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000080u) {
      contribution_ratio_ = from.contribution_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      completion_percent_ = from.completion_percent_;
    }
    if (cached_has_bits & 0x00000200u) {
      completion_time_ = from.completion_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      chicken_runs_sent_ = from.chicken_runs_sent_;
    }
    if (cached_has_bits & 0x00000800u) {
      gift_tokens_sent_ = from.gift_tokens_sent_;
    }
    if (cached_has_bits & 0x00001000u) {
      original_length_ = from.original_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      old_league_ = from.old_league_;
    }
    if (cached_has_bits & 0x00004000u) {
      gift_tokens_received_ = from.gift_tokens_received_;
    }
    if (cached_has_bits & 0x00008000u) {
      teamwork_score_ = from.teamwork_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      other_bonuses_ = from.other_bonuses_;
    }
    if (cached_has_bits & 0x00020000u) {
      buff_time_value_ = from.buff_time_value_;
    }
    if (cached_has_bits & 0x00040000u) {
      boost_token_allotment_ = from.boost_token_allotment_;
    }
    if (cached_has_bits & 0x00080000u) {
      coop_size_ = from.coop_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      replay_ = from.replay_;
    }
    if (cached_has_bits & 0x00200000u) {
      old_goals_ = from.old_goals_;
    }
    if (cached_has_bits & 0x00400000u) {
      solo_ = from.solo_;
    }
    if (cached_has_bits & 0x00800000u) {
      counted_in_season_ = from.counted_in_season_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      time_cheats_ = from.time_cheats_;
    }
    if (cached_has_bits & 0x02000000u) {
      last_contribution_time_ = from.last_contribution_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x08000000u) {
      cxp_change_ = from.cxp_change_;
    }
    if (cached_has_bits & 0x10000000u) {
      gift_token_value_sent_ = from.gift_token_value_sent_;
    }
    if (cached_has_bits & 0x20000000u) {
      gift_token_value_received_ = from.gift_token_value_received_;
    }
    if (cached_has_bits & 0x40000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x80000000u) {
      evaluation_start_time_ = from.evaluation_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractEvaluation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractEvaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractEvaluation::CopyFrom(const ContractEvaluation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractEvaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractEvaluation::IsInitialized() const {
  return true;
}

void ContractEvaluation::InternalSwap(ContractEvaluation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notes_.InternalSwap(&other->notes_);
  issues_.InternalSwap(&other->issues_);
  season_id_.Swap(&other->season_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractEvaluation, evaluation_start_time_)
      + sizeof(ContractEvaluation::evaluation_start_time_)
      - PROTOBUF_FIELD_OFFSET(ContractEvaluation, cxp_)>(
          reinterpret_cast<char*>(&cxp_),
          reinterpret_cast<char*>(&other->cxp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractEvaluation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCitation::InitAsDefaultInstance() {
}
class ContractCitation::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCitation>()._has_bits_);
  static void set_has_issue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractCitation::ContractCitation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCitation)
}
ContractCitation::ContractCitation(const ContractCitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractCitation)
}

void ContractCitation::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(grade_));
}

ContractCitation::~ContractCitation() {
  // @@protoc_insertion_point(destructor:ei.ContractCitation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCitation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractCitation::ArenaDtor(void* object) {
  ContractCitation* _this = reinterpret_cast< ContractCitation* >(object);
  (void)_this;
}
void ContractCitation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCitation& ContractCitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCitation_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCitation::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ContractEvaluation.PoorBehavior issue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractEvaluation_PoorBehavior_IsValid(val))) {
            _internal_set_issue(static_cast<::ei::ContractEvaluation_PoorBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCitation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ContractEvaluation.PoorBehavior issue = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_issue(), target);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCitation)
  return target;
}

size_t ContractCitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCitation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ei.ContractEvaluation.PoorBehavior issue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_issue());
    }

    // optional .ei.Contract.PlayerGrade grade = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCitation)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCitation)
    MergeFrom(*source);
  }
}

void ContractCitation::MergeFrom(const ContractCitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      issue_ = from.issue_;
    }
    if (cached_has_bits & 0x00000004u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCitation::CopyFrom(const ContractCitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCitation::IsInitialized() const {
  return true;
}

void ContractCitation::InternalSwap(ContractCitation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCitation, grade_)
      + sizeof(ContractCitation::grade_)
      - PROTOBUF_FIELD_OFFSET(ContractCitation, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractEvaluationBatch_Pair::InitAsDefaultInstance() {
  ::ei::_ContractEvaluationBatch_Pair_default_instance_._instance.get_mutable()->cev_ = const_cast< ::ei::ContractEvaluation*>(
      ::ei::ContractEvaluation::internal_default_instance());
}
class ContractEvaluationBatch_Pair::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractEvaluationBatch_Pair>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ContractEvaluation& cev(const ContractEvaluationBatch_Pair* msg);
  static void set_has_cev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::ContractEvaluation&
ContractEvaluationBatch_Pair::_Internal::cev(const ContractEvaluationBatch_Pair* msg) {
  return *msg->cev_;
}
ContractEvaluationBatch_Pair::ContractEvaluationBatch_Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractEvaluationBatch.Pair)
}
ContractEvaluationBatch_Pair::ContractEvaluationBatch_Pair(const ContractEvaluationBatch_Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_cev()) {
    cev_ = new ::ei::ContractEvaluation(*from.cev_);
  } else {
    cev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.ContractEvaluationBatch.Pair)
}

void ContractEvaluationBatch_Pair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractEvaluationBatch_Pair_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cev_ = nullptr;
}

ContractEvaluationBatch_Pair::~ContractEvaluationBatch_Pair() {
  // @@protoc_insertion_point(destructor:ei.ContractEvaluationBatch.Pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractEvaluationBatch_Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cev_;
}

void ContractEvaluationBatch_Pair::ArenaDtor(void* object) {
  ContractEvaluationBatch_Pair* _this = reinterpret_cast< ContractEvaluationBatch_Pair* >(object);
  (void)_this;
}
void ContractEvaluationBatch_Pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractEvaluationBatch_Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractEvaluationBatch_Pair& ContractEvaluationBatch_Pair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractEvaluationBatch_Pair_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractEvaluationBatch_Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractEvaluationBatch.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cev_ != nullptr);
      cev_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractEvaluationBatch_Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractEvaluationBatch.Pair.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractEvaluation cev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractEvaluationBatch_Pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractEvaluationBatch.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractEvaluationBatch.Pair.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional .ei.ContractEvaluation cev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cev(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractEvaluationBatch.Pair)
  return target;
}

size_t ContractEvaluationBatch_Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractEvaluationBatch.Pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional .ei.ContractEvaluation cev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cev_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractEvaluationBatch_Pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractEvaluationBatch.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractEvaluationBatch_Pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractEvaluationBatch_Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractEvaluationBatch.Pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractEvaluationBatch.Pair)
    MergeFrom(*source);
  }
}

void ContractEvaluationBatch_Pair::MergeFrom(const ContractEvaluationBatch_Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractEvaluationBatch.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cev()->::ei::ContractEvaluation::MergeFrom(from._internal_cev());
    }
  }
}

void ContractEvaluationBatch_Pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractEvaluationBatch.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractEvaluationBatch_Pair::CopyFrom(const ContractEvaluationBatch_Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractEvaluationBatch.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractEvaluationBatch_Pair::IsInitialized() const {
  return true;
}

void ContractEvaluationBatch_Pair::InternalSwap(ContractEvaluationBatch_Pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cev_, other->cev_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractEvaluationBatch_Pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractEvaluationBatch::InitAsDefaultInstance() {
}
class ContractEvaluationBatch::_Internal {
 public:
};

ContractEvaluationBatch::ContractEvaluationBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  evals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractEvaluationBatch)
}
ContractEvaluationBatch::ContractEvaluationBatch(const ContractEvaluationBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evals_(from.evals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ContractEvaluationBatch)
}

void ContractEvaluationBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractEvaluationBatch_ei_2eproto.base);
}

ContractEvaluationBatch::~ContractEvaluationBatch() {
  // @@protoc_insertion_point(destructor:ei.ContractEvaluationBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractEvaluationBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractEvaluationBatch::ArenaDtor(void* object) {
  ContractEvaluationBatch* _this = reinterpret_cast< ContractEvaluationBatch* >(object);
  (void)_this;
}
void ContractEvaluationBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractEvaluationBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractEvaluationBatch& ContractEvaluationBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractEvaluationBatch_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractEvaluationBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractEvaluationBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractEvaluationBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ContractEvaluationBatch.Pair evals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractEvaluationBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractEvaluationBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ContractEvaluationBatch.Pair evals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_evals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractEvaluationBatch)
  return target;
}

size_t ContractEvaluationBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractEvaluationBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractEvaluationBatch.Pair evals = 1;
  total_size += 1UL * this->_internal_evals_size();
  for (const auto& msg : this->evals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractEvaluationBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractEvaluationBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractEvaluationBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractEvaluationBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractEvaluationBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractEvaluationBatch)
    MergeFrom(*source);
  }
}

void ContractEvaluationBatch::MergeFrom(const ContractEvaluationBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractEvaluationBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evals_.MergeFrom(from.evals_);
}

void ContractEvaluationBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractEvaluationBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractEvaluationBatch::CopyFrom(const ContractEvaluationBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractEvaluationBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractEvaluationBatch::IsInitialized() const {
  return true;
}

void ContractEvaluationBatch::InternalSwap(ContractEvaluationBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  evals_.InternalSwap(&other->evals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractEvaluationBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopCompletionSnapshot_ContributorSnapshot::InitAsDefaultInstance() {
}
class CoopCompletionSnapshot_ContributorSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CoopCompletionSnapshot_ContributorSnapshot>()._has_bits_);
  static void set_has_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_contribution_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tokens_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CoopCompletionSnapshot_ContributorSnapshot::CoopCompletionSnapshot_ContributorSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopCompletionSnapshot.ContributorSnapshot)
}
CoopCompletionSnapshot_ContributorSnapshot::CoopCompletionSnapshot_ContributorSnapshot(const CoopCompletionSnapshot_ContributorSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ::memcpy(&contribution_, &from.contribution_,
    static_cast<size_t>(reinterpret_cast<char*>(&finalized_) -
    reinterpret_cast<char*>(&contribution_)) + sizeof(finalized_));
  // @@protoc_insertion_point(copy_constructor:ei.CoopCompletionSnapshot.ContributorSnapshot)
}

void CoopCompletionSnapshot_ContributorSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contribution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finalized_) -
      reinterpret_cast<char*>(&contribution_)) + sizeof(finalized_));
}

CoopCompletionSnapshot_ContributorSnapshot::~CoopCompletionSnapshot_ContributorSnapshot() {
  // @@protoc_insertion_point(destructor:ei.CoopCompletionSnapshot.ContributorSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopCompletionSnapshot_ContributorSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoopCompletionSnapshot_ContributorSnapshot::ArenaDtor(void* object) {
  CoopCompletionSnapshot_ContributorSnapshot* _this = reinterpret_cast< CoopCompletionSnapshot_ContributorSnapshot* >(object);
  (void)_this;
}
void CoopCompletionSnapshot_ContributorSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopCompletionSnapshot_ContributorSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopCompletionSnapshot_ContributorSnapshot& CoopCompletionSnapshot_ContributorSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopCompletionSnapshot_ContributorSnapshot_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopCompletionSnapshot_ContributorSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&contribution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finalized_) -
        reinterpret_cast<char*>(&contribution_)) + sizeof(finalized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopCompletionSnapshot_ContributorSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double contribution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_contribution(&has_bits);
          contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CoopCompletionSnapshot.ContributorSnapshot.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tokens(&has_bits);
          tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tokens_spent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tokens_spent(&has_bits);
          tokens_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_contribution_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_last_contribution_time(&has_bits);
          last_contribution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool finalized = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopCompletionSnapshot_ContributorSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double contribution = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_contribution(), target);
  }

  // optional double soul_power = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_soul_power(), target);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CoopCompletionSnapshot.ContributorSnapshot.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional uint32 tokens = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tokens(), target);
  }

  // optional uint32 tokens_spent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tokens_spent(), target);
  }

  // optional double last_contribution_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_last_contribution_time(), target);
  }

  // optional bool finalized = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_finalized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopCompletionSnapshot.ContributorSnapshot)
  return target;
}

size_t CoopCompletionSnapshot_ContributorSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string user_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional double contribution = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double soul_power = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 tokens = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens());
    }

    // optional uint32 tokens_spent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens_spent());
    }

    // optional double last_contribution_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool finalized = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopCompletionSnapshot_ContributorSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopCompletionSnapshot_ContributorSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopCompletionSnapshot_ContributorSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopCompletionSnapshot.ContributorSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopCompletionSnapshot.ContributorSnapshot)
    MergeFrom(*source);
  }
}

void CoopCompletionSnapshot_ContributorSnapshot::MergeFrom(const CoopCompletionSnapshot_ContributorSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      contribution_ = from.contribution_;
    }
    if (cached_has_bits & 0x00000004u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      tokens_ = from.tokens_;
    }
    if (cached_has_bits & 0x00000010u) {
      tokens_spent_ = from.tokens_spent_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_contribution_time_ = from.last_contribution_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      finalized_ = from.finalized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CoopCompletionSnapshot_ContributorSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopCompletionSnapshot_ContributorSnapshot::CopyFrom(const CoopCompletionSnapshot_ContributorSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopCompletionSnapshot.ContributorSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopCompletionSnapshot_ContributorSnapshot::IsInitialized() const {
  return true;
}

void CoopCompletionSnapshot_ContributorSnapshot::InternalSwap(CoopCompletionSnapshot_ContributorSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoopCompletionSnapshot_ContributorSnapshot, finalized_)
      + sizeof(CoopCompletionSnapshot_ContributorSnapshot::finalized_)
      - PROTOBUF_FIELD_OFFSET(CoopCompletionSnapshot_ContributorSnapshot, contribution_)>(
          reinterpret_cast<char*>(&contribution_),
          reinterpret_cast<char*>(&other->contribution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopCompletionSnapshot_ContributorSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopCompletionSnapshot::InitAsDefaultInstance() {
}
class CoopCompletionSnapshot::_Internal {
 public:
};

CoopCompletionSnapshot::CoopCompletionSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contributors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopCompletionSnapshot)
}
CoopCompletionSnapshot::CoopCompletionSnapshot(const CoopCompletionSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contributors_(from.contributors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.CoopCompletionSnapshot)
}

void CoopCompletionSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoopCompletionSnapshot_ei_2eproto.base);
}

CoopCompletionSnapshot::~CoopCompletionSnapshot() {
  // @@protoc_insertion_point(destructor:ei.CoopCompletionSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopCompletionSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoopCompletionSnapshot::ArenaDtor(void* object) {
  CoopCompletionSnapshot* _this = reinterpret_cast< CoopCompletionSnapshot* >(object);
  (void)_this;
}
void CoopCompletionSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopCompletionSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopCompletionSnapshot& CoopCompletionSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopCompletionSnapshot_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopCompletionSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopCompletionSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopCompletionSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.CoopCompletionSnapshot.ContributorSnapshot contributors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopCompletionSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopCompletionSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.CoopCompletionSnapshot.ContributorSnapshot contributors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contributors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopCompletionSnapshot)
  return target;
}

size_t CoopCompletionSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopCompletionSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CoopCompletionSnapshot.ContributorSnapshot contributors = 1;
  total_size += 1UL * this->_internal_contributors_size();
  for (const auto& msg : this->contributors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopCompletionSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopCompletionSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopCompletionSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopCompletionSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopCompletionSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopCompletionSnapshot)
    MergeFrom(*source);
  }
}

void CoopCompletionSnapshot::MergeFrom(const CoopCompletionSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopCompletionSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributors_.MergeFrom(from.contributors_);
}

void CoopCompletionSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopCompletionSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopCompletionSnapshot::CopyFrom(const CoopCompletionSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopCompletionSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopCompletionSnapshot::IsInitialized() const {
  return true;
}

void CoopCompletionSnapshot::InternalSwap(CoopCompletionSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contributors_.InternalSwap(&other->contributors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopCompletionSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicRequestInfo::InitAsDefaultInstance() {
}
class BasicRequestInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicRequestInfo>()._has_bits_);
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

BasicRequestInfo::BasicRequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.BasicRequestInfo)
}
BasicRequestInfo::BasicRequestInfo(const BasicRequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_build()) {
    build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language(),
      GetArena());
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(debug_));
  // @@protoc_insertion_point(copy_constructor:ei.BasicRequestInfo)
}

void BasicRequestInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicRequestInfo_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(debug_));
}

BasicRequestInfo::~BasicRequestInfo() {
  // @@protoc_insertion_point(destructor:ei.BasicRequestInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BasicRequestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicRequestInfo::ArenaDtor(void* object) {
  BasicRequestInfo* _this = reinterpret_cast< BasicRequestInfo* >(object);
  (void)_this;
}
void BasicRequestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicRequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicRequestInfo& BasicRequestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicRequestInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void BasicRequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.BasicRequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      language_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(debug_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicRequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ei_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string build = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.BasicRequestInfo.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicRequestInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.BasicRequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ei_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_user_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional string build = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.build");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_build(), target);
  }

  // optional string platform = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.platform");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform(), target);
  }

  // optional string country = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.country");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_country(), target);
  }

  // optional string language = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.BasicRequestInfo.language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language(), target);
  }

  // optional bool debug = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.BasicRequestInfo)
  return target;
}

size_t BasicRequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.BasicRequestInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ei_user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string build = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_build());
    }

    // optional string platform = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string country = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string language = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional bool debug = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicRequestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.BasicRequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicRequestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicRequestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.BasicRequestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.BasicRequestInfo)
    MergeFrom(*source);
  }
}

void BasicRequestInfo::MergeFrom(const BasicRequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.BasicRequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_build(from._internal_build());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000040u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      debug_ = from.debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BasicRequestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.BasicRequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicRequestInfo::CopyFrom(const BasicRequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.BasicRequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicRequestInfo::IsInitialized() const {
  return true;
}

void BasicRequestInfo::InternalSwap(BasicRequestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasicRequestInfo, debug_)
      + sizeof(BasicRequestInfo::debug_)
      - PROTOBUF_FIELD_OFFSET(BasicRequestInfo, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicRequestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimConfig_ContractGradeSimConfig_GoalParams::InitAsDefaultInstance() {
}
class ContractSimConfig_ContractGradeSimConfig_GoalParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimConfig_ContractGradeSimConfig_GoalParams>()._has_bits_);
  static void set_has_target_se(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cps_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elr_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_earnings_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_efficacy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hab_capacity_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_epic_research_budget(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ContractSimConfig_ContractGradeSimConfig_GoalParams::ContractSimConfig_ContractGradeSimConfig_GoalParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
}
ContractSimConfig_ContractGradeSimConfig_GoalParams::ContractSimConfig_ContractGradeSimConfig_GoalParams(const ContractSimConfig_ContractGradeSimConfig_GoalParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_se_, &from.target_se_,
    static_cast<size_t>(reinterpret_cast<char*>(&elr_mult_) -
    reinterpret_cast<char*>(&target_se_)) + sizeof(elr_mult_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::SharedCtor() {
  ::memset(&target_se_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elr_mult_) -
      reinterpret_cast<char*>(&target_se_)) + sizeof(elr_mult_));
}

ContractSimConfig_ContractGradeSimConfig_GoalParams::~ContractSimConfig_ContractGradeSimConfig_GoalParams() {
  // @@protoc_insertion_point(destructor:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::ArenaDtor(void* object) {
  ContractSimConfig_ContractGradeSimConfig_GoalParams* _this = reinterpret_cast< ContractSimConfig_ContractGradeSimConfig_GoalParams* >(object);
  (void)_this;
}
void ContractSimConfig_ContractGradeSimConfig_GoalParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimConfig_ContractGradeSimConfig_GoalParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimConfig_ContractGradeSimConfig_GoalParams& ContractSimConfig_ContractGradeSimConfig_GoalParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimConfig_ContractGradeSimConfig_GoalParams_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimConfig_ContractGradeSimConfig_GoalParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&target_se_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elr_mult_) -
        reinterpret_cast<char*>(&target_se_)) + sizeof(elr_mult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimConfig_ContractGradeSimConfig_GoalParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double target_se = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_target_se(&has_bits);
          target_se_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cps_mult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cps_mult(&has_bits);
          cps_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double earnings_mult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_earnings_mult(&has_bits);
          earnings_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_efficacy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_time_efficacy(&has_bits);
          time_efficacy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hab_capacity_mult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_hab_capacity_mult(&has_bits);
          hab_capacity_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double epic_research_budget = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_epic_research_budget(&has_bits);
          epic_research_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double elr_mult = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_elr_mult(&has_bits);
          elr_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimConfig_ContractGradeSimConfig_GoalParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double target_se = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_target_se(), target);
  }

  // optional double cps_mult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cps_mult(), target);
  }

  // optional double earnings_mult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_earnings_mult(), target);
  }

  // optional double time_efficacy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_efficacy(), target);
  }

  // optional double hab_capacity_mult = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_hab_capacity_mult(), target);
  }

  // optional double epic_research_budget = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_epic_research_budget(), target);
  }

  // optional double elr_mult = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_elr_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  return target;
}

size_t ContractSimConfig_ContractGradeSimConfig_GoalParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double target_se = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double cps_mult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double earnings_mult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_efficacy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double hab_capacity_mult = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double epic_research_budget = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double elr_mult = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimConfig_ContractGradeSimConfig_GoalParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimConfig_ContractGradeSimConfig_GoalParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
    MergeFrom(*source);
  }
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::MergeFrom(const ContractSimConfig_ContractGradeSimConfig_GoalParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      target_se_ = from.target_se_;
    }
    if (cached_has_bits & 0x00000002u) {
      cps_mult_ = from.cps_mult_;
    }
    if (cached_has_bits & 0x00000004u) {
      earnings_mult_ = from.earnings_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_efficacy_ = from.time_efficacy_;
    }
    if (cached_has_bits & 0x00000010u) {
      hab_capacity_mult_ = from.hab_capacity_mult_;
    }
    if (cached_has_bits & 0x00000020u) {
      epic_research_budget_ = from.epic_research_budget_;
    }
    if (cached_has_bits & 0x00000040u) {
      elr_mult_ = from.elr_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::CopyFrom(const ContractSimConfig_ContractGradeSimConfig_GoalParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimConfig.ContractGradeSimConfig.GoalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimConfig_ContractGradeSimConfig_GoalParams::IsInitialized() const {
  return true;
}

void ContractSimConfig_ContractGradeSimConfig_GoalParams::InternalSwap(ContractSimConfig_ContractGradeSimConfig_GoalParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractSimConfig_ContractGradeSimConfig_GoalParams, elr_mult_)
      + sizeof(ContractSimConfig_ContractGradeSimConfig_GoalParams::elr_mult_)
      - PROTOBUF_FIELD_OFFSET(ContractSimConfig_ContractGradeSimConfig_GoalParams, target_se_)>(
          reinterpret_cast<char*>(&target_se_),
          reinterpret_cast<char*>(&other->target_se_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimConfig_ContractGradeSimConfig_GoalParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimConfig_ContractGradeSimConfig::InitAsDefaultInstance() {
}
class ContractSimConfig_ContractGradeSimConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimConfig_ContractGradeSimConfig>()._has_bits_);
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractSimConfig_ContractGradeSimConfig::ContractSimConfig_ContractGradeSimConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goal_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimConfig.ContractGradeSimConfig)
}
ContractSimConfig_ContractGradeSimConfig::ContractSimConfig_ContractGradeSimConfig(const ContractSimConfig_ContractGradeSimConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      goal_params_(from.goal_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grade_ = from.grade_;
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimConfig.ContractGradeSimConfig)
}

void ContractSimConfig_ContractGradeSimConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto.base);
  grade_ = 0;
}

ContractSimConfig_ContractGradeSimConfig::~ContractSimConfig_ContractGradeSimConfig() {
  // @@protoc_insertion_point(destructor:ei.ContractSimConfig.ContractGradeSimConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimConfig_ContractGradeSimConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractSimConfig_ContractGradeSimConfig::ArenaDtor(void* object) {
  ContractSimConfig_ContractGradeSimConfig* _this = reinterpret_cast< ContractSimConfig_ContractGradeSimConfig* >(object);
  (void)_this;
}
void ContractSimConfig_ContractGradeSimConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimConfig_ContractGradeSimConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimConfig_ContractGradeSimConfig& ContractSimConfig_ContractGradeSimConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimConfig_ContractGradeSimConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimConfig_ContractGradeSimConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimConfig.ContractGradeSimConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goal_params_.Clear();
  grade_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimConfig_ContractGradeSimConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract.PlayerGrade grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractSimConfig.ContractGradeSimConfig.GoalParams goal_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goal_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimConfig_ContractGradeSimConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimConfig.ContractGradeSimConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract.PlayerGrade grade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_grade(), target);
  }

  // repeated .ei.ContractSimConfig.ContractGradeSimConfig.GoalParams goal_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimConfig.ContractGradeSimConfig)
  return target;
}

size_t ContractSimConfig_ContractGradeSimConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimConfig.ContractGradeSimConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractSimConfig.ContractGradeSimConfig.GoalParams goal_params = 2;
  total_size += 1UL * this->_internal_goal_params_size();
  for (const auto& msg : this->goal_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ei.Contract.PlayerGrade grade = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimConfig_ContractGradeSimConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimConfig.ContractGradeSimConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimConfig_ContractGradeSimConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimConfig_ContractGradeSimConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimConfig.ContractGradeSimConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimConfig.ContractGradeSimConfig)
    MergeFrom(*source);
  }
}

void ContractSimConfig_ContractGradeSimConfig::MergeFrom(const ContractSimConfig_ContractGradeSimConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimConfig.ContractGradeSimConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goal_params_.MergeFrom(from.goal_params_);
  if (from._internal_has_grade()) {
    _internal_set_grade(from._internal_grade());
  }
}

void ContractSimConfig_ContractGradeSimConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimConfig.ContractGradeSimConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimConfig_ContractGradeSimConfig::CopyFrom(const ContractSimConfig_ContractGradeSimConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimConfig.ContractGradeSimConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimConfig_ContractGradeSimConfig::IsInitialized() const {
  return true;
}

void ContractSimConfig_ContractGradeSimConfig::InternalSwap(ContractSimConfig_ContractGradeSimConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  goal_params_.InternalSwap(&other->goal_params_);
  swap(grade_, other->grade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimConfig_ContractGradeSimConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimConfig::InitAsDefaultInstance() {
}
class ContractSimConfig::_Internal {
 public:
};

ContractSimConfig::ContractSimConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  grade_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimConfig)
}
ContractSimConfig::ContractSimConfig(const ContractSimConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      grade_configs_(from.grade_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimConfig)
}

void ContractSimConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractSimConfig_ei_2eproto.base);
}

ContractSimConfig::~ContractSimConfig() {
  // @@protoc_insertion_point(destructor:ei.ContractSimConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractSimConfig::ArenaDtor(void* object) {
  ContractSimConfig* _this = reinterpret_cast< ContractSimConfig* >(object);
  (void)_this;
}
void ContractSimConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimConfig& ContractSimConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grade_configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ContractSimConfig.ContractGradeSimConfig grade_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grade_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ContractSimConfig.ContractGradeSimConfig grade_configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grade_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_grade_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimConfig)
  return target;
}

size_t ContractSimConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractSimConfig.ContractGradeSimConfig grade_configs = 1;
  total_size += 1UL * this->_internal_grade_configs_size();
  for (const auto& msg : this->grade_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimConfig)
    MergeFrom(*source);
  }
}

void ContractSimConfig::MergeFrom(const ContractSimConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grade_configs_.MergeFrom(from.grade_configs_);
}

void ContractSimConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimConfig::CopyFrom(const ContractSimConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimConfig::IsInitialized() const {
  return true;
}

void ContractSimConfig::InternalSwap(ContractSimConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  grade_configs_.InternalSwap(&other->grade_configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimPoll::InitAsDefaultInstance() {
}
class ContractSimPoll::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimPoll>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractSimPoll::ContractSimPoll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimPoll)
}
ContractSimPoll::ContractSimPoll(const ContractSimPoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimPoll)
}

void ContractSimPoll::SharedCtor() {
  client_version_ = 0u;
}

ContractSimPoll::~ContractSimPoll() {
  // @@protoc_insertion_point(destructor:ei.ContractSimPoll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimPoll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractSimPoll::ArenaDtor(void* object) {
  ContractSimPoll* _this = reinterpret_cast< ContractSimPoll* >(object);
  (void)_this;
}
void ContractSimPoll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimPoll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimPoll& ContractSimPoll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimPoll_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimPoll::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimPoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimPoll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimPoll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimPoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimPoll)
  return target;
}

size_t ContractSimPoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimPoll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimPoll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimPoll)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimPoll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimPoll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimPoll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimPoll)
    MergeFrom(*source);
  }
}

void ContractSimPoll::MergeFrom(const ContractSimPoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimPoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _internal_set_client_version(from._internal_client_version());
  }
}

void ContractSimPoll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimPoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimPoll::CopyFrom(const ContractSimPoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimPoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimPoll::IsInitialized() const {
  return true;
}

void ContractSimPoll::InternalSwap(ContractSimPoll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimPoll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimPollResponse::InitAsDefaultInstance() {
  ::ei::_ContractSimPollResponse_default_instance_._instance.get_mutable()->contract_to_simulate_ = const_cast< ::ei::Contract*>(
      ::ei::Contract::internal_default_instance());
  ::ei::_ContractSimPollResponse_default_instance_._instance.get_mutable()->sim_config_ = const_cast< ::ei::ContractSimConfig*>(
      ::ei::ContractSimConfig::internal_default_instance());
}
class ContractSimPollResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimPollResponse>()._has_bits_);
  static const ::ei::Contract& contract_to_simulate(const ContractSimPollResponse* msg);
  static void set_has_contract_to_simulate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ContractSimConfig& sim_config(const ContractSimPollResponse* msg);
  static void set_has_sim_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::Contract&
ContractSimPollResponse::_Internal::contract_to_simulate(const ContractSimPollResponse* msg) {
  return *msg->contract_to_simulate_;
}
const ::ei::ContractSimConfig&
ContractSimPollResponse::_Internal::sim_config(const ContractSimPollResponse* msg) {
  return *msg->sim_config_;
}
ContractSimPollResponse::ContractSimPollResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimPollResponse)
}
ContractSimPollResponse::ContractSimPollResponse(const ContractSimPollResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_contract_to_simulate()) {
    contract_to_simulate_ = new ::ei::Contract(*from.contract_to_simulate_);
  } else {
    contract_to_simulate_ = nullptr;
  }
  if (from._internal_has_sim_config()) {
    sim_config_ = new ::ei::ContractSimConfig(*from.sim_config_);
  } else {
    sim_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimPollResponse)
}

void ContractSimPollResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractSimPollResponse_ei_2eproto.base);
  ::memset(&contract_to_simulate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sim_config_) -
      reinterpret_cast<char*>(&contract_to_simulate_)) + sizeof(sim_config_));
}

ContractSimPollResponse::~ContractSimPollResponse() {
  // @@protoc_insertion_point(destructor:ei.ContractSimPollResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimPollResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete contract_to_simulate_;
  if (this != internal_default_instance()) delete sim_config_;
}

void ContractSimPollResponse::ArenaDtor(void* object) {
  ContractSimPollResponse* _this = reinterpret_cast< ContractSimPollResponse* >(object);
  (void)_this;
}
void ContractSimPollResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimPollResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimPollResponse& ContractSimPollResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimPollResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimPollResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimPollResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(contract_to_simulate_ != nullptr);
      contract_to_simulate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sim_config_ != nullptr);
      sim_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimPollResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract contract_to_simulate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_to_simulate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractSimConfig sim_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sim_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimPollResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimPollResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract contract_to_simulate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::contract_to_simulate(this), target, stream);
  }

  // optional .ei.ContractSimConfig sim_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sim_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimPollResponse)
  return target;
}

size_t ContractSimPollResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimPollResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.Contract contract_to_simulate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_to_simulate_);
    }

    // optional .ei.ContractSimConfig sim_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sim_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimPollResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimPollResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimPollResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimPollResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimPollResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimPollResponse)
    MergeFrom(*source);
  }
}

void ContractSimPollResponse::MergeFrom(const ContractSimPollResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimPollResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_contract_to_simulate()->::ei::Contract::MergeFrom(from._internal_contract_to_simulate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sim_config()->::ei::ContractSimConfig::MergeFrom(from._internal_sim_config());
    }
  }
}

void ContractSimPollResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimPollResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimPollResponse::CopyFrom(const ContractSimPollResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimPollResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimPollResponse::IsInitialized() const {
  return true;
}

void ContractSimPollResponse::InternalSwap(ContractSimPollResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractSimPollResponse, sim_config_)
      + sizeof(ContractSimPollResponse::sim_config_)
      - PROTOBUF_FIELD_OFFSET(ContractSimPollResponse, contract_to_simulate_)>(
          reinterpret_cast<char*>(&contract_to_simulate_),
          reinterpret_cast<char*>(&other->contract_to_simulate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimPollResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimResultUpdate_GoalInfo::InitAsDefaultInstance() {
}
class ContractSimResultUpdate_GoalInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimResultUpdate_GoalInfo>()._has_bits_);
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_goal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_projected_eggs_laid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractSimResultUpdate_GoalInfo::ContractSimResultUpdate_GoalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimResultUpdate.GoalInfo)
}
ContractSimResultUpdate_GoalInfo::ContractSimResultUpdate_GoalInfo(const ContractSimResultUpdate_GoalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grade_, &from.grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&projected_eggs_laid_) -
    reinterpret_cast<char*>(&grade_)) + sizeof(projected_eggs_laid_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimResultUpdate.GoalInfo)
}

void ContractSimResultUpdate_GoalInfo::SharedCtor() {
  ::memset(&grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projected_eggs_laid_) -
      reinterpret_cast<char*>(&grade_)) + sizeof(projected_eggs_laid_));
}

ContractSimResultUpdate_GoalInfo::~ContractSimResultUpdate_GoalInfo() {
  // @@protoc_insertion_point(destructor:ei.ContractSimResultUpdate.GoalInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimResultUpdate_GoalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractSimResultUpdate_GoalInfo::ArenaDtor(void* object) {
  ContractSimResultUpdate_GoalInfo* _this = reinterpret_cast< ContractSimResultUpdate_GoalInfo* >(object);
  (void)_this;
}
void ContractSimResultUpdate_GoalInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimResultUpdate_GoalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimResultUpdate_GoalInfo& ContractSimResultUpdate_GoalInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimResultUpdate_GoalInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimResultUpdate_GoalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimResultUpdate.GoalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&projected_eggs_laid_) -
        reinterpret_cast<char*>(&grade_)) + sizeof(projected_eggs_laid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimResultUpdate_GoalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract.PlayerGrade grade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 goal_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_goal_index(&has_bits);
          goal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double projected_eggs_laid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_projected_eggs_laid(&has_bits);
          projected_eggs_laid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimResultUpdate_GoalInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimResultUpdate.GoalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract.PlayerGrade grade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_grade(), target);
  }

  // optional uint32 goal_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_goal_index(), target);
  }

  // optional double projected_eggs_laid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_projected_eggs_laid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimResultUpdate.GoalInfo)
  return target;
}

size_t ContractSimResultUpdate_GoalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimResultUpdate.GoalInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ei.Contract.PlayerGrade grade = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional uint32 goal_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goal_index());
    }

    // optional double projected_eggs_laid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimResultUpdate_GoalInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimResultUpdate.GoalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimResultUpdate_GoalInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimResultUpdate_GoalInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimResultUpdate.GoalInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimResultUpdate.GoalInfo)
    MergeFrom(*source);
  }
}

void ContractSimResultUpdate_GoalInfo::MergeFrom(const ContractSimResultUpdate_GoalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimResultUpdate.GoalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000002u) {
      goal_index_ = from.goal_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      projected_eggs_laid_ = from.projected_eggs_laid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractSimResultUpdate_GoalInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimResultUpdate.GoalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimResultUpdate_GoalInfo::CopyFrom(const ContractSimResultUpdate_GoalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimResultUpdate.GoalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimResultUpdate_GoalInfo::IsInitialized() const {
  return true;
}

void ContractSimResultUpdate_GoalInfo::InternalSwap(ContractSimResultUpdate_GoalInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractSimResultUpdate_GoalInfo, projected_eggs_laid_)
      + sizeof(ContractSimResultUpdate_GoalInfo::projected_eggs_laid_)
      - PROTOBUF_FIELD_OFFSET(ContractSimResultUpdate_GoalInfo, grade_)>(
          reinterpret_cast<char*>(&grade_),
          reinterpret_cast<char*>(&other->grade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimResultUpdate_GoalInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractSimResultUpdate::InitAsDefaultInstance() {
}
class ContractSimResultUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractSimResultUpdate>()._has_bits_);
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractSimResultUpdate::ContractSimResultUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  goal_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractSimResultUpdate)
}
ContractSimResultUpdate::ContractSimResultUpdate(const ContractSimResultUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      goal_infos_(from.goal_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_id()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.ContractSimResultUpdate)
}

void ContractSimResultUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractSimResultUpdate_ei_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContractSimResultUpdate::~ContractSimResultUpdate() {
  // @@protoc_insertion_point(destructor:ei.ContractSimResultUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractSimResultUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractSimResultUpdate::ArenaDtor(void* object) {
  ContractSimResultUpdate* _this = reinterpret_cast< ContractSimResultUpdate* >(object);
  (void)_this;
}
void ContractSimResultUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractSimResultUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractSimResultUpdate& ContractSimResultUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractSimResultUpdate_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractSimResultUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractSimResultUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goal_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contract_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractSimResultUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractSimResultUpdate.contract_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractSimResultUpdate.GoalInfo goal_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goal_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractSimResultUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractSimResultUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractSimResultUpdate.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // repeated .ei.ContractSimResultUpdate.GoalInfo goal_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractSimResultUpdate)
  return target;
}

size_t ContractSimResultUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractSimResultUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractSimResultUpdate.GoalInfo goal_infos = 2;
  total_size += 1UL * this->_internal_goal_infos_size();
  for (const auto& msg : this->goal_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string contract_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractSimResultUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractSimResultUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractSimResultUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractSimResultUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractSimResultUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractSimResultUpdate)
    MergeFrom(*source);
  }
}

void ContractSimResultUpdate::MergeFrom(const ContractSimResultUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractSimResultUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  goal_infos_.MergeFrom(from.goal_infos_);
  if (from._internal_has_contract_id()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
}

void ContractSimResultUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractSimResultUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractSimResultUpdate::CopyFrom(const ContractSimResultUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractSimResultUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractSimResultUpdate::IsInitialized() const {
  return true;
}

void ContractSimResultUpdate::InternalSwap(ContractSimResultUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  goal_infos_.InternalSwap(&other->goal_infos_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractSimResultUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractsRequest::InitAsDefaultInstance() {
}
class ContractsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractsRequest>()._has_bits_);
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractsRequest::ContractsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractsRequest)
}
ContractsRequest::ContractsRequest(const ContractsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ::memcpy(&soul_eggs_, &from.soul_eggs_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&soul_eggs_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractsRequest)
}

void ContractsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractsRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&soul_eggs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&soul_eggs_)) + sizeof(client_version_));
}

ContractsRequest::~ContractsRequest() {
  // @@protoc_insertion_point(destructor:ei.ContractsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractsRequest::ArenaDtor(void* object) {
  ContractsRequest* _this = reinterpret_cast< ContractsRequest* >(object);
  (void)_this;
}
void ContractsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractsRequest& ContractsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractsRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&soul_eggs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&soul_eggs_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double soul_eggs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractsRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double soul_eggs = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_soul_eggs(), target);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractsRequest)
  return target;
}

size_t ContractsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional double soul_eggs = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractsRequest)
    MergeFrom(*source);
  }
}

void ContractsRequest::MergeFrom(const ContractsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractsRequest::CopyFrom(const ContractsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractsRequest::IsInitialized() const {
  return true;
}

void ContractsRequest::InternalSwap(ContractsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractsRequest, client_version_)
      + sizeof(ContractsRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(ContractsRequest, soul_eggs_)>(
          reinterpret_cast<char*>(&soul_eggs_),
          reinterpret_cast<char*>(&other->soul_eggs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractsResponse::InitAsDefaultInstance() {
}
class ContractsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractsResponse>()._has_bits_);
  static void set_has_warning_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContractsResponse::ContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractsResponse)
}
ContractsResponse::ContractsResponse(const ContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contracts_(from.contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  warning_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_warning_message()) {
    warning_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_warning_message(),
      GetArena());
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_eop_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(max_eop_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractsResponse)
}

void ContractsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractsResponse_ei_2eproto.base);
  warning_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_eop_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(total_eop_));
  max_eop_ = 1000u;
}

ContractsResponse::~ContractsResponse() {
  // @@protoc_insertion_point(destructor:ei.ContractsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  warning_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractsResponse::ArenaDtor(void* object) {
  ContractsResponse* _this = reinterpret_cast< ContractsResponse* >(object);
  (void)_this;
}
void ContractsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractsResponse& ContractsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractsResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    warning_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_eop_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(total_eop_));
    max_eop_ = 1000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.Contract contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_server_time(&has_bits);
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_eop = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_eop(&has_bits);
          max_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string warning_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_warning_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractsResponse.warning_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double total_eop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_total_eop(&has_bits);
          total_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.Contract contracts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contracts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double server_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_server_time(), target);
  }

  // optional uint32 max_eop = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_eop(), target);
  }

  // optional string warning_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_warning_message().data(), static_cast<int>(this->_internal_warning_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractsResponse.warning_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_warning_message(), target);
  }

  // optional double total_eop = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_total_eop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractsResponse)
  return target;
}

size_t ContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.Contract contracts = 1;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string warning_message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_warning_message());
    }

    // optional double server_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double total_eop = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 max_eop = 3 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_eop());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractsResponse)
    MergeFrom(*source);
  }
}

void ContractsResponse::MergeFrom(const ContractsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_warning_message(from._internal_warning_message());
    }
    if (cached_has_bits & 0x00000002u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_eop_ = from.total_eop_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_eop_ = from.max_eop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractsResponse::CopyFrom(const ContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractsResponse::IsInitialized() const {
  return true;
}

void ContractsResponse::InternalSwap(ContractsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contracts_.InternalSwap(&other->contracts_);
  warning_message_.Swap(&other->warning_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractsResponse, total_eop_)
      + sizeof(ContractsResponse::total_eop_)
      - PROTOBUF_FIELD_OFFSET(ContractsResponse, server_time_)>(
          reinterpret_cast<char*>(&server_time_),
          reinterpret_cast<char*>(&other->server_time_));
  swap(max_eop_, other->max_eop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusRequest::InitAsDefaultInstance() {
  ::ei::_ContractCoopStatusRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ContractCoopStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ContractCoopStatusRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ei::BasicRequestInfo&
ContractCoopStatusRequest::_Internal::rinfo(const ContractCoopStatusRequest* msg) {
  return *msg->rinfo_;
}
ContractCoopStatusRequest::ContractCoopStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusRequest)
}
ContractCoopStatusRequest::ContractCoopStatusRequest(const ContractCoopStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusRequest)
}

void ContractCoopStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

ContractCoopStatusRequest::~ContractCoopStatusRequest() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void ContractCoopStatusRequest::ArenaDtor(void* object) {
  ContractCoopStatusRequest* _this = reinterpret_cast< ContractCoopStatusRequest* >(object);
  (void)_this;
}
void ContractCoopStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusRequest& ContractCoopStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusRequest)
  return target;
}

size_t ContractCoopStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusRequest)
    MergeFrom(*source);
  }
}

void ContractCoopStatusRequest::MergeFrom(const ContractCoopStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusRequest::CopyFrom(const ContractCoopStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusRequest::IsInitialized() const {
  return true;
}

void ContractCoopStatusRequest::InternalSwap(ContractCoopStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCoopStatusRequest, client_version_)
      + sizeof(ContractCoopStatusRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(ContractCoopStatusRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FarmProductionParams::InitAsDefaultInstance() {
}
class FarmProductionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FarmProductionParams>()._has_bits_);
  static void set_has_farm_population(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_farm_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_elr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ihr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delivered(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FarmProductionParams::FarmProductionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.FarmProductionParams)
}
FarmProductionParams::FarmProductionParams(const FarmProductionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&farm_population_, &from.farm_population_,
    static_cast<size_t>(reinterpret_cast<char*>(&delivered_) -
    reinterpret_cast<char*>(&farm_population_)) + sizeof(delivered_));
  // @@protoc_insertion_point(copy_constructor:ei.FarmProductionParams)
}

void FarmProductionParams::SharedCtor() {
  ::memset(&farm_population_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivered_) -
      reinterpret_cast<char*>(&farm_population_)) + sizeof(delivered_));
}

FarmProductionParams::~FarmProductionParams() {
  // @@protoc_insertion_point(destructor:ei.FarmProductionParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FarmProductionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FarmProductionParams::ArenaDtor(void* object) {
  FarmProductionParams* _this = reinterpret_cast< FarmProductionParams* >(object);
  (void)_this;
}
void FarmProductionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FarmProductionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FarmProductionParams& FarmProductionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FarmProductionParams_ei_2eproto.base);
  return *internal_default_instance();
}


void FarmProductionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.FarmProductionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&farm_population_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delivered_) -
        reinterpret_cast<char*>(&farm_population_)) + sizeof(delivered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FarmProductionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double farm_population = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_farm_population(&has_bits);
          farm_population_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double farm_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_farm_capacity(&has_bits);
          farm_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double elr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_elr(&has_bits);
          elr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ihr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ihr(&has_bits);
          ihr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_sr(&has_bits);
          sr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double delivered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_delivered(&has_bits);
          delivered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FarmProductionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.FarmProductionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double farm_population = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_farm_population(), target);
  }

  // optional double farm_capacity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_farm_capacity(), target);
  }

  // optional double elr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_elr(), target);
  }

  // optional double ihr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ihr(), target);
  }

  // optional double sr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sr(), target);
  }

  // optional double delivered = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_delivered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.FarmProductionParams)
  return target;
}

size_t FarmProductionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.FarmProductionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double farm_population = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double farm_capacity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double elr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ihr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double sr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double delivered = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FarmProductionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.FarmProductionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FarmProductionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FarmProductionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.FarmProductionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.FarmProductionParams)
    MergeFrom(*source);
  }
}

void FarmProductionParams::MergeFrom(const FarmProductionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.FarmProductionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      farm_population_ = from.farm_population_;
    }
    if (cached_has_bits & 0x00000002u) {
      farm_capacity_ = from.farm_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      elr_ = from.elr_;
    }
    if (cached_has_bits & 0x00000008u) {
      ihr_ = from.ihr_;
    }
    if (cached_has_bits & 0x00000010u) {
      sr_ = from.sr_;
    }
    if (cached_has_bits & 0x00000020u) {
      delivered_ = from.delivered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FarmProductionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.FarmProductionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FarmProductionParams::CopyFrom(const FarmProductionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.FarmProductionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FarmProductionParams::IsInitialized() const {
  return true;
}

void FarmProductionParams::InternalSwap(FarmProductionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FarmProductionParams, delivered_)
      + sizeof(FarmProductionParams::delivered_)
      - PROTOBUF_FIELD_OFFSET(FarmProductionParams, farm_population_)>(
          reinterpret_cast<char*>(&farm_population_),
          reinterpret_cast<char*>(&other->farm_population_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FarmProductionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerFarmInfo::InitAsDefaultInstance() {
  ::ei::_PlayerFarmInfo_default_instance_._instance.get_mutable()->farm_appearance_ = const_cast< ::ei::ShellDB_FarmConfiguration*>(
      ::ei::ShellDB_FarmConfiguration::internal_default_instance());
}
class PlayerFarmInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerFarmInfo>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eggs_of_prophecy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_permit_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hyperloop_station(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_egg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cash_on_hand(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_silos_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_boost_tokens_on_hand(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_artifact_inventory_score(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ei::ShellDB_FarmConfiguration& farm_appearance(const PlayerFarmInfo* msg);
  static void set_has_farm_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::ei::ShellDB_FarmConfiguration&
PlayerFarmInfo::_Internal::farm_appearance(const PlayerFarmInfo* msg) {
  return *msg->farm_appearance_;
}
PlayerFarmInfo::PlayerFarmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  egg_medal_level_(arena),
  epic_research_(arena),
  habs_(arena),
  hab_population_(arena),
  vehicles_(arena),
  train_length_(arena),
  common_research_(arena),
  active_boosts_(arena),
  equipped_artifacts_(arena),
  hab_capacity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.PlayerFarmInfo)
}
PlayerFarmInfo::PlayerFarmInfo(const PlayerFarmInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      egg_medal_level_(from.egg_medal_level_),
      epic_research_(from.epic_research_),
      habs_(from.habs_),
      hab_population_(from.hab_population_),
      vehicles_(from.vehicles_),
      train_length_(from.train_length_),
      common_research_(from.common_research_),
      active_boosts_(from.active_boosts_),
      equipped_artifacts_(from.equipped_artifacts_),
      hab_capacity_(from.hab_capacity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_farm_appearance()) {
    farm_appearance_ = new ::ei::ShellDB_FarmConfiguration(*from.farm_appearance_);
  } else {
    farm_appearance_ = nullptr;
  }
  ::memcpy(&soul_eggs_, &from.soul_eggs_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_type_) -
    reinterpret_cast<char*>(&soul_eggs_)) + sizeof(egg_type_));
  // @@protoc_insertion_point(copy_constructor:ei.PlayerFarmInfo)
}

void PlayerFarmInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerFarmInfo_ei_2eproto.base);
  ::memset(&farm_appearance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&farm_appearance_)) + sizeof(client_version_));
  egg_type_ = 1;
}

PlayerFarmInfo::~PlayerFarmInfo() {
  // @@protoc_insertion_point(destructor:ei.PlayerFarmInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerFarmInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete farm_appearance_;
}

void PlayerFarmInfo::ArenaDtor(void* object) {
  PlayerFarmInfo* _this = reinterpret_cast< PlayerFarmInfo* >(object);
  (void)_this;
}
void PlayerFarmInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerFarmInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerFarmInfo& PlayerFarmInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerFarmInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void PlayerFarmInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.PlayerFarmInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  egg_medal_level_.Clear();
  epic_research_.Clear();
  habs_.Clear();
  hab_population_.Clear();
  vehicles_.Clear();
  train_length_.Clear();
  common_research_.Clear();
  active_boosts_.Clear();
  equipped_artifacts_.Clear();
  hab_capacity_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(farm_appearance_ != nullptr);
    farm_appearance_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&soul_eggs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boost_tokens_on_hand_) -
        reinterpret_cast<char*>(&soul_eggs_)) + sizeof(boost_tokens_on_hand_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&artifact_inventory_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&artifact_inventory_score_)) + sizeof(client_version_));
    egg_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerFarmInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double soul_eggs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 eggs_of_prophecy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eggs_of_prophecy(&has_bits);
          eggs_of_prophecy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 permit_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_permit_level(&has_bits);
          permit_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hyperloop_station = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hyperloop_station(&has_bits);
          hyperloop_station_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 egg_medal_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_egg_medal_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_egg_medal_level(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ResearchItem epic_research = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epic_research(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.Egg egg_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg_type(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double cash_on_hand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_cash_on_hand(&has_bits);
          cash_on_hand_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 habs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_habs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_habs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 hab_population = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hab_population(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hab_population(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vehicles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vehicles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vehicles(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 train_length = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_train_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_train_length(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 silos_owned = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_silos_owned(&has_bits);
          silos_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ResearchItem common_research = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_common_research(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.Backup.ActiveBoost active_boosts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_boosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_on_hand = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_boost_tokens_on_hand(&has_bits);
          boost_tokens_on_hand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.CompleteArtifact equipped_artifacts = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_artifacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 artifact_inventory_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_artifact_inventory_score(&has_bits);
          artifact_inventory_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmConfiguration farm_appearance = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_appearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 hab_capacity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_hab_capacity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_hab_capacity(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerFarmInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.PlayerFarmInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double soul_eggs = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_soul_eggs(), target);
  }

  // optional uint64 eggs_of_prophecy = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_eggs_of_prophecy(), target);
  }

  // optional uint32 permit_level = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_permit_level(), target);
  }

  // optional bool hyperloop_station = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hyperloop_station(), target);
  }

  // repeated uint32 egg_medal_level = 5;
  for (int i = 0, n = this->_internal_egg_medal_level_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_egg_medal_level(i), target);
  }

  // repeated .ei.Backup.ResearchItem epic_research = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epic_research_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_epic_research(i), target, stream);
  }

  // optional .ei.Egg egg_type = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_egg_type(), target);
  }

  // optional double cash_on_hand = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_cash_on_hand(), target);
  }

  // repeated uint32 habs = 9;
  for (int i = 0, n = this->_internal_habs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_habs(i), target);
  }

  // repeated uint64 hab_population = 10;
  for (int i = 0, n = this->_internal_hab_population_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_hab_population(i), target);
  }

  // repeated uint32 vehicles = 11;
  for (int i = 0, n = this->_internal_vehicles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_vehicles(i), target);
  }

  // repeated uint32 train_length = 12;
  for (int i = 0, n = this->_internal_train_length_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_train_length(i), target);
  }

  // optional uint32 silos_owned = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_silos_owned(), target);
  }

  // repeated .ei.Backup.ResearchItem common_research = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_common_research_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_common_research(i), target, stream);
  }

  // repeated .ei.Backup.ActiveBoost active_boosts = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_boosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_active_boosts(i), target, stream);
  }

  // optional uint32 boost_tokens_on_hand = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_boost_tokens_on_hand(), target);
  }

  // repeated .ei.CompleteArtifact equipped_artifacts = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_artifacts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_equipped_artifacts(i), target, stream);
  }

  // optional uint64 artifact_inventory_score = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_artifact_inventory_score(), target);
  }

  // optional .ei.ShellDB.FarmConfiguration farm_appearance = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::farm_appearance(this), target, stream);
  }

  // optional uint32 client_version = 20;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_client_version(), target);
  }

  // repeated uint64 hab_capacity = 21;
  for (int i = 0, n = this->_internal_hab_capacity_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_hab_capacity(i), target);
  }

  // optional double timestamp = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.PlayerFarmInfo)
  return target;
}

size_t PlayerFarmInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.PlayerFarmInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 egg_medal_level = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->egg_medal_level_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_egg_medal_level_size());
    total_size += data_size;
  }

  // repeated .ei.Backup.ResearchItem epic_research = 6;
  total_size += 1UL * this->_internal_epic_research_size();
  for (const auto& msg : this->epic_research_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 habs = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->habs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_habs_size());
    total_size += data_size;
  }

  // repeated uint64 hab_population = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->hab_population_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hab_population_size());
    total_size += data_size;
  }

  // repeated uint32 vehicles = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vehicles_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vehicles_size());
    total_size += data_size;
  }

  // repeated uint32 train_length = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->train_length_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_train_length_size());
    total_size += data_size;
  }

  // repeated .ei.Backup.ResearchItem common_research = 14;
  total_size += 1UL * this->_internal_common_research_size();
  for (const auto& msg : this->common_research_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Backup.ActiveBoost active_boosts = 15;
  total_size += 1UL * this->_internal_active_boosts_size();
  for (const auto& msg : this->active_boosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.CompleteArtifact equipped_artifacts = 17;
  total_size += 2UL * this->_internal_equipped_artifacts_size();
  for (const auto& msg : this->equipped_artifacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 hab_capacity = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->hab_capacity_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hab_capacity_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ei.ShellDB.FarmConfiguration farm_appearance = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *farm_appearance_);
    }

    // optional double soul_eggs = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 eggs_of_prophecy = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_eggs_of_prophecy());
    }

    // optional uint32 permit_level = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_permit_level());
    }

    // optional bool hyperloop_station = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double cash_on_hand = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 silos_owned = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_silos_owned());
    }

    // optional uint32 boost_tokens_on_hand = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_on_hand());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 artifact_inventory_score = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_artifact_inventory_score());
    }

    // optional double timestamp = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional uint32 client_version = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .ei.Egg egg_type = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFarmInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.PlayerFarmInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerFarmInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerFarmInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.PlayerFarmInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.PlayerFarmInfo)
    MergeFrom(*source);
  }
}

void PlayerFarmInfo::MergeFrom(const PlayerFarmInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.PlayerFarmInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  egg_medal_level_.MergeFrom(from.egg_medal_level_);
  epic_research_.MergeFrom(from.epic_research_);
  habs_.MergeFrom(from.habs_);
  hab_population_.MergeFrom(from.hab_population_);
  vehicles_.MergeFrom(from.vehicles_);
  train_length_.MergeFrom(from.train_length_);
  common_research_.MergeFrom(from.common_research_);
  active_boosts_.MergeFrom(from.active_boosts_);
  equipped_artifacts_.MergeFrom(from.equipped_artifacts_);
  hab_capacity_.MergeFrom(from.hab_capacity_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_farm_appearance()->::ei::ShellDB_FarmConfiguration::MergeFrom(from._internal_farm_appearance());
    }
    if (cached_has_bits & 0x00000002u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000004u) {
      eggs_of_prophecy_ = from.eggs_of_prophecy_;
    }
    if (cached_has_bits & 0x00000008u) {
      permit_level_ = from.permit_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      hyperloop_station_ = from.hyperloop_station_;
    }
    if (cached_has_bits & 0x00000020u) {
      cash_on_hand_ = from.cash_on_hand_;
    }
    if (cached_has_bits & 0x00000040u) {
      silos_owned_ = from.silos_owned_;
    }
    if (cached_has_bits & 0x00000080u) {
      boost_tokens_on_hand_ = from.boost_tokens_on_hand_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      artifact_inventory_score_ = from.artifact_inventory_score_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      egg_type_ = from.egg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerFarmInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.PlayerFarmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFarmInfo::CopyFrom(const PlayerFarmInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.PlayerFarmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFarmInfo::IsInitialized() const {
  return true;
}

void PlayerFarmInfo::InternalSwap(PlayerFarmInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  egg_medal_level_.InternalSwap(&other->egg_medal_level_);
  epic_research_.InternalSwap(&other->epic_research_);
  habs_.InternalSwap(&other->habs_);
  hab_population_.InternalSwap(&other->hab_population_);
  vehicles_.InternalSwap(&other->vehicles_);
  train_length_.InternalSwap(&other->train_length_);
  common_research_.InternalSwap(&other->common_research_);
  active_boosts_.InternalSwap(&other->active_boosts_);
  equipped_artifacts_.InternalSwap(&other->equipped_artifacts_);
  hab_capacity_.InternalSwap(&other->hab_capacity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerFarmInfo, client_version_)
      + sizeof(PlayerFarmInfo::client_version_)
      - PROTOBUF_FIELD_OFFSET(PlayerFarmInfo, farm_appearance_)>(
          reinterpret_cast<char*>(&farm_appearance_),
          reinterpret_cast<char*>(&other->farm_appearance_));
  swap(egg_type_, other->egg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerFarmInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusResponse_ContributionInfo::InitAsDefaultInstance() {
  ::ei::_ContractCoopStatusResponse_ContributionInfo_default_instance_._instance.get_mutable()->production_params_ = const_cast< ::ei::FarmProductionParams*>(
      ::ei::FarmProductionParams::internal_default_instance());
  ::ei::_ContractCoopStatusResponse_ContributionInfo_default_instance_._instance.get_mutable()->farm_info_ = const_cast< ::ei::PlayerFarmInfo*>(
      ::ei::PlayerFarmInfo::internal_default_instance());
}
class ContractCoopStatusResponse_ContributionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusResponse_ContributionInfo>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contribution_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_contribution_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ei::FarmProductionParams& production_params(const ContractCoopStatusResponse_ContributionInfo* msg);
  static void set_has_production_params(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ei::PlayerFarmInfo& farm_info(const ContractCoopStatusResponse_ContributionInfo* msg);
  static void set_has_farm_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_recently_active(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_cc_member(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_leech(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_time_cheat_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_push_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ban_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_autojoined(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_boost_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_boost_tokens_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_chicken_run_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::ei::FarmProductionParams&
ContractCoopStatusResponse_ContributionInfo::_Internal::production_params(const ContractCoopStatusResponse_ContributionInfo* msg) {
  return *msg->production_params_;
}
const ::ei::PlayerFarmInfo&
ContractCoopStatusResponse_ContributionInfo::_Internal::farm_info(const ContractCoopStatusResponse_ContributionInfo* msg) {
  return *msg->farm_info_;
}
ContractCoopStatusResponse_ContributionInfo::ContractCoopStatusResponse_ContributionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buff_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusResponse.ContributionInfo)
}
ContractCoopStatusResponse_ContributionInfo::ContractCoopStatusResponse_ContributionInfo(const ContractCoopStatusResponse_ContributionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      buff_history_(from.buff_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  push_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_push_id()) {
    push_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_push_id(),
      GetArena());
  }
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  if (from._internal_has_production_params()) {
    production_params_ = new ::ei::FarmProductionParams(*from.production_params_);
  } else {
    production_params_ = nullptr;
  }
  if (from._internal_has_farm_info()) {
    farm_info_ = new ::ei::PlayerFarmInfo(*from.farm_info_);
  } else {
    farm_info_ = nullptr;
  }
  ::memcpy(&contribution_amount_, &from.contribution_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&leech_) -
    reinterpret_cast<char*>(&contribution_amount_)) + sizeof(leech_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusResponse.ContributionInfo)
}

void ContractCoopStatusResponse_ContributionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&production_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leech_) -
      reinterpret_cast<char*>(&production_params_)) + sizeof(leech_));
}

ContractCoopStatusResponse_ContributionInfo::~ContractCoopStatusResponse_ContributionInfo() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusResponse.ContributionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusResponse_ContributionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete production_params_;
  if (this != internal_default_instance()) delete farm_info_;
}

void ContractCoopStatusResponse_ContributionInfo::ArenaDtor(void* object) {
  ContractCoopStatusResponse_ContributionInfo* _this = reinterpret_cast< ContractCoopStatusResponse_ContributionInfo* >(object);
  (void)_this;
}
void ContractCoopStatusResponse_ContributionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusResponse_ContributionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusResponse_ContributionInfo& ContractCoopStatusResponse_ContributionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusResponse_ContributionInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusResponse_ContributionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusResponse.ContributionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      push_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(production_params_ != nullptr);
      production_params_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(farm_info_ != nullptr);
      farm_info_->Clear();
    }
  }
  contribution_amount_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&contribution_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&finalized_) -
        reinterpret_cast<char*>(&contribution_rate_)) + sizeof(finalized_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&time_cheat_detected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leech_) -
        reinterpret_cast<char*>(&time_cheat_detected_)) + sizeof(leech_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusResponse_ContributionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ContributionInfo.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ContributionInfo.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double contribution_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_contribution_amount(&has_bits);
          contribution_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double contribution_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_contribution_rate(&has_bits);
          contribution_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool time_cheat_detected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_time_cheat_detected(&has_bits);
          time_cheat_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rank_change = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rank_change(&has_bits);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string push_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_push_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ContributionInfo.push_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ban_votes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ban_votes(&has_bits);
          ban_votes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_boost_tokens(&has_bits);
          boost_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.CoopBuffState buff_history = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buff_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_spent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_boost_tokens_spent(&has_bits);
          boost_tokens_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.FarmProductionParams production_params = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_production_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leech = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_leech(&has_bits);
          leech_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autojoined = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_autojoined(&has_bits);
          autojoined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.PlayerFarmInfo farm_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contract_identifier = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ContributionInfo.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double chicken_run_cooldown = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_chicken_run_cooldown(&has_bits);
          chicken_run_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string uuid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ContributionInfo.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool finalized = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool recently_active = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_recently_active(&has_bits);
          recently_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cc_member = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_cc_member(&has_bits);
          cc_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusResponse_ContributionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusResponse.ContributionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ContributionInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string user_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ContributionInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // optional double contribution_amount = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_contribution_amount(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  // optional .ei.Platform platform = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  // optional double contribution_rate = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_contribution_rate(), target);
  }

  // optional bool time_cheat_detected = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_time_cheat_detected(), target);
  }

  // optional int32 rank_change = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_rank_change(), target);
  }

  // optional string push_id = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_push_id().data(), static_cast<int>(this->_internal_push_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ContributionInfo.push_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_push_id(), target);
  }

  // optional uint32 ban_votes = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ban_votes(), target);
  }

  // optional double soul_power = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_soul_power(), target);
  }

  // optional uint32 boost_tokens = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_boost_tokens(), target);
  }

  // repeated .ei.CoopBuffState buff_history = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buff_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_buff_history(i), target, stream);
  }

  // optional uint32 boost_tokens_spent = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_boost_tokens_spent(), target);
  }

  // optional .ei.FarmProductionParams production_params = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::production_params(this), target, stream);
  }

  // optional bool leech = 16;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_leech(), target);
  }

  // optional bool autojoined = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_autojoined(), target);
  }

  // optional .ei.PlayerFarmInfo farm_info = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::farm_info(this), target, stream);
  }

  // optional string contract_identifier = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ContributionInfo.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_contract_identifier(), target);
  }

  // optional double chicken_run_cooldown = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_chicken_run_cooldown(), target);
  }

  // optional string uuid = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ContributionInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_uuid(), target);
  }

  // optional bool finalized = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_finalized(), target);
  }

  // optional bool recently_active = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_recently_active(), target);
  }

  // optional bool cc_member = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_cc_member(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusResponse.ContributionInfo)
  return target;
}

size_t ContractCoopStatusResponse_ContributionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusResponse.ContributionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CoopBuffState buff_history = 13;
  total_size += 1UL * this->_internal_buff_history_size();
  for (const auto& msg : this->buff_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string push_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_push_id());
    }

    // optional string contract_identifier = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string uuid = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .ei.FarmProductionParams production_params = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *production_params_);
    }

    // optional .ei.PlayerFarmInfo farm_info = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *farm_info_);
    }

    // optional double contribution_amount = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double contribution_rate = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional .ei.Platform platform = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional int32 rank_change = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rank_change());
    }

    // optional double soul_power = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 ban_votes = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ban_votes());
    }

    // optional uint32 boost_tokens = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens());
    }

    // optional uint32 boost_tokens_spent = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_spent());
    }

    // optional bool finalized = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool time_cheat_detected = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool autojoined = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional double chicken_run_cooldown = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional bool recently_active = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool cc_member = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool leech = 16;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusResponse_ContributionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusResponse.ContributionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusResponse_ContributionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusResponse_ContributionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusResponse.ContributionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusResponse.ContributionInfo)
    MergeFrom(*source);
  }
}

void ContractCoopStatusResponse_ContributionInfo::MergeFrom(const ContractCoopStatusResponse_ContributionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusResponse.ContributionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buff_history_.MergeFrom(from.buff_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_push_id(from._internal_push_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_production_params()->::ei::FarmProductionParams::MergeFrom(from._internal_production_params());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_farm_info()->::ei::PlayerFarmInfo::MergeFrom(from._internal_farm_info());
    }
    if (cached_has_bits & 0x00000080u) {
      contribution_amount_ = from.contribution_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      contribution_rate_ = from.contribution_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000400u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00000800u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00001000u) {
      ban_votes_ = from.ban_votes_;
    }
    if (cached_has_bits & 0x00002000u) {
      boost_tokens_ = from.boost_tokens_;
    }
    if (cached_has_bits & 0x00004000u) {
      boost_tokens_spent_ = from.boost_tokens_spent_;
    }
    if (cached_has_bits & 0x00008000u) {
      finalized_ = from.finalized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      time_cheat_detected_ = from.time_cheat_detected_;
    }
    if (cached_has_bits & 0x00020000u) {
      autojoined_ = from.autojoined_;
    }
    if (cached_has_bits & 0x00040000u) {
      chicken_run_cooldown_ = from.chicken_run_cooldown_;
    }
    if (cached_has_bits & 0x00080000u) {
      recently_active_ = from.recently_active_;
    }
    if (cached_has_bits & 0x00100000u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00200000u) {
      cc_member_ = from.cc_member_;
    }
    if (cached_has_bits & 0x00400000u) {
      leech_ = from.leech_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusResponse_ContributionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusResponse.ContributionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusResponse_ContributionInfo::CopyFrom(const ContractCoopStatusResponse_ContributionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusResponse.ContributionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusResponse_ContributionInfo::IsInitialized() const {
  return true;
}

void ContractCoopStatusResponse_ContributionInfo::InternalSwap(ContractCoopStatusResponse_ContributionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buff_history_.InternalSwap(&other->buff_history_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  push_id_.Swap(&other->push_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCoopStatusResponse_ContributionInfo, leech_)
      + sizeof(ContractCoopStatusResponse_ContributionInfo::leech_)
      - PROTOBUF_FIELD_OFFSET(ContractCoopStatusResponse_ContributionInfo, production_params_)>(
          reinterpret_cast<char*>(&production_params_),
          reinterpret_cast<char*>(&other->production_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusResponse_ContributionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusResponse_CoopGift::InitAsDefaultInstance() {
}
class ContractCoopStatusResponse_CoopGift::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusResponse_CoopGift>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractCoopStatusResponse_CoopGift::ContractCoopStatusResponse_CoopGift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusResponse.CoopGift)
}
ContractCoopStatusResponse_CoopGift::ContractCoopStatusResponse_CoopGift(const ContractCoopStatusResponse_CoopGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  tracking_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tracking()) {
    tracking_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tracking(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusResponse.CoopGift)
}

void ContractCoopStatusResponse_CoopGift::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracking_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = 0u;
}

ContractCoopStatusResponse_CoopGift::~ContractCoopStatusResponse_CoopGift() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusResponse.CoopGift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusResponse_CoopGift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracking_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractCoopStatusResponse_CoopGift::ArenaDtor(void* object) {
  ContractCoopStatusResponse_CoopGift* _this = reinterpret_cast< ContractCoopStatusResponse_CoopGift* >(object);
  (void)_this;
}
void ContractCoopStatusResponse_CoopGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusResponse_CoopGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusResponse_CoopGift& ContractCoopStatusResponse_CoopGift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusResponse_CoopGift_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusResponse_CoopGift::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusResponse.CoopGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      tracking_.ClearNonDefaultToEmpty();
    }
  }
  amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusResponse_CoopGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.CoopGift.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.CoopGift.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tracking = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tracking();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.CoopGift.tracking");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusResponse_CoopGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusResponse.CoopGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.CoopGift.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional uint32 amount = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.CoopGift.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional string tracking = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tracking().data(), static_cast<int>(this->_internal_tracking().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.CoopGift.tracking");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tracking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusResponse.CoopGift)
  return target;
}

size_t ContractCoopStatusResponse_CoopGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusResponse.CoopGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string tracking = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tracking());
    }

    // optional uint32 amount = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusResponse_CoopGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusResponse.CoopGift)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusResponse_CoopGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusResponse_CoopGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusResponse.CoopGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusResponse.CoopGift)
    MergeFrom(*source);
  }
}

void ContractCoopStatusResponse_CoopGift::MergeFrom(const ContractCoopStatusResponse_CoopGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusResponse.CoopGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_tracking(from._internal_tracking());
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusResponse_CoopGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusResponse.CoopGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusResponse_CoopGift::CopyFrom(const ContractCoopStatusResponse_CoopGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusResponse.CoopGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusResponse_CoopGift::IsInitialized() const {
  return true;
}

void ContractCoopStatusResponse_CoopGift::InternalSwap(ContractCoopStatusResponse_CoopGift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tracking_.Swap(&other->tracking_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusResponse_CoopGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusResponse_ChickenRun::InitAsDefaultInstance() {
}
class ContractCoopStatusResponse_ChickenRun::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusResponse_ChickenRun>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractCoopStatusResponse_ChickenRun::ContractCoopStatusResponse_ChickenRun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusResponse.ChickenRun)
}
ContractCoopStatusResponse_ChickenRun::ContractCoopStatusResponse_ChickenRun(const ContractCoopStatusResponse_ChickenRun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusResponse.ChickenRun)
}

void ContractCoopStatusResponse_ChickenRun::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

ContractCoopStatusResponse_ChickenRun::~ContractCoopStatusResponse_ChickenRun() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusResponse.ChickenRun)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusResponse_ChickenRun::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractCoopStatusResponse_ChickenRun::ArenaDtor(void* object) {
  ContractCoopStatusResponse_ChickenRun* _this = reinterpret_cast< ContractCoopStatusResponse_ChickenRun* >(object);
  (void)_this;
}
void ContractCoopStatusResponse_ChickenRun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusResponse_ChickenRun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusResponse_ChickenRun& ContractCoopStatusResponse_ChickenRun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusResponse_ChickenRun_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusResponse_ChickenRun::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusResponse.ChickenRun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusResponse_ChickenRun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ChickenRun.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.ChickenRun.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusResponse_ChickenRun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusResponse.ChickenRun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ChickenRun.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.ChickenRun.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusResponse.ChickenRun)
  return target;
}

size_t ContractCoopStatusResponse_ChickenRun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusResponse.ChickenRun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional uint64 amount = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusResponse_ChickenRun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusResponse.ChickenRun)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusResponse_ChickenRun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusResponse_ChickenRun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusResponse.ChickenRun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusResponse.ChickenRun)
    MergeFrom(*source);
  }
}

void ContractCoopStatusResponse_ChickenRun::MergeFrom(const ContractCoopStatusResponse_ChickenRun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusResponse.ChickenRun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusResponse_ChickenRun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusResponse.ChickenRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusResponse_ChickenRun::CopyFrom(const ContractCoopStatusResponse_ChickenRun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusResponse.ChickenRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusResponse_ChickenRun::IsInitialized() const {
  return true;
}

void ContractCoopStatusResponse_ChickenRun::InternalSwap(ContractCoopStatusResponse_ChickenRun* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusResponse_ChickenRun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusResponse::InitAsDefaultInstance() {
}
class ContractCoopStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusResponse>()._has_bits_);
  static void set_has_response_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_auto_generated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_public_(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_creator_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_since_all_goals_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_all_goals_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_members_reporting(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grace_period_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cleared_for_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_local_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

ContractCoopStatusResponse::ContractCoopStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contributors_(arena),
  gifts_(arena),
  chicken_runs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusResponse)
}
ContractCoopStatusResponse::ContractCoopStatusResponse(const ContractCoopStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contributors_(from.contributors_),
      gifts_(from.gifts_),
      chicken_runs_(from.chicken_runs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creator_id()) {
    creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creator_id(),
      GetArena());
  }
  ::memcpy(&total_amount_, &from.total_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_status_) -
    reinterpret_cast<char*>(&total_amount_)) + sizeof(response_status_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusResponse)
}

void ContractCoopStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusResponse_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_status_) -
      reinterpret_cast<char*>(&total_amount_)) + sizeof(response_status_));
}

ContractCoopStatusResponse::~ContractCoopStatusResponse() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractCoopStatusResponse::ArenaDtor(void* object) {
  ContractCoopStatusResponse* _this = reinterpret_cast< ContractCoopStatusResponse* >(object);
  (void)_this;
}
void ContractCoopStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusResponse& ContractCoopStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributors_.Clear();
  gifts_.Clear();
  chicken_runs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      creator_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&total_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public__) -
        reinterpret_cast<char*>(&total_amount_)) + sizeof(public__));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&all_goals_achieved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_status_) -
        reinterpret_cast<char*>(&all_goals_achieved_)) + sizeof(response_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double total_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_total_amount(&has_bits);
          total_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractCoopStatusResponse.ContributionInfo contributors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool all_members_reporting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_all_members_reporting(&has_bits);
          all_members_reporting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double grace_period_seconds_remaining = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_grace_period_seconds_remaining(&has_bits);
          grace_period_seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool auto_generated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_auto_generated(&has_bits);
          auto_generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creator_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_creator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusResponse.creator_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool public = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_public_(&has_bits);
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractCoopStatusResponse.CoopGift gifts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gifts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double local_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_local_timestamp(&has_bits);
          local_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractCoopStatusResponse.ChickenRun chicken_runs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chicken_runs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool all_goals_achieved = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_all_goals_achieved(&has_bits);
          all_goals_achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cleared_for_exit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_cleared_for_exit(&has_bits);
          cleared_for_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_since_all_goals_achieved = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_seconds_since_all_goals_achieved(&has_bits);
          seconds_since_all_goals_achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double last_sync = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_last_sync(&has_bits);
          last_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractCoopStatusResponse.ResponseStatus response_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractCoopStatusResponse_ResponseStatus_IsValid(val))) {
            _internal_set_response_status(static_cast<::ei::ContractCoopStatusResponse_ResponseStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional double total_amount = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_amount(), target);
  }

  // optional string coop_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coop_identifier(), target);
  }

  // repeated .ei.ContractCoopStatusResponse.ContributionInfo contributors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contributors(i), target, stream);
  }

  // optional double seconds_remaining = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_remaining(), target);
  }

  // optional bool all_members_reporting = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_all_members_reporting(), target);
  }

  // optional double grace_period_seconds_remaining = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_grace_period_seconds_remaining(), target);
  }

  // optional bool auto_generated = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_auto_generated(), target);
  }

  // optional string creator_id = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusResponse.creator_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_creator_id(), target);
  }

  // optional bool public = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_public_(), target);
  }

  // repeated .ei.ContractCoopStatusResponse.CoopGift gifts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gifts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_gifts(i), target, stream);
  }

  // optional double local_timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_local_timestamp(), target);
  }

  // repeated .ei.ContractCoopStatusResponse.ChickenRun chicken_runs = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chicken_runs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_chicken_runs(i), target, stream);
  }

  // optional bool all_goals_achieved = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_all_goals_achieved(), target);
  }

  // optional bool cleared_for_exit = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_cleared_for_exit(), target);
  }

  // optional double seconds_since_all_goals_achieved = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_seconds_since_all_goals_achieved(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_grade(), target);
  }

  // optional double last_sync = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_last_sync(), target);
  }

  // optional .ei.ContractCoopStatusResponse.ResponseStatus response_status = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_response_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusResponse)
  return target;
}

size_t ContractCoopStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ContractCoopStatusResponse.ContributionInfo contributors = 4;
  total_size += 1UL * this->_internal_contributors_size();
  for (const auto& msg : this->contributors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ContractCoopStatusResponse.CoopGift gifts = 11;
  total_size += 1UL * this->_internal_gifts_size();
  for (const auto& msg : this->gifts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ContractCoopStatusResponse.ChickenRun chicken_runs = 13;
  total_size += 1UL * this->_internal_chicken_runs_size();
  for (const auto& msg : this->chicken_runs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string creator_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creator_id());
    }

    // optional double total_amount = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double seconds_remaining = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double grace_period_seconds_remaining = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool auto_generated = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool public = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool all_goals_achieved = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool all_members_reporting = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool cleared_for_exit = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional double local_timestamp = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double seconds_since_all_goals_achieved = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double last_sync = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional .ei.Contract.PlayerGrade grade = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional .ei.ContractCoopStatusResponse.ResponseStatus response_status = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusResponse)
    MergeFrom(*source);
  }
}

void ContractCoopStatusResponse::MergeFrom(const ContractCoopStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributors_.MergeFrom(from.contributors_);
  gifts_.MergeFrom(from.gifts_);
  chicken_runs_.MergeFrom(from.chicken_runs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_creator_id(from._internal_creator_id());
    }
    if (cached_has_bits & 0x00000008u) {
      total_amount_ = from.total_amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000020u) {
      grace_period_seconds_remaining_ = from.grace_period_seconds_remaining_;
    }
    if (cached_has_bits & 0x00000040u) {
      auto_generated_ = from.auto_generated_;
    }
    if (cached_has_bits & 0x00000080u) {
      public__ = from.public__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      all_goals_achieved_ = from.all_goals_achieved_;
    }
    if (cached_has_bits & 0x00000200u) {
      all_members_reporting_ = from.all_members_reporting_;
    }
    if (cached_has_bits & 0x00000400u) {
      cleared_for_exit_ = from.cleared_for_exit_;
    }
    if (cached_has_bits & 0x00000800u) {
      local_timestamp_ = from.local_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      seconds_since_all_goals_achieved_ = from.seconds_since_all_goals_achieved_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_sync_ = from.last_sync_;
    }
    if (cached_has_bits & 0x00004000u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00008000u) {
      response_status_ = from.response_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusResponse::CopyFrom(const ContractCoopStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusResponse::IsInitialized() const {
  return true;
}

void ContractCoopStatusResponse::InternalSwap(ContractCoopStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contributors_.InternalSwap(&other->contributors_);
  gifts_.InternalSwap(&other->gifts_);
  chicken_runs_.InternalSwap(&other->chicken_runs_);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_id_.Swap(&other->creator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCoopStatusResponse, response_status_)
      + sizeof(ContractCoopStatusResponse::response_status_)
      - PROTOBUF_FIELD_OFFSET(ContractCoopStatusResponse, total_amount_)>(
          reinterpret_cast<char*>(&total_amount_),
          reinterpret_cast<char*>(&other->total_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalContract::InitAsDefaultInstance() {
  ::ei::_LocalContract_default_instance_._instance.get_mutable()->contract_ = const_cast< ::ei::Contract*>(
      ::ei::Contract::internal_default_instance());
  ::ei::_LocalContract_default_instance_._instance.get_mutable()->evaluation_ = const_cast< ::ei::ContractEvaluation*>(
      ::ei::ContractEvaluation::internal_default_instance());
}
class LocalContract::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalContract>()._has_bits_);
  static const ::ei::Contract& contract(const LocalContract* msg);
  static void set_has_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cancelled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_new_(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_coop_shared_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_coop_simulation_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_coop_grace_period_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_coop_contribution_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_coop_last_uploaded_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_coop_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coop_share_farm(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_amount_when_reward_given(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_goals_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_boosts_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_points_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_last_nag_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::ei::ContractEvaluation& evaluation(const LocalContract* msg);
  static void set_has_evaluation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::Contract&
LocalContract::_Internal::contract(const LocalContract* msg) {
  return *msg->contract_;
}
const ::ei::ContractEvaluation&
LocalContract::_Internal::evaluation(const LocalContract* msg) {
  return *msg->evaluation_;
}
LocalContract::LocalContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reported_uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LocalContract)
}
LocalContract::LocalContract(const LocalContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reported_uuids_(from.reported_uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  coop_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_user_id()) {
    coop_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_user_id(),
      GetArena());
  }
  if (from._internal_has_contract()) {
    contract_ = new ::ei::Contract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  if (from._internal_has_evaluation()) {
    evaluation_ = new ::ei::ContractEvaluation(*from.evaluation_);
  } else {
    evaluation_ = nullptr;
  }
  ::memcpy(&time_accepted_, &from.time_accepted_,
    static_cast<size_t>(reinterpret_cast<char*>(&coop_simulation_end_time_) -
    reinterpret_cast<char*>(&time_accepted_)) + sizeof(coop_simulation_end_time_));
  // @@protoc_insertion_point(copy_constructor:ei.LocalContract)
}

void LocalContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalContract_ei_2eproto.base);
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coop_simulation_end_time_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(coop_simulation_end_time_));
}

LocalContract::~LocalContract() {
  // @@protoc_insertion_point(destructor:ei.LocalContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
  if (this != internal_default_instance()) delete evaluation_;
}

void LocalContract::ArenaDtor(void* object) {
  LocalContract* _this = reinterpret_cast< LocalContract* >(object);
  (void)_this;
}
void LocalContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalContract& LocalContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalContract_ei_2eproto.base);
  return *internal_default_instance();
}


void LocalContract::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LocalContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reported_uuids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(contract_ != nullptr);
      contract_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(evaluation_ != nullptr);
      evaluation_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&time_accepted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accepted_) -
        reinterpret_cast<char*>(&time_accepted_)) + sizeof(accepted_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cancelled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_) -
        reinterpret_cast<char*>(&cancelled_)) + sizeof(league_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&last_nag_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coop_simulation_end_time_) -
        reinterpret_cast<char*>(&last_nag_time_)) + sizeof(coop_simulation_end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Contract contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LocalContract.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_accepted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_time_accepted(&has_bits);
          time_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool cancelled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cancelled(&has_bits);
          cancelled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coop_shared_end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_coop_shared_end_time(&has_bits);
          coop_shared_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double last_amount_when_reward_given = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_last_amount_when_reward_given(&has_bits);
          last_amount_when_reward_given_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool accepted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_accepted(&has_bits);
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool new = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_new_(&has_bits);
          new__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coop_grace_period_end_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_coop_grace_period_end_time(&has_bits);
          coop_grace_period_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool coop_contribution_finalized = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_coop_contribution_finalized(&has_bits);
          coop_contribution_finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double coop_last_uploaded_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_coop_last_uploaded_contribution(&has_bits);
          coop_last_uploaded_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 boosts_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_boosts_used(&has_bits);
          boosts_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_user_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_coop_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LocalContract.coop_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_goals_achieved = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_num_goals_achieved(&has_bits);
          num_goals_achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_nag_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_last_nag_time(&has_bits);
          last_nag_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool coop_share_farm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_coop_share_farm(&has_bits);
          coop_share_farm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractEvaluation evaluation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_evaluation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool points_replay = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_points_replay(&has_bits);
          points_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string reported_uuids = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_reported_uuids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LocalContract.reported_uuids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double coop_simulation_end_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_coop_simulation_end_time(&has_bits);
          coop_simulation_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LocalContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Contract contract = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::contract(this), target, stream);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LocalContract.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional double time_accepted = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_accepted(), target);
  }

  // optional bool cancelled = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cancelled(), target);
  }

  // optional double coop_shared_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_coop_shared_end_time(), target);
  }

  // optional double last_amount_when_reward_given = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_last_amount_when_reward_given(), target);
  }

  // optional bool accepted = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_accepted(), target);
  }

  // optional bool new = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_new_(), target);
  }

  // optional double coop_grace_period_end_time = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_coop_grace_period_end_time(), target);
  }

  // optional bool coop_contribution_finalized = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_coop_contribution_finalized(), target);
  }

  // optional double coop_last_uploaded_contribution = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_coop_last_uploaded_contribution(), target);
  }

  // optional uint32 boosts_used = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_boosts_used(), target);
  }

  // optional string coop_user_id = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_user_id().data(), static_cast<int>(this->_internal_coop_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LocalContract.coop_user_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_coop_user_id(), target);
  }

  // optional uint32 num_goals_achieved = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_goals_achieved(), target);
  }

  // optional uint32 league = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_league(), target);
  }

  // optional double last_nag_time = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_last_nag_time(), target);
  }

  // optional bool coop_share_farm = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_coop_share_farm(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_grade(), target);
  }

  // optional .ei.ContractEvaluation evaluation = 19;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::evaluation(this), target, stream);
  }

  // optional bool points_replay = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_points_replay(), target);
  }

  // repeated string reported_uuids = 21;
  for (int i = 0, n = this->_internal_reported_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_reported_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LocalContract.reported_uuids");
    target = stream->WriteString(21, s, target);
  }

  // optional double coop_simulation_end_time = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_coop_simulation_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LocalContract)
  return target;
}

size_t LocalContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LocalContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reported_uuids = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reported_uuids_.size());
  for (int i = 0, n = reported_uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reported_uuids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string coop_user_id = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_user_id());
    }

    // optional .ei.Contract contract = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_);
    }

    // optional .ei.ContractEvaluation evaluation = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *evaluation_);
    }

    // optional double time_accepted = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double coop_shared_end_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double last_amount_when_reward_given = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool accepted = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool cancelled = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool new = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool coop_contribution_finalized = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 boosts_used = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boosts_used());
    }

    // optional double coop_grace_period_end_time = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double coop_last_uploaded_contribution = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_goals_achieved = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_goals_achieved());
    }

    // optional uint32 league = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double last_nag_time = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional .ei.Contract.PlayerGrade grade = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional bool coop_share_farm = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool points_replay = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional double coop_simulation_end_time = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LocalContract)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LocalContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LocalContract)
    MergeFrom(*source);
  }
}

void LocalContract::MergeFrom(const LocalContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LocalContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reported_uuids_.MergeFrom(from.reported_uuids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_user_id(from._internal_coop_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_contract()->::ei::Contract::MergeFrom(from._internal_contract());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_evaluation()->::ei::ContractEvaluation::MergeFrom(from._internal_evaluation());
    }
    if (cached_has_bits & 0x00000010u) {
      time_accepted_ = from.time_accepted_;
    }
    if (cached_has_bits & 0x00000020u) {
      coop_shared_end_time_ = from.coop_shared_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_amount_when_reward_given_ = from.last_amount_when_reward_given_;
    }
    if (cached_has_bits & 0x00000080u) {
      accepted_ = from.accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cancelled_ = from.cancelled_;
    }
    if (cached_has_bits & 0x00000200u) {
      new__ = from.new__;
    }
    if (cached_has_bits & 0x00000400u) {
      coop_contribution_finalized_ = from.coop_contribution_finalized_;
    }
    if (cached_has_bits & 0x00000800u) {
      boosts_used_ = from.boosts_used_;
    }
    if (cached_has_bits & 0x00001000u) {
      coop_grace_period_end_time_ = from.coop_grace_period_end_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      coop_last_uploaded_contribution_ = from.coop_last_uploaded_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_goals_achieved_ = from.num_goals_achieved_;
    }
    if (cached_has_bits & 0x00008000u) {
      league_ = from.league_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_nag_time_ = from.last_nag_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00040000u) {
      coop_share_farm_ = from.coop_share_farm_;
    }
    if (cached_has_bits & 0x00080000u) {
      points_replay_ = from.points_replay_;
    }
    if (cached_has_bits & 0x00100000u) {
      coop_simulation_end_time_ = from.coop_simulation_end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LocalContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalContract::CopyFrom(const LocalContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LocalContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalContract::IsInitialized() const {
  return true;
}

void LocalContract::InternalSwap(LocalContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reported_uuids_.InternalSwap(&other->reported_uuids_);
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_user_id_.Swap(&other->coop_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalContract, coop_simulation_end_time_)
      + sizeof(LocalContract::coop_simulation_end_time_)
      - PROTOBUF_FIELD_OFFSET(LocalContract, contract_)>(
          reinterpret_cast<char*>(&contract_),
          reinterpret_cast<char*>(&other->contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyContracts::InitAsDefaultInstance() {
  ::ei::_MyContracts_default_instance_._instance.get_mutable()->last_cpi_ = const_cast< ::ei::ContractPlayerInfo*>(
      ::ei::ContractPlayerInfo::internal_default_instance());
}
class MyContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<MyContracts>()._has_bits_);
  static const ::ei::ContractPlayerInfo& last_cpi(const MyContracts* msg);
  static void set_has_last_cpi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_grade_revealed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_grade_progress_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_advanced_evaluations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::ContractPlayerInfo&
MyContracts::_Internal::last_cpi(const MyContracts* msg) {
  return *msg->last_cpi_;
}
MyContracts::MyContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena),
  archive_(arena),
  contract_ids_seen_(arena),
  current_coop_statuses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MyContracts)
}
MyContracts::MyContracts(const MyContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contracts_(from.contracts_),
      archive_(from.archive_),
      contract_ids_seen_(from.contract_ids_seen_),
      current_coop_statuses_(from.current_coop_statuses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_cpi()) {
    last_cpi_ = new ::ei::ContractPlayerInfo(*from.last_cpi_);
  } else {
    last_cpi_ = nullptr;
  }
  ::memcpy(&last_grade_progress_shown_, &from.last_grade_progress_shown_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_advanced_evaluations_) -
    reinterpret_cast<char*>(&last_grade_progress_shown_)) + sizeof(show_advanced_evaluations_));
  // @@protoc_insertion_point(copy_constructor:ei.MyContracts)
}

void MyContracts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyContracts_ei_2eproto.base);
  ::memset(&last_cpi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_advanced_evaluations_) -
      reinterpret_cast<char*>(&last_cpi_)) + sizeof(show_advanced_evaluations_));
}

MyContracts::~MyContracts() {
  // @@protoc_insertion_point(destructor:ei.MyContracts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MyContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete last_cpi_;
}

void MyContracts::ArenaDtor(void* object) {
  MyContracts* _this = reinterpret_cast< MyContracts* >(object);
  (void)_this;
}
void MyContracts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyContracts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyContracts& MyContracts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyContracts_ei_2eproto.base);
  return *internal_default_instance();
}


void MyContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MyContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  archive_.Clear();
  contract_ids_seen_.Clear();
  current_coop_statuses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_cpi_ != nullptr);
    last_cpi_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&last_grade_progress_shown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_advanced_evaluations_) -
        reinterpret_cast<char*>(&last_grade_progress_shown_)) + sizeof(show_advanced_evaluations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyContracts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.LocalContract contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.LocalContract archive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string contract_ids_seen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contract_ids_seen();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MyContracts.contract_ids_seen");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractCoopStatusResponse current_coop_statuses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_coop_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractPlayerInfo last_cpi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_cpi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initial_grade_revealed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_initial_grade_revealed(&has_bits);
          initial_grade_revealed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_grade_progress_shown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_last_grade_progress_shown(&has_bits);
          last_grade_progress_shown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool show_advanced_evaluations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_show_advanced_evaluations(&has_bits);
          show_advanced_evaluations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyContracts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MyContracts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.LocalContract contracts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contracts(i), target, stream);
  }

  // repeated .ei.LocalContract archive = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_archive(i), target, stream);
  }

  // repeated string contract_ids_seen = 3;
  for (int i = 0, n = this->_internal_contract_ids_seen_size(); i < n; i++) {
    const auto& s = this->_internal_contract_ids_seen(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MyContracts.contract_ids_seen");
    target = stream->WriteString(3, s, target);
  }

  // repeated .ei.ContractCoopStatusResponse current_coop_statuses = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_current_coop_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_current_coop_statuses(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ei.ContractPlayerInfo last_cpi = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_cpi(this), target, stream);
  }

  // optional bool initial_grade_revealed = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_initial_grade_revealed(), target);
  }

  // optional double last_grade_progress_shown = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_grade_progress_shown(), target);
  }

  // optional bool show_advanced_evaluations = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_show_advanced_evaluations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MyContracts)
  return target;
}

size_t MyContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MyContracts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LocalContract contracts = 1;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.LocalContract archive = 2;
  total_size += 1UL * this->_internal_archive_size();
  for (const auto& msg : this->archive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string contract_ids_seen = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(contract_ids_seen_.size());
  for (int i = 0, n = contract_ids_seen_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      contract_ids_seen_.Get(i));
  }

  // repeated .ei.ContractCoopStatusResponse current_coop_statuses = 4;
  total_size += 1UL * this->_internal_current_coop_statuses_size();
  for (const auto& msg : this->current_coop_statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ei.ContractPlayerInfo last_cpi = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_cpi_);
    }

    // optional double last_grade_progress_shown = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool initial_grade_revealed = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool show_advanced_evaluations = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyContracts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MyContracts)
  GOOGLE_DCHECK_NE(&from, this);
  const MyContracts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyContracts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MyContracts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MyContracts)
    MergeFrom(*source);
  }
}

void MyContracts::MergeFrom(const MyContracts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MyContracts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  archive_.MergeFrom(from.archive_);
  contract_ids_seen_.MergeFrom(from.contract_ids_seen_);
  current_coop_statuses_.MergeFrom(from.current_coop_statuses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_last_cpi()->::ei::ContractPlayerInfo::MergeFrom(from._internal_last_cpi());
    }
    if (cached_has_bits & 0x00000002u) {
      last_grade_progress_shown_ = from.last_grade_progress_shown_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_grade_revealed_ = from.initial_grade_revealed_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_advanced_evaluations_ = from.show_advanced_evaluations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyContracts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MyContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyContracts::CopyFrom(const MyContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MyContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyContracts::IsInitialized() const {
  return true;
}

void MyContracts::InternalSwap(MyContracts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contracts_.InternalSwap(&other->contracts_);
  archive_.InternalSwap(&other->archive_);
  contract_ids_seen_.InternalSwap(&other->contract_ids_seen_);
  current_coop_statuses_.InternalSwap(&other->current_coop_statuses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyContracts, show_advanced_evaluations_)
      + sizeof(MyContracts::show_advanced_evaluations_)
      - PROTOBUF_FIELD_OFFSET(MyContracts, last_cpi_)>(
          reinterpret_cast<char*>(&last_cpi_),
          reinterpret_cast<char*>(&other->last_cpi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyContracts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryCoopRequest::InitAsDefaultInstance() {
  ::ei::_QueryCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class QueryCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const QueryCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::BasicRequestInfo&
QueryCoopRequest::_Internal::rinfo(const QueryCoopRequest* msg) {
  return *msg->rinfo_;
}
QueryCoopRequest::QueryCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.QueryCoopRequest)
}
QueryCoopRequest::QueryCoopRequest(const QueryCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:ei.QueryCoopRequest)
}

void QueryCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(grade_));
}

QueryCoopRequest::~QueryCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.QueryCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void QueryCoopRequest::ArenaDtor(void* object) {
  QueryCoopRequest* _this = reinterpret_cast< QueryCoopRequest* >(object);
  (void)_this;
}
void QueryCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryCoopRequest& QueryCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void QueryCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.QueryCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.QueryCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.QueryCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.QueryCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.QueryCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.QueryCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional uint32 league = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_league(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rinfo(this), target, stream);
  }

  // optional .ei.Contract.PlayerGrade grade = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.QueryCoopRequest)
  return target;
}

size_t QueryCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.QueryCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional .ei.BasicRequestInfo rinfo = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 league = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

    // optional .ei.Contract.PlayerGrade grade = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.QueryCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.QueryCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.QueryCoopRequest)
    MergeFrom(*source);
  }
}

void QueryCoopRequest::MergeFrom(const QueryCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.QueryCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_ = from.league_;
    }
    if (cached_has_bits & 0x00000020u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.QueryCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCoopRequest::CopyFrom(const QueryCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.QueryCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCoopRequest::IsInitialized() const {
  return true;
}

void QueryCoopRequest::InternalSwap(QueryCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryCoopRequest, grade_)
      + sizeof(QueryCoopRequest::grade_)
      - PROTOBUF_FIELD_OFFSET(QueryCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryCoopResponse::InitAsDefaultInstance() {
}
class QueryCoopResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryCoopResponse>()._has_bits_);
  static void set_has_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expired(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_different_league(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_different_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cc_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

QueryCoopResponse::QueryCoopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.QueryCoopResponse)
}
QueryCoopResponse::QueryCoopResponse(const QueryCoopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&exists_, &from.exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&exists_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:ei.QueryCoopResponse)
}

void QueryCoopResponse::SharedCtor() {
  ::memset(&exists_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banned_) -
      reinterpret_cast<char*>(&exists_)) + sizeof(banned_));
}

QueryCoopResponse::~QueryCoopResponse() {
  // @@protoc_insertion_point(destructor:ei.QueryCoopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryCoopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryCoopResponse::ArenaDtor(void* object) {
  QueryCoopResponse* _this = reinterpret_cast< QueryCoopResponse* >(object);
  (void)_this;
}
void QueryCoopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryCoopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryCoopResponse& QueryCoopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryCoopResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void QueryCoopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.QueryCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&exists_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&exists_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCoopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_exists(&has_bits);
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_full(&has_bits);
          full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_banned(&has_bits);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool different_league = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_different_league(&has_bits);
          different_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expired(&has_bits);
          expired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool different_grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_different_grade(&has_bits);
          different_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cc_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cc_only(&has_bits);
          cc_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryCoopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.QueryCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool exists = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // optional bool full = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_full(), target);
  }

  // optional bool banned = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_banned(), target);
  }

  // optional bool different_league = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_different_league(), target);
  }

  // optional bool expired = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_expired(), target);
  }

  // optional bool different_grade = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_different_grade(), target);
  }

  // optional bool cc_only = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_cc_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.QueryCoopResponse)
  return target;
}

size_t QueryCoopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.QueryCoopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool exists = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool full = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool expired = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool different_league = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool different_grade = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool cc_only = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool banned = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryCoopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.QueryCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryCoopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryCoopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.QueryCoopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.QueryCoopResponse)
    MergeFrom(*source);
  }
}

void QueryCoopResponse::MergeFrom(const QueryCoopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.QueryCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      exists_ = from.exists_;
    }
    if (cached_has_bits & 0x00000002u) {
      full_ = from.full_;
    }
    if (cached_has_bits & 0x00000004u) {
      expired_ = from.expired_;
    }
    if (cached_has_bits & 0x00000008u) {
      different_league_ = from.different_league_;
    }
    if (cached_has_bits & 0x00000010u) {
      different_grade_ = from.different_grade_;
    }
    if (cached_has_bits & 0x00000020u) {
      cc_only_ = from.cc_only_;
    }
    if (cached_has_bits & 0x00000040u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryCoopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.QueryCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCoopResponse::CopyFrom(const QueryCoopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.QueryCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCoopResponse::IsInitialized() const {
  return true;
}

void QueryCoopResponse::InternalSwap(QueryCoopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryCoopResponse, banned_)
      + sizeof(QueryCoopResponse::banned_)
      - PROTOBUF_FIELD_OFFSET(QueryCoopResponse, exists_)>(
          reinterpret_cast<char*>(&exists_),
          reinterpret_cast<char*>(&other->exists_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCoopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCoopRequest::InitAsDefaultInstance() {
  ::ei::_CreateCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class CreateCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const CreateCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cc_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_all_grades(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_points_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::BasicRequestInfo&
CreateCoopRequest::_Internal::rinfo(const CreateCoopRequest* msg) {
  return *msg->rinfo_;
}
CreateCoopRequest::CreateCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CreateCoopRequest)
}
CreateCoopRequest::CreateCoopRequest(const CreateCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&seconds_remaining_, &from.seconds_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_replay_) -
    reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(points_replay_));
  // @@protoc_insertion_point(copy_constructor:ei.CreateCoopRequest)
}

void CreateCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_replay_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(points_replay_));
}

CreateCoopRequest::~CreateCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.CreateCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void CreateCoopRequest::ArenaDtor(void* object) {
  CreateCoopRequest* _this = reinterpret_cast< CreateCoopRequest* >(object);
  (void)_this;
}
void CreateCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCoopRequest& CreateCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void CreateCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CreateCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&seconds_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(client_version_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&soul_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_replay_) -
        reinterpret_cast<char*>(&soul_power_)) + sizeof(points_replay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CreateCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CreateCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CreateCoopRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CreateCoopRequest.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_eop(&has_bits);
          eop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool public = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_public_(&has_bits);
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cc_only = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_cc_only(&has_bits);
          cc_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool points_replay = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_points_replay(&has_bits);
          points_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_all_grades = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_allow_all_grades(&has_bits);
          allow_all_grades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CreateCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CreateCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CreateCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional double seconds_remaining = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_seconds_remaining(), target);
  }

  // optional string user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CreateCoopRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // optional string user_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CreateCoopRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_name(), target);
  }

  // optional .ei.Platform platform = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_platform(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional double soul_power = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_soul_power(), target);
  }

  // optional uint32 league = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_league(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rinfo(this), target, stream);
  }

  // optional double eop = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_eop(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_grade(), target);
  }

  // optional bool public = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_public_(), target);
  }

  // optional bool cc_only = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_cc_only(), target);
  }

  // optional bool points_replay = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_points_replay(), target);
  }

  // optional bool allow_all_grades = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_allow_all_grades(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CreateCoopRequest)
  return target;
}

size_t CreateCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CreateCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string user_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional .ei.BasicRequestInfo rinfo = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional double seconds_remaining = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .ei.Platform platform = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double soul_power = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 league = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

    // optional .ei.Contract.PlayerGrade grade = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional double eop = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool public = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool cc_only = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool allow_all_grades = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool points_replay = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CreateCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CreateCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CreateCoopRequest)
    MergeFrom(*source);
  }
}

void CreateCoopRequest::MergeFrom(const CreateCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CreateCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00000200u) {
      league_ = from.league_;
    }
    if (cached_has_bits & 0x00000400u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000800u) {
      eop_ = from.eop_;
    }
    if (cached_has_bits & 0x00001000u) {
      public__ = from.public__;
    }
    if (cached_has_bits & 0x00002000u) {
      cc_only_ = from.cc_only_;
    }
    if (cached_has_bits & 0x00004000u) {
      allow_all_grades_ = from.allow_all_grades_;
    }
    if (cached_has_bits & 0x00008000u) {
      points_replay_ = from.points_replay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CreateCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCoopRequest::CopyFrom(const CreateCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CreateCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCoopRequest::IsInitialized() const {
  return true;
}

void CreateCoopRequest::InternalSwap(CreateCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateCoopRequest, points_replay_)
      + sizeof(CreateCoopRequest::points_replay_)
      - PROTOBUF_FIELD_OFFSET(CreateCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateCoopResponse::InitAsDefaultInstance() {
}
class CreateCoopResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateCoopResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateCoopResponse::CreateCoopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CreateCoopResponse)
}
CreateCoopResponse::CreateCoopResponse(const CreateCoopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ei.CreateCoopResponse)
}

void CreateCoopResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCoopResponse_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

CreateCoopResponse::~CreateCoopResponse() {
  // @@protoc_insertion_point(destructor:ei.CreateCoopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateCoopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateCoopResponse::ArenaDtor(void* object) {
  CreateCoopResponse* _this = reinterpret_cast< CreateCoopResponse* >(object);
  (void)_this;
}
void CreateCoopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCoopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCoopResponse& CreateCoopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCoopResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void CreateCoopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CreateCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCoopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CreateCoopResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCoopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CreateCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CreateCoopResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CreateCoopResponse)
  return target;
}

size_t CreateCoopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CreateCoopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCoopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CreateCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCoopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCoopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CreateCoopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CreateCoopResponse)
    MergeFrom(*source);
  }
}

void CreateCoopResponse::MergeFrom(const CreateCoopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CreateCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateCoopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CreateCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCoopResponse::CopyFrom(const CreateCoopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CreateCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCoopResponse::IsInitialized() const {
  return true;
}

void CreateCoopResponse::InternalSwap(CreateCoopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCoopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinCoopRequest::InitAsDefaultInstance() {
  ::ei::_JoinCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class JoinCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const JoinCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_points_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::ei::BasicRequestInfo&
JoinCoopRequest::_Internal::rinfo(const JoinCoopRequest* msg) {
  return *msg->rinfo_;
}
JoinCoopRequest::JoinCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.JoinCoopRequest)
}
JoinCoopRequest::JoinCoopRequest(const JoinCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_replay_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(points_replay_));
  // @@protoc_insertion_point(copy_constructor:ei.JoinCoopRequest)
}

void JoinCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_replay_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(points_replay_));
}

JoinCoopRequest::~JoinCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.JoinCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void JoinCoopRequest::ArenaDtor(void* object) {
  JoinCoopRequest* _this = reinterpret_cast< JoinCoopRequest* >(object);
  (void)_this;
}
void JoinCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinCoopRequest& JoinCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void JoinCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.JoinCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&platform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soul_power_) -
        reinterpret_cast<char*>(&platform_)) + sizeof(soul_power_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&seconds_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_replay_) -
        reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(points_replay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopRequest.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double eop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_eop(&has_bits);
          eop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool points_replay = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_points_replay(&has_bits);
          points_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.JoinCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional string user_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_name(), target);
  }

  // optional .ei.Platform platform = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional double soul_power = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_soul_power(), target);
  }

  // optional uint32 league = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_league(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rinfo(this), target, stream);
  }

  // optional double seconds_remaining = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_seconds_remaining(), target);
  }

  // optional double eop = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_eop(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_grade(), target);
  }

  // optional bool points_replay = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_points_replay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.JoinCoopRequest)
  return target;
}

size_t JoinCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.JoinCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional .ei.BasicRequestInfo rinfo = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.Platform platform = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional double soul_power = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double seconds_remaining = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 league = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

    // optional .ei.Contract.PlayerGrade grade = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional double eop = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool points_replay = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.JoinCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.JoinCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.JoinCoopRequest)
    MergeFrom(*source);
  }
}

void JoinCoopRequest::MergeFrom(const JoinCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.JoinCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      soul_power_ = from.soul_power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000200u) {
      league_ = from.league_;
    }
    if (cached_has_bits & 0x00000400u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000800u) {
      eop_ = from.eop_;
    }
    if (cached_has_bits & 0x00001000u) {
      points_replay_ = from.points_replay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.JoinCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinCoopRequest::CopyFrom(const JoinCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.JoinCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinCoopRequest::IsInitialized() const {
  return true;
}

void JoinCoopRequest::InternalSwap(JoinCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinCoopRequest, points_replay_)
      + sizeof(JoinCoopRequest::points_replay_)
      - PROTOBUF_FIELD_OFFSET(JoinCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinCoopResponse::InitAsDefaultInstance() {
}
class JoinCoopResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinCoopResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_members(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

JoinCoopResponse::JoinCoopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.JoinCoopResponse)
}
JoinCoopResponse::JoinCoopResponse(const JoinCoopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  ::memcpy(&seconds_remaining_, &from.seconds_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:ei.JoinCoopResponse)
}

void JoinCoopResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinCoopResponse_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seconds_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(grade_));
}

JoinCoopResponse::~JoinCoopResponse() {
  // @@protoc_insertion_point(destructor:ei.JoinCoopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinCoopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinCoopResponse::ArenaDtor(void* object) {
  JoinCoopResponse* _this = reinterpret_cast< JoinCoopResponse* >(object);
  (void)_this;
}
void JoinCoopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinCoopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinCoopResponse& JoinCoopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinCoopResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void JoinCoopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.JoinCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seconds_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_percent_) -
        reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(match_percent_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&status_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinCoopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool banned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_banned(&has_bits);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.JoinCoopResponse.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double match_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_match_percent(&has_bits);
          match_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_members = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_members(&has_bits);
          num_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractCoopStatusResponse.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractCoopStatusResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::ContractCoopStatusResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool can_start = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_start(&has_bits);
          can_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinCoopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.JoinCoopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional double seconds_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_seconds_remaining(), target);
  }

  // optional bool banned = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_banned(), target);
  }

  // optional string coop_identifier = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.JoinCoopResponse.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_coop_identifier(), target);
  }

  // optional double match_percent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_match_percent(), target);
  }

  // optional uint32 num_members = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_members(), target);
  }

  // optional .ei.ContractCoopStatusResponse.Status status = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_grade(), target);
  }

  // optional bool can_start = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.JoinCoopResponse)
  return target;
}

size_t JoinCoopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.JoinCoopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string coop_identifier = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional double seconds_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool banned = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_start = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_members = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_members());
    }

    // optional double match_percent = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .ei.ContractCoopStatusResponse.Status status = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .ei.Contract.PlayerGrade grade = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinCoopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.JoinCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinCoopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinCoopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.JoinCoopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.JoinCoopResponse)
    MergeFrom(*source);
  }
}

void JoinCoopResponse::MergeFrom(const JoinCoopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.JoinCoopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000010u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_start_ = from.can_start_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_percent_ = from.match_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinCoopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.JoinCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinCoopResponse::CopyFrom(const JoinCoopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.JoinCoopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinCoopResponse::IsInitialized() const {
  return true;
}

void JoinCoopResponse::InternalSwap(JoinCoopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinCoopResponse, grade_)
      + sizeof(JoinCoopResponse::grade_)
      - PROTOBUF_FIELD_OFFSET(JoinCoopResponse, seconds_remaining_)>(
          reinterpret_cast<char*>(&seconds_remaining_),
          reinterpret_cast<char*>(&other->seconds_remaining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinCoopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoJoinCoopRequest::InitAsDefaultInstance() {
  ::ei::_AutoJoinCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class AutoJoinCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoJoinCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const AutoJoinCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_points_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::BasicRequestInfo&
AutoJoinCoopRequest::_Internal::rinfo(const AutoJoinCoopRequest* msg) {
  return *msg->rinfo_;
}
AutoJoinCoopRequest::AutoJoinCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AutoJoinCoopRequest)
}
AutoJoinCoopRequest::AutoJoinCoopRequest(const AutoJoinCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&soul_power_, &from.soul_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_replay_) -
    reinterpret_cast<char*>(&soul_power_)) + sizeof(points_replay_));
  // @@protoc_insertion_point(copy_constructor:ei.AutoJoinCoopRequest)
}

void AutoJoinCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoJoinCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_replay_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(points_replay_));
}

AutoJoinCoopRequest::~AutoJoinCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.AutoJoinCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoJoinCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void AutoJoinCoopRequest::ArenaDtor(void* object) {
  AutoJoinCoopRequest* _this = reinterpret_cast< AutoJoinCoopRequest* >(object);
  (void)_this;
}
void AutoJoinCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoJoinCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoJoinCoopRequest& AutoJoinCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoJoinCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void AutoJoinCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AutoJoinCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&soul_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&soul_power_)) + sizeof(client_version_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&eop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_replay_) -
        reinterpret_cast<char*>(&eop_)) + sizeof(points_replay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoJoinCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AutoJoinCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AutoJoinCoopRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AutoJoinCoopRequest.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_eop(&has_bits);
          eop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool points_replay = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_points_replay(&has_bits);
          points_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoJoinCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AutoJoinCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AutoJoinCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AutoJoinCoopRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AutoJoinCoopRequest.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional double soul_power = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_soul_power(), target);
  }

  // optional double seconds_remaining = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_remaining(), target);
  }

  // optional .ei.Platform platform = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_platform(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional uint32 league = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_league(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rinfo(this), target, stream);
  }

  // optional double eop = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_eop(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_grade(), target);
  }

  // optional bool points_replay = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_points_replay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AutoJoinCoopRequest)
  return target;
}

size_t AutoJoinCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AutoJoinCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string user_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional .ei.BasicRequestInfo rinfo = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional double soul_power = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double seconds_remaining = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .ei.Platform platform = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double eop = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 league = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

    // optional .ei.Contract.PlayerGrade grade = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional bool points_replay = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoJoinCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AutoJoinCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoJoinCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoJoinCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AutoJoinCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AutoJoinCoopRequest)
    MergeFrom(*source);
  }
}

void AutoJoinCoopRequest::MergeFrom(const AutoJoinCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AutoJoinCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      eop_ = from.eop_;
    }
    if (cached_has_bits & 0x00000200u) {
      league_ = from.league_;
    }
    if (cached_has_bits & 0x00000400u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000800u) {
      points_replay_ = from.points_replay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoJoinCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AutoJoinCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoJoinCoopRequest::CopyFrom(const AutoJoinCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AutoJoinCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoJoinCoopRequest::IsInitialized() const {
  return true;
}

void AutoJoinCoopRequest::InternalSwap(AutoJoinCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoJoinCoopRequest, points_replay_)
      + sizeof(AutoJoinCoopRequest::points_replay_)
      - PROTOBUF_FIELD_OFFSET(AutoJoinCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoJoinCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateCoopPermissionsRequest::InitAsDefaultInstance() {
  ::ei::_UpdateCoopPermissionsRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class UpdateCoopPermissionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateCoopPermissionsRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const UpdateCoopPermissionsRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requesting_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::BasicRequestInfo&
UpdateCoopPermissionsRequest::_Internal::rinfo(const UpdateCoopPermissionsRequest* msg) {
  return *msg->rinfo_;
}
UpdateCoopPermissionsRequest::UpdateCoopPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UpdateCoopPermissionsRequest)
}
UpdateCoopPermissionsRequest::UpdateCoopPermissionsRequest(const UpdateCoopPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_id()) {
    requesting_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&public__, &from.public__,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&public__)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:ei.UpdateCoopPermissionsRequest)
}

void UpdateCoopPermissionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCoopPermissionsRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

UpdateCoopPermissionsRequest::~UpdateCoopPermissionsRequest() {
  // @@protoc_insertion_point(destructor:ei.UpdateCoopPermissionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCoopPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void UpdateCoopPermissionsRequest::ArenaDtor(void* object) {
  UpdateCoopPermissionsRequest* _this = reinterpret_cast< UpdateCoopPermissionsRequest* >(object);
  (void)_this;
}
void UpdateCoopPermissionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCoopPermissionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCoopPermissionsRequest& UpdateCoopPermissionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCoopPermissionsRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void UpdateCoopPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UpdateCoopPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      requesting_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&public__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&public__)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCoopPermissionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UpdateCoopPermissionsRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UpdateCoopPermissionsRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UpdateCoopPermissionsRequest.requesting_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_public_(&has_bits);
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCoopPermissionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UpdateCoopPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UpdateCoopPermissionsRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UpdateCoopPermissionsRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string requesting_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UpdateCoopPermissionsRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requesting_user_id(), target);
  }

  // optional bool public = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_public_(), target);
  }

  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UpdateCoopPermissionsRequest)
  return target;
}

size_t UpdateCoopPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UpdateCoopPermissionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string requesting_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional bool public = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCoopPermissionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UpdateCoopPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCoopPermissionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCoopPermissionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UpdateCoopPermissionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UpdateCoopPermissionsRequest)
    MergeFrom(*source);
  }
}

void UpdateCoopPermissionsRequest::MergeFrom(const UpdateCoopPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UpdateCoopPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_requesting_user_id(from._internal_requesting_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      public__ = from.public__;
    }
    if (cached_has_bits & 0x00000020u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateCoopPermissionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UpdateCoopPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCoopPermissionsRequest::CopyFrom(const UpdateCoopPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UpdateCoopPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCoopPermissionsRequest::IsInitialized() const {
  return true;
}

void UpdateCoopPermissionsRequest::InternalSwap(UpdateCoopPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_id_.Swap(&other->requesting_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCoopPermissionsRequest, client_version_)
      + sizeof(UpdateCoopPermissionsRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(UpdateCoopPermissionsRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCoopPermissionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateCoopPermissionsResponse::InitAsDefaultInstance() {
}
class UpdateCoopPermissionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateCoopPermissionsResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateCoopPermissionsResponse::UpdateCoopPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UpdateCoopPermissionsResponse)
}
UpdateCoopPermissionsResponse::UpdateCoopPermissionsResponse(const UpdateCoopPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ei.UpdateCoopPermissionsResponse)
}

void UpdateCoopPermissionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCoopPermissionsResponse_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

UpdateCoopPermissionsResponse::~UpdateCoopPermissionsResponse() {
  // @@protoc_insertion_point(destructor:ei.UpdateCoopPermissionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCoopPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateCoopPermissionsResponse::ArenaDtor(void* object) {
  UpdateCoopPermissionsResponse* _this = reinterpret_cast< UpdateCoopPermissionsResponse* >(object);
  (void)_this;
}
void UpdateCoopPermissionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCoopPermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCoopPermissionsResponse& UpdateCoopPermissionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCoopPermissionsResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void UpdateCoopPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UpdateCoopPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCoopPermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UpdateCoopPermissionsResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCoopPermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UpdateCoopPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UpdateCoopPermissionsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UpdateCoopPermissionsResponse)
  return target;
}

size_t UpdateCoopPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UpdateCoopPermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCoopPermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UpdateCoopPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCoopPermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCoopPermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UpdateCoopPermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UpdateCoopPermissionsResponse)
    MergeFrom(*source);
  }
}

void UpdateCoopPermissionsResponse::MergeFrom(const UpdateCoopPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UpdateCoopPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateCoopPermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UpdateCoopPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCoopPermissionsResponse::CopyFrom(const UpdateCoopPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UpdateCoopPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCoopPermissionsResponse::IsInitialized() const {
  return true;
}

void UpdateCoopPermissionsResponse::InternalSwap(UpdateCoopPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCoopPermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveCoopRequest::InitAsDefaultInstance() {
  ::ei::_LeaveCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class LeaveCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const LeaveCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ei::BasicRequestInfo&
LeaveCoopRequest::_Internal::rinfo(const LeaveCoopRequest* msg) {
  return *msg->rinfo_;
}
LeaveCoopRequest::LeaveCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaveCoopRequest)
}
LeaveCoopRequest::LeaveCoopRequest(const LeaveCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_identifier()) {
    player_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_identifier(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:ei.LeaveCoopRequest)
}

void LeaveCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaveCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

LeaveCoopRequest::~LeaveCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.LeaveCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void LeaveCoopRequest::ArenaDtor(void* object) {
  LeaveCoopRequest* _this = reinterpret_cast< LeaveCoopRequest* >(object);
  (void)_this;
}
void LeaveCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveCoopRequest& LeaveCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaveCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaveCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      player_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaveCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaveCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaveCoopRequest.player_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaveCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaveCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaveCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string player_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_identifier().data(), static_cast<int>(this->_internal_player_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaveCoopRequest.player_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_identifier(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaveCoopRequest)
  return target;
}

size_t LeaveCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaveCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string player_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_identifier());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaveCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaveCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaveCoopRequest)
    MergeFrom(*source);
  }
}

void LeaveCoopRequest::MergeFrom(const LeaveCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaveCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_player_identifier(from._internal_player_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaveCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveCoopRequest::CopyFrom(const LeaveCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaveCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveCoopRequest::IsInitialized() const {
  return true;
}

void LeaveCoopRequest::InternalSwap(LeaveCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_identifier_.Swap(&other->player_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveCoopRequest, client_version_)
      + sizeof(LeaveCoopRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(LeaveCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GiftPlayerCoopRequest::InitAsDefaultInstance() {
  ::ei::_GiftPlayerCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class GiftPlayerCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GiftPlayerCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const GiftPlayerCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requesting_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requesting_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::BasicRequestInfo&
GiftPlayerCoopRequest::_Internal::rinfo(const GiftPlayerCoopRequest* msg) {
  return *msg->rinfo_;
}
GiftPlayerCoopRequest::GiftPlayerCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.GiftPlayerCoopRequest)
}
GiftPlayerCoopRequest::GiftPlayerCoopRequest(const GiftPlayerCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_identifier()) {
    player_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_identifier(),
      GetArena());
  }
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_id()) {
    requesting_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_id(),
      GetArena());
  }
  requesting_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_name()) {
    requesting_user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_name(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:ei.GiftPlayerCoopRequest)
}

void GiftPlayerCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GiftPlayerCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

GiftPlayerCoopRequest::~GiftPlayerCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.GiftPlayerCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GiftPlayerCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void GiftPlayerCoopRequest::ArenaDtor(void* object) {
  GiftPlayerCoopRequest* _this = reinterpret_cast< GiftPlayerCoopRequest* >(object);
  (void)_this;
}
void GiftPlayerCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GiftPlayerCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GiftPlayerCoopRequest& GiftPlayerCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GiftPlayerCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void GiftPlayerCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.GiftPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      player_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      requesting_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      requesting_user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GiftPlayerCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GiftPlayerCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GiftPlayerCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GiftPlayerCoopRequest.player_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GiftPlayerCoopRequest.requesting_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_requesting_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GiftPlayerCoopRequest.requesting_user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GiftPlayerCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.GiftPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GiftPlayerCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GiftPlayerCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string player_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_identifier().data(), static_cast<int>(this->_internal_player_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GiftPlayerCoopRequest.player_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_identifier(), target);
  }

  // optional string requesting_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GiftPlayerCoopRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_requesting_user_id(), target);
  }

  // optional uint32 amount = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_amount(), target);
  }

  // optional string requesting_user_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_name().data(), static_cast<int>(this->_internal_requesting_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GiftPlayerCoopRequest.requesting_user_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_requesting_user_name(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.GiftPlayerCoopRequest)
  return target;
}

size_t GiftPlayerCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.GiftPlayerCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string player_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_identifier());
    }

    // optional string requesting_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_id());
    }

    // optional string requesting_user_name = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_name());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 amount = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount());
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiftPlayerCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.GiftPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftPlayerCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GiftPlayerCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.GiftPlayerCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.GiftPlayerCoopRequest)
    MergeFrom(*source);
  }
}

void GiftPlayerCoopRequest::MergeFrom(const GiftPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.GiftPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_player_identifier(from._internal_player_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_requesting_user_id(from._internal_requesting_user_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_requesting_user_name(from._internal_requesting_user_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GiftPlayerCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.GiftPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftPlayerCoopRequest::CopyFrom(const GiftPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.GiftPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftPlayerCoopRequest::IsInitialized() const {
  return true;
}

void GiftPlayerCoopRequest::InternalSwap(GiftPlayerCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_identifier_.Swap(&other->player_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_id_.Swap(&other->requesting_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_name_.Swap(&other->requesting_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GiftPlayerCoopRequest, client_version_)
      + sizeof(GiftPlayerCoopRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(GiftPlayerCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GiftPlayerCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendChickenRunCoopRequest::InitAsDefaultInstance() {
  ::ei::_SendChickenRunCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class SendChickenRunCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChickenRunCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const SendChickenRunCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requesting_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requesting_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_farm_pop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::BasicRequestInfo&
SendChickenRunCoopRequest::_Internal::rinfo(const SendChickenRunCoopRequest* msg) {
  return *msg->rinfo_;
}
SendChickenRunCoopRequest::SendChickenRunCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SendChickenRunCoopRequest)
}
SendChickenRunCoopRequest::SendChickenRunCoopRequest(const SendChickenRunCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_identifier()) {
    player_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_identifier(),
      GetArena());
  }
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_id()) {
    requesting_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_id(),
      GetArena());
  }
  requesting_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_name()) {
    requesting_user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_name(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&farm_pop_, &from.farm_pop_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&farm_pop_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:ei.SendChickenRunCoopRequest)
}

void SendChickenRunCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendChickenRunCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

SendChickenRunCoopRequest::~SendChickenRunCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.SendChickenRunCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendChickenRunCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void SendChickenRunCoopRequest::ArenaDtor(void* object) {
  SendChickenRunCoopRequest* _this = reinterpret_cast< SendChickenRunCoopRequest* >(object);
  (void)_this;
}
void SendChickenRunCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendChickenRunCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendChickenRunCoopRequest& SendChickenRunCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendChickenRunCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void SendChickenRunCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SendChickenRunCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      player_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      requesting_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      requesting_user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&farm_pop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&farm_pop_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChickenRunCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SendChickenRunCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SendChickenRunCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SendChickenRunCoopRequest.player_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SendChickenRunCoopRequest.requesting_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 farm_pop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_farm_pop(&has_bits);
          farm_pop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_requesting_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SendChickenRunCoopRequest.requesting_user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendChickenRunCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SendChickenRunCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SendChickenRunCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SendChickenRunCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string player_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_identifier().data(), static_cast<int>(this->_internal_player_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SendChickenRunCoopRequest.player_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_identifier(), target);
  }

  // optional string requesting_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SendChickenRunCoopRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_requesting_user_id(), target);
  }

  // optional uint64 farm_pop = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_farm_pop(), target);
  }

  // optional string requesting_user_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_name().data(), static_cast<int>(this->_internal_requesting_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SendChickenRunCoopRequest.requesting_user_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_requesting_user_name(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SendChickenRunCoopRequest)
  return target;
}

size_t SendChickenRunCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SendChickenRunCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string player_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_identifier());
    }

    // optional string requesting_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_id());
    }

    // optional string requesting_user_name = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_name());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint64 farm_pop = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_farm_pop());
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendChickenRunCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SendChickenRunCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendChickenRunCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendChickenRunCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SendChickenRunCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SendChickenRunCoopRequest)
    MergeFrom(*source);
  }
}

void SendChickenRunCoopRequest::MergeFrom(const SendChickenRunCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SendChickenRunCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_player_identifier(from._internal_player_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_requesting_user_id(from._internal_requesting_user_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_requesting_user_name(from._internal_requesting_user_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      farm_pop_ = from.farm_pop_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendChickenRunCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SendChickenRunCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendChickenRunCoopRequest::CopyFrom(const SendChickenRunCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SendChickenRunCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChickenRunCoopRequest::IsInitialized() const {
  return true;
}

void SendChickenRunCoopRequest::InternalSwap(SendChickenRunCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_identifier_.Swap(&other->player_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_id_.Swap(&other->requesting_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_name_.Swap(&other->requesting_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendChickenRunCoopRequest, client_version_)
      + sizeof(SendChickenRunCoopRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(SendChickenRunCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChickenRunCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportPlayerCoopRequest::InitAsDefaultInstance() {
  ::ei::_ReportPlayerCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ReportPlayerCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportPlayerCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ReportPlayerCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ei::BasicRequestInfo&
ReportPlayerCoopRequest::_Internal::rinfo(const ReportPlayerCoopRequest* msg) {
  return *msg->rinfo_;
}
ReportPlayerCoopRequest::ReportPlayerCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ReportPlayerCoopRequest)
}
ReportPlayerCoopRequest::ReportPlayerCoopRequest(const ReportPlayerCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:ei.ReportPlayerCoopRequest)
}

void ReportPlayerCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportPlayerCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(reason_));
}

ReportPlayerCoopRequest::~ReportPlayerCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.ReportPlayerCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportPlayerCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void ReportPlayerCoopRequest::ArenaDtor(void* object) {
  ReportPlayerCoopRequest* _this = reinterpret_cast< ReportPlayerCoopRequest* >(object);
  (void)_this;
}
void ReportPlayerCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportPlayerCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportPlayerCoopRequest& ReportPlayerCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportPlayerCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ReportPlayerCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ReportPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  reason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportPlayerCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contract_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ReportPlayerCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ReportPlayerCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ReportPlayerCoopRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ReportPlayerCoopRequest.Reason reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ReportPlayerCoopRequest_Reason_IsValid(val))) {
            _internal_set_reason(static_cast<::ei::ReportPlayerCoopRequest_Reason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportPlayerCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ReportPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // optional string contract_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ReportPlayerCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ReportPlayerCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coop_identifier(), target);
  }

  // optional string user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ReportPlayerCoopRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // optional .ei.ReportPlayerCoopRequest.Reason reason = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ReportPlayerCoopRequest)
  return target;
}

size_t ReportPlayerCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ReportPlayerCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string contract_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string user_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.ReportPlayerCoopRequest.Reason reason = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportPlayerCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ReportPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportPlayerCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportPlayerCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ReportPlayerCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ReportPlayerCoopRequest)
    MergeFrom(*source);
  }
}

void ReportPlayerCoopRequest::MergeFrom(const ReportPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ReportPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportPlayerCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ReportPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPlayerCoopRequest::CopyFrom(const ReportPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ReportPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPlayerCoopRequest::IsInitialized() const {
  return true;
}

void ReportPlayerCoopRequest::InternalSwap(ReportPlayerCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportPlayerCoopRequest, reason_)
      + sizeof(ReportPlayerCoopRequest::reason_)
      - PROTOBUF_FIELD_OFFSET(ReportPlayerCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportPlayerCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickPlayerCoopRequest::InitAsDefaultInstance() {
  ::ei::_KickPlayerCoopRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class KickPlayerCoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<KickPlayerCoopRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const KickPlayerCoopRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requesting_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::BasicRequestInfo&
KickPlayerCoopRequest::_Internal::rinfo(const KickPlayerCoopRequest* msg) {
  return *msg->rinfo_;
}
KickPlayerCoopRequest::KickPlayerCoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.KickPlayerCoopRequest)
}
KickPlayerCoopRequest::KickPlayerCoopRequest(const KickPlayerCoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_identifier()) {
    player_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_identifier(),
      GetArena());
  }
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_user_id()) {
    requesting_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requesting_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:ei.KickPlayerCoopRequest)
}

void KickPlayerCoopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickPlayerCoopRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(reason_));
}

KickPlayerCoopRequest::~KickPlayerCoopRequest() {
  // @@protoc_insertion_point(destructor:ei.KickPlayerCoopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickPlayerCoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesting_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void KickPlayerCoopRequest::ArenaDtor(void* object) {
  KickPlayerCoopRequest* _this = reinterpret_cast< KickPlayerCoopRequest* >(object);
  (void)_this;
}
void KickPlayerCoopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickPlayerCoopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPlayerCoopRequest& KickPlayerCoopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickPlayerCoopRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void KickPlayerCoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.KickPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      player_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      requesting_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPlayerCoopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contract_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.KickPlayerCoopRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.KickPlayerCoopRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.KickPlayerCoopRequest.player_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.KickPlayerCoopRequest.requesting_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.KickPlayerCoopRequest.Reason reason = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::KickPlayerCoopRequest_Reason_IsValid(val))) {
            _internal_set_reason(static_cast<::ei::KickPlayerCoopRequest_Reason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickPlayerCoopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.KickPlayerCoopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contract_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.KickPlayerCoopRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.KickPlayerCoopRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coop_identifier(), target);
  }

  // optional string player_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_identifier().data(), static_cast<int>(this->_internal_player_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.KickPlayerCoopRequest.player_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_identifier(), target);
  }

  // optional string requesting_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.KickPlayerCoopRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_requesting_user_id(), target);
  }

  // optional uint32 client_version = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  // optional .ei.KickPlayerCoopRequest.Reason reason = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.KickPlayerCoopRequest)
  return target;
}

size_t KickPlayerCoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.KickPlayerCoopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string contract_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string player_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_identifier());
    }

    // optional string requesting_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requesting_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional .ei.KickPlayerCoopRequest.Reason reason = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPlayerCoopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.KickPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KickPlayerCoopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickPlayerCoopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.KickPlayerCoopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.KickPlayerCoopRequest)
    MergeFrom(*source);
  }
}

void KickPlayerCoopRequest::MergeFrom(const KickPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.KickPlayerCoopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_player_identifier(from._internal_player_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_requesting_user_id(from._internal_requesting_user_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickPlayerCoopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.KickPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerCoopRequest::CopyFrom(const KickPlayerCoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.KickPlayerCoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerCoopRequest::IsInitialized() const {
  return true;
}

void KickPlayerCoopRequest::InternalSwap(KickPlayerCoopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_identifier_.Swap(&other->player_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requesting_user_id_.Swap(&other->requesting_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickPlayerCoopRequest, reason_)
      + sizeof(KickPlayerCoopRequest::reason_)
      - PROTOBUF_FIELD_OFFSET(KickPlayerCoopRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayerCoopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusUpdateRequest::InitAsDefaultInstance() {
  ::ei::_ContractCoopStatusUpdateRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_ContractCoopStatusUpdateRequest_default_instance_._instance.get_mutable()->production_params_ = const_cast< ::ei::FarmProductionParams*>(
      ::ei::FarmProductionParams::internal_default_instance());
  ::ei::_ContractCoopStatusUpdateRequest_default_instance_._instance.get_mutable()->farm_info_ = const_cast< ::ei::PlayerFarmInfo*>(
      ::ei::PlayerFarmInfo::internal_default_instance());
}
class ContractCoopStatusUpdateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusUpdateRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ContractCoopStatusUpdateRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coop_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_push_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_cheats_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_boost_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_boost_tokens_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_hide_cc_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::ei::FarmProductionParams& production_params(const ContractCoopStatusUpdateRequest* msg);
  static void set_has_production_params(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ei::PlayerFarmInfo& farm_info(const ContractCoopStatusUpdateRequest* msg);
  static void set_has_farm_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_egg_laying_rate_buff(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_earnings_buff(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::ei::BasicRequestInfo&
ContractCoopStatusUpdateRequest::_Internal::rinfo(const ContractCoopStatusUpdateRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::FarmProductionParams&
ContractCoopStatusUpdateRequest::_Internal::production_params(const ContractCoopStatusUpdateRequest* msg) {
  return *msg->production_params_;
}
const ::ei::PlayerFarmInfo&
ContractCoopStatusUpdateRequest::_Internal::farm_info(const ContractCoopStatusUpdateRequest* msg) {
  return *msg->farm_info_;
}
ContractCoopStatusUpdateRequest::ContractCoopStatusUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusUpdateRequest)
}
ContractCoopStatusUpdateRequest::ContractCoopStatusUpdateRequest(const ContractCoopStatusUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_identifier()) {
    coop_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_identifier(),
      GetArena());
  }
  push_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_push_user_id()) {
    push_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_push_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  if (from._internal_has_production_params()) {
    production_params_ = new ::ei::FarmProductionParams(*from.production_params_);
  } else {
    production_params_ = nullptr;
  }
  if (from._internal_has_farm_info()) {
    farm_info_ = new ::ei::PlayerFarmInfo(*from.farm_info_);
  } else {
    farm_info_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnings_buff_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(earnings_buff_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusUpdateRequest)
}

void ContractCoopStatusUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractCoopStatusUpdateRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_cc_status_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(hide_cc_status_));
  egg_laying_rate_buff_ = 1;
  earnings_buff_ = 1;
}

ContractCoopStatusUpdateRequest::~ContractCoopStatusUpdateRequest() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
  if (this != internal_default_instance()) delete production_params_;
  if (this != internal_default_instance()) delete farm_info_;
}

void ContractCoopStatusUpdateRequest::ArenaDtor(void* object) {
  ContractCoopStatusUpdateRequest* _this = reinterpret_cast< ContractCoopStatusUpdateRequest* >(object);
  (void)_this;
}
void ContractCoopStatusUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusUpdateRequest& ContractCoopStatusUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusUpdateRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      coop_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      push_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(production_params_ != nullptr);
      production_params_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(farm_info_ != nullptr);
      farm_info_->Clear();
    }
  }
  amount_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_cc_status_) -
        reinterpret_cast<char*>(&rate_)) + sizeof(hide_cc_status_));
    egg_laying_rate_buff_ = 1;
  }
  earnings_buff_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusUpdateRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contract_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusUpdateRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_coop_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusUpdateRequest.coop_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_cheats_detected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_cheats_detected(&has_bits);
          time_cheats_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_soul_power(&has_bits);
          soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string push_user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_push_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractCoopStatusUpdateRequest.push_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_boost_tokens(&has_bits);
          boost_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double egg_laying_rate_buff = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_egg_laying_rate_buff(&has_bits);
          egg_laying_rate_buff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double earnings_buff = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_earnings_buff(&has_bits);
          earnings_buff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boost_tokens_spent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_boost_tokens_spent(&has_bits);
          boost_tokens_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.FarmProductionParams production_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_production_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_eop(&has_bits);
          eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.PlayerFarmInfo farm_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_cc_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_hide_cc_status(&has_bits);
          hide_cc_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusUpdateRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string contract_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusUpdateRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_identifier(), target);
  }

  // optional string coop_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_identifier().data(), static_cast<int>(this->_internal_coop_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusUpdateRequest.coop_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coop_identifier(), target);
  }

  // optional double amount = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_amount(), target);
  }

  // optional double rate = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rate(), target);
  }

  // optional uint32 time_cheats_detected = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_cheats_detected(), target);
  }

  // optional double soul_power = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_soul_power(), target);
  }

  // optional string push_user_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_push_user_id().data(), static_cast<int>(this->_internal_push_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractCoopStatusUpdateRequest.push_user_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_push_user_id(), target);
  }

  // optional uint32 boost_tokens = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_boost_tokens(), target);
  }

  // optional double egg_laying_rate_buff = 10 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_egg_laying_rate_buff(), target);
  }

  // optional double earnings_buff = 11 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_earnings_buff(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rinfo(this), target, stream);
  }

  // optional uint32 boost_tokens_spent = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_boost_tokens_spent(), target);
  }

  // optional .ei.FarmProductionParams production_params = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::production_params(this), target, stream);
  }

  // optional uint32 eop = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_eop(), target);
  }

  // optional .ei.PlayerFarmInfo farm_info = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::farm_info(this), target, stream);
  }

  // optional bool hide_cc_status = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_hide_cc_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusUpdateRequest)
  return target;
}

size_t ContractCoopStatusUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string contract_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional string coop_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_identifier());
    }

    // optional string push_user_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_push_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.FarmProductionParams production_params = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *production_params_);
    }

    // optional .ei.PlayerFarmInfo farm_info = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *farm_info_);
    }

    // optional double amount = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double rate = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double soul_power = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_cheats_detected = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_cheats_detected());
    }

    // optional uint32 boost_tokens = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens());
    }

    // optional uint32 boost_tokens_spent = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boost_tokens_spent());
    }

    // optional uint32 eop = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eop());
    }

    // optional bool hide_cc_status = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional double egg_laying_rate_buff = 10 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  // optional double earnings_buff = 11 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusUpdateRequest)
    MergeFrom(*source);
  }
}

void ContractCoopStatusUpdateRequest::MergeFrom(const ContractCoopStatusUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_coop_identifier(from._internal_coop_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_push_user_id(from._internal_push_user_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_production_params()->::ei::FarmProductionParams::MergeFrom(from._internal_production_params());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_farm_info()->::ei::PlayerFarmInfo::MergeFrom(from._internal_farm_info());
    }
    if (cached_has_bits & 0x00000080u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      soul_power_ = from.soul_power_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_cheats_detected_ = from.time_cheats_detected_;
    }
    if (cached_has_bits & 0x00000800u) {
      boost_tokens_ = from.boost_tokens_;
    }
    if (cached_has_bits & 0x00001000u) {
      boost_tokens_spent_ = from.boost_tokens_spent_;
    }
    if (cached_has_bits & 0x00002000u) {
      eop_ = from.eop_;
    }
    if (cached_has_bits & 0x00004000u) {
      hide_cc_status_ = from.hide_cc_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      egg_laying_rate_buff_ = from.egg_laying_rate_buff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_earnings_buff(from._internal_earnings_buff());
  }
}

void ContractCoopStatusUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusUpdateRequest::CopyFrom(const ContractCoopStatusUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusUpdateRequest::IsInitialized() const {
  return true;
}

void ContractCoopStatusUpdateRequest::InternalSwap(ContractCoopStatusUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_identifier_.Swap(&other->coop_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  push_user_id_.Swap(&other->push_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCoopStatusUpdateRequest, hide_cc_status_)
      + sizeof(ContractCoopStatusUpdateRequest::hide_cc_status_)
      - PROTOBUF_FIELD_OFFSET(ContractCoopStatusUpdateRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
  swap(egg_laying_rate_buff_, other->egg_laying_rate_buff_);
  swap(earnings_buff_, other->earnings_buff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractCoopStatusUpdateResponse::InitAsDefaultInstance() {
}
class ContractCoopStatusUpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractCoopStatusUpdateResponse>()._has_bits_);
  static void set_has_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractCoopStatusUpdateResponse::ContractCoopStatusUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractCoopStatusUpdateResponse)
}
ContractCoopStatusUpdateResponse::ContractCoopStatusUpdateResponse(const ContractCoopStatusUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&finalized_, &from.finalized_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&finalized_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractCoopStatusUpdateResponse)
}

void ContractCoopStatusUpdateResponse::SharedCtor() {
  ::memset(&finalized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&finalized_)) + sizeof(status_));
}

ContractCoopStatusUpdateResponse::~ContractCoopStatusUpdateResponse() {
  // @@protoc_insertion_point(destructor:ei.ContractCoopStatusUpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractCoopStatusUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractCoopStatusUpdateResponse::ArenaDtor(void* object) {
  ContractCoopStatusUpdateResponse* _this = reinterpret_cast< ContractCoopStatusUpdateResponse* >(object);
  (void)_this;
}
void ContractCoopStatusUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractCoopStatusUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractCoopStatusUpdateResponse& ContractCoopStatusUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractCoopStatusUpdateResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractCoopStatusUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractCoopStatusUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&finalized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&finalized_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractCoopStatusUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool finalized = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_finalized(&has_bits);
          finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exists(&has_bits);
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractCoopStatusResponse.MemberStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ContractCoopStatusResponse_MemberStatus_IsValid(val))) {
            _internal_set_status(static_cast<::ei::ContractCoopStatusResponse_MemberStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractCoopStatusUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractCoopStatusUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool finalized = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_finalized(), target);
  }

  // optional bool exists = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exists(), target);
  }

  // optional .ei.ContractCoopStatusResponse.MemberStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractCoopStatusUpdateResponse)
  return target;
}

size_t ContractCoopStatusUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractCoopStatusUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool finalized = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool exists = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .ei.ContractCoopStatusResponse.MemberStatus status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractCoopStatusUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractCoopStatusUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractCoopStatusUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractCoopStatusUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractCoopStatusUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractCoopStatusUpdateResponse)
    MergeFrom(*source);
  }
}

void ContractCoopStatusUpdateResponse::MergeFrom(const ContractCoopStatusUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractCoopStatusUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      finalized_ = from.finalized_;
    }
    if (cached_has_bits & 0x00000002u) {
      exists_ = from.exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractCoopStatusUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractCoopStatusUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractCoopStatusUpdateResponse::CopyFrom(const ContractCoopStatusUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractCoopStatusUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractCoopStatusUpdateResponse::IsInitialized() const {
  return true;
}

void ContractCoopStatusUpdateResponse::InternalSwap(ContractCoopStatusUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractCoopStatusUpdateResponse, status_)
      + sizeof(ContractCoopStatusUpdateResponse::status_)
      - PROTOBUF_FIELD_OFFSET(ContractCoopStatusUpdateResponse, finalized_)>(
          reinterpret_cast<char*>(&finalized_),
          reinterpret_cast<char*>(&other->finalized_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractCoopStatusUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopBuffState::InitAsDefaultInstance() {
}
class CoopBuffState::_Internal {
 public:
  using HasBits = decltype(std::declval<CoopBuffState>()._has_bits_);
  static void set_has_egg_laying_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CoopBuffState::CoopBuffState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopBuffState)
}
CoopBuffState::CoopBuffState(const CoopBuffState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(earnings_));
  // @@protoc_insertion_point(copy_constructor:ei.CoopBuffState)
}

void CoopBuffState::SharedCtor() {
  server_timestamp_ = 0;
  egg_laying_rate_ = 1;
  earnings_ = 1;
}

CoopBuffState::~CoopBuffState() {
  // @@protoc_insertion_point(destructor:ei.CoopBuffState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopBuffState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoopBuffState::ArenaDtor(void* object) {
  CoopBuffState* _this = reinterpret_cast< CoopBuffState* >(object);
  (void)_this;
}
void CoopBuffState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopBuffState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopBuffState& CoopBuffState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopBuffState_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopBuffState::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopBuffState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    server_timestamp_ = 0;
    egg_laying_rate_ = 1;
    earnings_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopBuffState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double egg_laying_rate = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_egg_laying_rate(&has_bits);
          egg_laying_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double earnings = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double server_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopBuffState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopBuffState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double egg_laying_rate = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_egg_laying_rate(), target);
  }

  // optional double earnings = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_earnings(), target);
  }

  // optional double server_timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_server_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopBuffState)
  return target;
}

size_t CoopBuffState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopBuffState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double server_timestamp = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double egg_laying_rate = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double earnings = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopBuffState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopBuffState)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopBuffState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopBuffState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopBuffState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopBuffState)
    MergeFrom(*source);
  }
}

void CoopBuffState::MergeFrom(const CoopBuffState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopBuffState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_laying_rate_ = from.egg_laying_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      earnings_ = from.earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CoopBuffState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopBuffState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopBuffState::CopyFrom(const CoopBuffState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopBuffState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopBuffState::IsInitialized() const {
  return true;
}

void CoopBuffState::InternalSwap(CoopBuffState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_timestamp_, other->server_timestamp_);
  swap(egg_laying_rate_, other->egg_laying_rate_);
  swap(earnings_, other->earnings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopBuffState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopBuffHistory::InitAsDefaultInstance() {
}
class CoopBuffHistory::_Internal {
 public:
};

CoopBuffHistory::CoopBuffHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopBuffHistory)
}
CoopBuffHistory::CoopBuffHistory(const CoopBuffHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.CoopBuffHistory)
}

void CoopBuffHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoopBuffHistory_ei_2eproto.base);
}

CoopBuffHistory::~CoopBuffHistory() {
  // @@protoc_insertion_point(destructor:ei.CoopBuffHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopBuffHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoopBuffHistory::ArenaDtor(void* object) {
  CoopBuffHistory* _this = reinterpret_cast< CoopBuffHistory* >(object);
  (void)_this;
}
void CoopBuffHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopBuffHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopBuffHistory& CoopBuffHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopBuffHistory_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopBuffHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopBuffHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopBuffHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.CoopBuffState history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopBuffHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopBuffHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.CoopBuffState history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopBuffHistory)
  return target;
}

size_t CoopBuffHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopBuffHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CoopBuffState history = 1;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopBuffHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopBuffHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopBuffHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopBuffHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopBuffHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopBuffHistory)
    MergeFrom(*source);
  }
}

void CoopBuffHistory::MergeFrom(const CoopBuffHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopBuffHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
}

void CoopBuffHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopBuffHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopBuffHistory::CopyFrom(const CoopBuffHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopBuffHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopBuffHistory::IsInitialized() const {
  return true;
}

void CoopBuffHistory::InternalSwap(CoopBuffHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  history_.InternalSwap(&other->history_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopBuffHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopChickenRunEntry::InitAsDefaultInstance() {
}
class CoopChickenRunEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CoopChickenRunEntry>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CoopChickenRunEntry::CoopChickenRunEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopChickenRunEntry)
}
CoopChickenRunEntry::CoopChickenRunEntry(const CoopChickenRunEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  server_timestamp_ = from.server_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ei.CoopChickenRunEntry)
}

void CoopChickenRunEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoopChickenRunEntry_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_timestamp_ = 0;
}

CoopChickenRunEntry::~CoopChickenRunEntry() {
  // @@protoc_insertion_point(destructor:ei.CoopChickenRunEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopChickenRunEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoopChickenRunEntry::ArenaDtor(void* object) {
  CoopChickenRunEntry* _this = reinterpret_cast< CoopChickenRunEntry* >(object);
  (void)_this;
}
void CoopChickenRunEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopChickenRunEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopChickenRunEntry& CoopChickenRunEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopChickenRunEntry_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopChickenRunEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopChickenRunEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmpty();
  }
  server_timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopChickenRunEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CoopChickenRunEntry.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopChickenRunEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopChickenRunEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CoopChickenRunEntry.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional double server_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_server_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopChickenRunEntry)
  return target;
}

size_t CoopChickenRunEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopChickenRunEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional double server_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopChickenRunEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopChickenRunEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopChickenRunEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopChickenRunEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopChickenRunEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopChickenRunEntry)
    MergeFrom(*source);
  }
}

void CoopChickenRunEntry::MergeFrom(const CoopChickenRunEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopChickenRunEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      server_timestamp_ = from.server_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CoopChickenRunEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopChickenRunEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopChickenRunEntry::CopyFrom(const CoopChickenRunEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopChickenRunEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopChickenRunEntry::IsInitialized() const {
  return true;
}

void CoopChickenRunEntry::InternalSwap(CoopChickenRunEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(server_timestamp_, other->server_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopChickenRunEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoopLastChickenRunTimes::InitAsDefaultInstance() {
}
class CoopLastChickenRunTimes::_Internal {
 public:
};

CoopLastChickenRunTimes::CoopLastChickenRunTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CoopLastChickenRunTimes)
}
CoopLastChickenRunTimes::CoopLastChickenRunTimes(const CoopLastChickenRunTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.CoopLastChickenRunTimes)
}

void CoopLastChickenRunTimes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoopLastChickenRunTimes_ei_2eproto.base);
}

CoopLastChickenRunTimes::~CoopLastChickenRunTimes() {
  // @@protoc_insertion_point(destructor:ei.CoopLastChickenRunTimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoopLastChickenRunTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoopLastChickenRunTimes::ArenaDtor(void* object) {
  CoopLastChickenRunTimes* _this = reinterpret_cast< CoopLastChickenRunTimes* >(object);
  (void)_this;
}
void CoopLastChickenRunTimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoopLastChickenRunTimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoopLastChickenRunTimes& CoopLastChickenRunTimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoopLastChickenRunTimes_ei_2eproto.base);
  return *internal_default_instance();
}


void CoopLastChickenRunTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CoopLastChickenRunTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoopLastChickenRunTimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.CoopChickenRunEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoopLastChickenRunTimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CoopLastChickenRunTimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.CoopChickenRunEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CoopLastChickenRunTimes)
  return target;
}

size_t CoopLastChickenRunTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CoopLastChickenRunTimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CoopChickenRunEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoopLastChickenRunTimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CoopLastChickenRunTimes)
  GOOGLE_DCHECK_NE(&from, this);
  const CoopLastChickenRunTimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoopLastChickenRunTimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CoopLastChickenRunTimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CoopLastChickenRunTimes)
    MergeFrom(*source);
  }
}

void CoopLastChickenRunTimes::MergeFrom(const CoopLastChickenRunTimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CoopLastChickenRunTimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CoopLastChickenRunTimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CoopLastChickenRunTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopLastChickenRunTimes::CopyFrom(const CoopLastChickenRunTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CoopLastChickenRunTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopLastChickenRunTimes::IsInitialized() const {
  return true;
}

void CoopLastChickenRunTimes::InternalSwap(CoopLastChickenRunTimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoopLastChickenRunTimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardAnalysis_Chunk::InitAsDefaultInstance() {
}
class LeaderboardAnalysis_Chunk::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardAnalysis_Chunk>()._has_bits_);
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_high_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_low_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LeaderboardAnalysis_Chunk::LeaderboardAnalysis_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardAnalysis.Chunk)
}
LeaderboardAnalysis_Chunk::LeaderboardAnalysis_Chunk(const LeaderboardAnalysis_Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_cursor()) {
    start_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_cursor(),
      GetArena());
  }
  end_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_cursor()) {
    end_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_cursor(),
      GetArena());
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_score_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(low_score_));
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardAnalysis.Chunk)
}

void LeaderboardAnalysis_Chunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardAnalysis_Chunk_ei_2eproto.base);
  start_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_score_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(low_score_));
}

LeaderboardAnalysis_Chunk::~LeaderboardAnalysis_Chunk() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardAnalysis.Chunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardAnalysis_Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardAnalysis_Chunk::ArenaDtor(void* object) {
  LeaderboardAnalysis_Chunk* _this = reinterpret_cast< LeaderboardAnalysis_Chunk* >(object);
  (void)_this;
}
void LeaderboardAnalysis_Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardAnalysis_Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardAnalysis_Chunk& LeaderboardAnalysis_Chunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardAnalysis_Chunk_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardAnalysis_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardAnalysis.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_cursor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      end_cursor_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_score_) -
        reinterpret_cast<char*>(&start_index_)) + sizeof(low_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardAnalysis_Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_index(&has_bits);
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double high_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_high_score(&has_bits);
          high_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_low_score(&has_bits);
          low_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string start_cursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_start_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardAnalysis.Chunk.start_cursor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string end_cursor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_end_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardAnalysis.Chunk.end_cursor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardAnalysis_Chunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardAnalysis.Chunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // optional uint32 end_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_index(), target);
  }

  // optional double high_score = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high_score(), target);
  }

  // optional double low_score = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_low_score(), target);
  }

  // optional string start_cursor = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_cursor().data(), static_cast<int>(this->_internal_start_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardAnalysis.Chunk.start_cursor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_start_cursor(), target);
  }

  // optional string end_cursor = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_cursor().data(), static_cast<int>(this->_internal_end_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardAnalysis.Chunk.end_cursor");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_end_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardAnalysis.Chunk)
  return target;
}

size_t LeaderboardAnalysis_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardAnalysis.Chunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string start_cursor = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_cursor());
    }

    // optional string end_cursor = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_cursor());
    }

    // optional uint32 start_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_index());
    }

    // optional uint32 end_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_index());
    }

    // optional double high_score = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double low_score = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardAnalysis_Chunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardAnalysis.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardAnalysis_Chunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardAnalysis_Chunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardAnalysis.Chunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardAnalysis.Chunk)
    MergeFrom(*source);
  }
}

void LeaderboardAnalysis_Chunk::MergeFrom(const LeaderboardAnalysis_Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardAnalysis.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_start_cursor(from._internal_start_cursor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_end_cursor(from._internal_end_cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      start_index_ = from.start_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_index_ = from.end_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      high_score_ = from.high_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_score_ = from.low_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderboardAnalysis_Chunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardAnalysis.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardAnalysis_Chunk::CopyFrom(const LeaderboardAnalysis_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardAnalysis.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardAnalysis_Chunk::IsInitialized() const {
  return true;
}

void LeaderboardAnalysis_Chunk::InternalSwap(LeaderboardAnalysis_Chunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_cursor_.Swap(&other->start_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_cursor_.Swap(&other->end_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardAnalysis_Chunk, low_score_)
      + sizeof(LeaderboardAnalysis_Chunk::low_score_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardAnalysis_Chunk, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardAnalysis_Chunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardAnalysis::InitAsDefaultInstance() {
}
class LeaderboardAnalysis::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardAnalysis>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_high_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_low_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaderboardAnalysis::LeaderboardAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardAnalysis)
}
LeaderboardAnalysis::LeaderboardAnalysis(const LeaderboardAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cursor()) {
    cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
      GetArena());
  }
  ::memcpy(&high_score_, &from.high_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&high_score_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardAnalysis)
}

void LeaderboardAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardAnalysis_ei_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&high_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&high_score_)) + sizeof(count_));
}

LeaderboardAnalysis::~LeaderboardAnalysis() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardAnalysis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardAnalysis::ArenaDtor(void* object) {
  LeaderboardAnalysis* _this = reinterpret_cast< LeaderboardAnalysis* >(object);
  (void)_this;
}
void LeaderboardAnalysis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardAnalysis& LeaderboardAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardAnalysis_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cursor_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&high_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&high_score_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double high_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_high_score(&has_bits);
          high_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_low_score(&has_bits);
          low_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string cursor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardAnalysis.cursor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardAnalysis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chunks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional double high_score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high_score(), target);
  }

  // optional double low_score = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_low_score(), target);
  }

  // optional string cursor = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardAnalysis.cursor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardAnalysis)
  return target;
}

size_t LeaderboardAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardAnalysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cursor = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cursor());
    }

    // optional double high_score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double low_score = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardAnalysis)
    MergeFrom(*source);
  }
}

void LeaderboardAnalysis::MergeFrom(const LeaderboardAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cursor(from._internal_cursor());
    }
    if (cached_has_bits & 0x00000002u) {
      high_score_ = from.high_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_score_ = from.low_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderboardAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardAnalysis::CopyFrom(const LeaderboardAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardAnalysis::IsInitialized() const {
  return true;
}

void LeaderboardAnalysis::InternalSwap(LeaderboardAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_.InternalSwap(&other->chunks_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardAnalysis, count_)
      + sizeof(LeaderboardAnalysis::count_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardAnalysis, high_score_)>(
          reinterpret_cast<char*>(&high_score_),
          reinterpret_cast<char*>(&other->high_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardInfo_Season::InitAsDefaultInstance() {
}
class LeaderboardInfo_Season::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardInfo_Season>()._has_bits_);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LeaderboardInfo_Season::LeaderboardInfo_Season(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardInfo.Season)
}
LeaderboardInfo_Season::LeaderboardInfo_Season(const LeaderboardInfo_Season& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scope()) {
    scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scope(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardInfo.Season)
}

void LeaderboardInfo_Season::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardInfo_Season_ei_2eproto.base);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaderboardInfo_Season::~LeaderboardInfo_Season() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardInfo.Season)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardInfo_Season::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardInfo_Season::ArenaDtor(void* object) {
  LeaderboardInfo_Season* _this = reinterpret_cast< LeaderboardInfo_Season* >(object);
  (void)_this;
}
void LeaderboardInfo_Season::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardInfo_Season::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardInfo_Season& LeaderboardInfo_Season::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardInfo_Season_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardInfo_Season::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardInfo.Season)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardInfo_Season::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardInfo.Season.scope");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardInfo.Season.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardInfo_Season::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardInfo.Season)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardInfo.Season.scope");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scope(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardInfo.Season.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardInfo.Season)
  return target;
}

size_t LeaderboardInfo_Season::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardInfo.Season)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardInfo_Season::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardInfo.Season)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardInfo_Season* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardInfo_Season>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardInfo.Season)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardInfo.Season)
    MergeFrom(*source);
  }
}

void LeaderboardInfo_Season::MergeFrom(const LeaderboardInfo_Season& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardInfo.Season)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void LeaderboardInfo_Season::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardInfo.Season)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardInfo_Season::CopyFrom(const LeaderboardInfo_Season& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardInfo.Season)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardInfo_Season::IsInitialized() const {
  return true;
}

void LeaderboardInfo_Season::InternalSwap(LeaderboardInfo_Season* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardInfo_Season::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardInfo::InitAsDefaultInstance() {
}
class LeaderboardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardInfo>()._has_bits_);
  static void set_has_all_time_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaderboardInfo::LeaderboardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seasons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardInfo)
}
LeaderboardInfo::LeaderboardInfo(const LeaderboardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      seasons_(from.seasons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_time_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_all_time_scope()) {
    all_time_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_all_time_scope(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardInfo)
}

void LeaderboardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardInfo_ei_2eproto.base);
  all_time_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LeaderboardInfo::~LeaderboardInfo() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  all_time_scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardInfo::ArenaDtor(void* object) {
  LeaderboardInfo* _this = reinterpret_cast< LeaderboardInfo* >(object);
  (void)_this;
}
void LeaderboardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardInfo& LeaderboardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seasons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    all_time_scope_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.LeaderboardInfo.Season seasons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seasons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string all_time_scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_all_time_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardInfo.all_time_scope");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.LeaderboardInfo.Season seasons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seasons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seasons(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string all_time_scope = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_all_time_scope().data(), static_cast<int>(this->_internal_all_time_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardInfo.all_time_scope");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_all_time_scope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardInfo)
  return target;
}

size_t LeaderboardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LeaderboardInfo.Season seasons = 1;
  total_size += 1UL * this->_internal_seasons_size();
  for (const auto& msg : this->seasons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string all_time_scope = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_all_time_scope());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardInfo)
    MergeFrom(*source);
  }
}

void LeaderboardInfo::MergeFrom(const LeaderboardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seasons_.MergeFrom(from.seasons_);
  if (from._internal_has_all_time_scope()) {
    _internal_set_all_time_scope(from._internal_all_time_scope());
  }
}

void LeaderboardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardInfo::CopyFrom(const LeaderboardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardInfo::IsInitialized() const {
  return true;
}

void LeaderboardInfo::InternalSwap(LeaderboardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  seasons_.InternalSwap(&other->seasons_);
  all_time_scope_.Swap(&other->all_time_scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardRequest::InitAsDefaultInstance() {
  ::ei::_LeaderboardRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class LeaderboardRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const LeaderboardRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::BasicRequestInfo&
LeaderboardRequest::_Internal::rinfo(const LeaderboardRequest* msg) {
  return *msg->rinfo_;
}
LeaderboardRequest::LeaderboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardRequest)
}
LeaderboardRequest::LeaderboardRequest(const LeaderboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scope()) {
    scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scope(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  grade_ = from.grade_;
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardRequest)
}

void LeaderboardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardRequest_ei_2eproto.base);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(grade_));
}

LeaderboardRequest::~LeaderboardRequest() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void LeaderboardRequest::ArenaDtor(void* object) {
  LeaderboardRequest* _this = reinterpret_cast< LeaderboardRequest* >(object);
  (void)_this;
}
void LeaderboardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardRequest& LeaderboardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  grade_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardRequest.scope");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // optional string scope = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardRequest.scope");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scope(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardRequest)
  return target;
}

size_t LeaderboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string scope = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional .ei.BasicRequestInfo rinfo = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.Contract.PlayerGrade grade = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardRequest)
    MergeFrom(*source);
  }
}

void LeaderboardRequest::MergeFrom(const LeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderboardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardRequest::CopyFrom(const LeaderboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardRequest::IsInitialized() const {
  return true;
}

void LeaderboardRequest::InternalSwap(LeaderboardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardRequest, grade_)
      + sizeof(LeaderboardRequest::grade_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardResponse_Entry::InitAsDefaultInstance() {
}
class LeaderboardResponse_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardResponse_Entry>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LeaderboardResponse_Entry::LeaderboardResponse_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardResponse.Entry)
}
LeaderboardResponse_Entry::LeaderboardResponse_Entry(const LeaderboardResponse_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_alias()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardResponse.Entry)
}

void LeaderboardResponse_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardResponse_Entry_ei_2eproto.base);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&score_)) + sizeof(rank_));
}

LeaderboardResponse_Entry::~LeaderboardResponse_Entry() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardResponse.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardResponse_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardResponse_Entry::ArenaDtor(void* object) {
  LeaderboardResponse_Entry* _this = reinterpret_cast< LeaderboardResponse_Entry* >(object);
  (void)_this;
}
void LeaderboardResponse_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardResponse_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardResponse_Entry& LeaderboardResponse_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardResponse_Entry_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardResponse_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    alias_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&score_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardResponse_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardResponse.Entry.alias");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardResponse_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardResponse.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rank(), target);
  }

  // optional string alias = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardResponse.Entry.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  // optional double score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardResponse.Entry)
  return target;
}

size_t LeaderboardResponse_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardResponse.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string alias = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alias());
    }

    // optional double score = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 rank = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardResponse_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardResponse_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardResponse_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardResponse.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardResponse.Entry)
    MergeFrom(*source);
  }
}

void LeaderboardResponse_Entry::MergeFrom(const LeaderboardResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardResponse.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_alias(from._internal_alias());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderboardResponse_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardResponse_Entry::CopyFrom(const LeaderboardResponse_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardResponse.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardResponse_Entry::IsInitialized() const {
  return true;
}

void LeaderboardResponse_Entry::InternalSwap(LeaderboardResponse_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardResponse_Entry, rank_)
      + sizeof(LeaderboardResponse_Entry::rank_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardResponse_Entry, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardResponse_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderboardResponse::InitAsDefaultInstance() {
}
class LeaderboardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderboardResponse>()._has_bits_);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LeaderboardResponse::LeaderboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LeaderboardResponse)
}
LeaderboardResponse::LeaderboardResponse(const LeaderboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      top_entries_(from.top_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scope()) {
    scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scope(),
      GetArena());
  }
  ::memcpy(&grade_, &from.grade_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&grade_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:ei.LeaderboardResponse)
}

void LeaderboardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardResponse_ei_2eproto.base);
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&grade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&grade_)) + sizeof(rank_));
}

LeaderboardResponse::~LeaderboardResponse() {
  // @@protoc_insertion_point(destructor:ei.LeaderboardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardResponse::ArenaDtor(void* object) {
  LeaderboardResponse* _this = reinterpret_cast< LeaderboardResponse* >(object);
  (void)_this;
}
void LeaderboardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderboardResponse& LeaderboardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void LeaderboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LeaderboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scope_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&grade_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderboardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LeaderboardResponse.scope");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ei.LeaderboardResponse.Entry top_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderboardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LeaderboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LeaderboardResponse.scope");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scope(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_grade(), target);
  }

  // repeated .ei.LeaderboardResponse.Entry top_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_top_entries(i), target, stream);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // optional uint32 rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank(), target);
  }

  // optional double score = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LeaderboardResponse)
  return target;
}

size_t LeaderboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LeaderboardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LeaderboardResponse.Entry top_entries = 3;
  total_size += 1UL * this->_internal_top_entries_size();
  for (const auto& msg : this->top_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional .ei.Contract.PlayerGrade grade = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

    // optional uint32 count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional double score = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 rank = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderboardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderboardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LeaderboardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LeaderboardResponse)
    MergeFrom(*source);
  }
}

void LeaderboardResponse::MergeFrom(const LeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_entries_.MergeFrom(from.top_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderboardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardResponse::CopyFrom(const LeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardResponse::IsInitialized() const {
  return true;
}

void LeaderboardResponse::InternalSwap(LeaderboardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  top_entries_.InternalSwap(&other->top_entries_);
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderboardResponse, rank_)
      + sizeof(LeaderboardResponse::rank_)
      - PROTOBUF_FIELD_OFFSET(LeaderboardResponse, grade_)>(
          reinterpret_cast<char*>(&grade_),
          reinterpret_cast<char*>(&other->grade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractsArchive::InitAsDefaultInstance() {
}
class ContractsArchive::_Internal {
 public:
};

ContractsArchive::ContractsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  archive_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractsArchive)
}
ContractsArchive::ContractsArchive(const ContractsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      archive_(from.archive_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ContractsArchive)
}

void ContractsArchive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractsArchive_ei_2eproto.base);
}

ContractsArchive::~ContractsArchive() {
  // @@protoc_insertion_point(destructor:ei.ContractsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ContractsArchive::ArenaDtor(void* object) {
  ContractsArchive* _this = reinterpret_cast< ContractsArchive* >(object);
  (void)_this;
}
void ContractsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractsArchive& ContractsArchive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractsArchive_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  archive_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.LocalContract archive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_archive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.LocalContract archive = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_archive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_archive(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractsArchive)
  return target;
}

size_t ContractsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LocalContract archive = 1;
  total_size += 1UL * this->_internal_archive_size();
  for (const auto& msg : this->archive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractsArchive)
    MergeFrom(*source);
  }
}

void ContractsArchive::MergeFrom(const ContractsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  archive_.MergeFrom(from.archive_);
}

void ContractsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractsArchive::CopyFrom(const ContractsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractsArchive::IsInitialized() const {
  return true;
}

void ContractsArchive::InternalSwap(ContractsArchive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  archive_.InternalSwap(&other->archive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractsArchive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractAction::InitAsDefaultInstance() {
}
class ContractAction::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractAction>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dest_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_autojoin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_points_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_reward_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reward_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reward_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_goal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_boost_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_kick_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_public_(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cc_only(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

ContractAction::ContractAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ContractAction)
}
ContractAction::ContractAction(const ContractAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  action_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_name()) {
    action_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_name(),
      GetArena());
  }
  dest_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dest_user_id()) {
    dest_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dest_user_id(),
      GetArena());
  }
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_id()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  coop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coop_id()) {
    coop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coop_id(),
      GetArena());
  }
  reward_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_subtype()) {
    reward_subtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_subtype(),
      GetArena());
  }
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_boost_id()) {
    boost_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boost_id(),
      GetArena());
  }
  ::memcpy(&approx_time_, &from.approx_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cc_only_) -
    reinterpret_cast<char*>(&approx_time_)) + sizeof(cc_only_));
  // @@protoc_insertion_point(copy_constructor:ei.ContractAction)
}

void ContractAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractAction_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&approx_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_only_) -
      reinterpret_cast<char*>(&approx_time_)) + sizeof(cc_only_));
}

ContractAction::~ContractAction() {
  // @@protoc_insertion_point(destructor:ei.ContractAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boost_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractAction::ArenaDtor(void* object) {
  ContractAction* _this = reinterpret_cast< ContractAction* >(object);
  (void)_this;
}
void ContractAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractAction& ContractAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractAction_ei_2eproto.base);
  return *internal_default_instance();
}


void ContractAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ContractAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      action_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dest_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      contract_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      coop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      reward_subtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      boost_id_.ClearNonDefaultToEmpty();
    }
  }
  approx_time_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&grade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_amount_) -
        reinterpret_cast<char*>(&grade_)) + sizeof(reward_amount_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&tokens_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cc_only_) -
        reinterpret_cast<char*>(&tokens_)) + sizeof(cc_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.action_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double approx_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string dest_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dest_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.dest_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contract_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.contract_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coop_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_coop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.coop_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool autojoin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_autojoin(&has_bits);
          autojoin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_grade(&has_bits);
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool replay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_replay(&has_bits);
          replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool points_replay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_points_replay(&has_bits);
          points_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reward_type(&has_bits);
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reward_subtype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_reward_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.reward_subtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reward_amount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_reward_amount(&has_bits);
          reward_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 goal_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_goal_index(&has_bits);
          goal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string boost_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_boost_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ContractAction.boost_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tokens = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tokens(&has_bits);
          tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kick_reason = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_kick_reason(&has_bits);
          kick_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool public = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_public_(&has_bits);
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cc_only = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_cc_only(&has_bits);
          cc_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ContractAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string action_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_name().data(), static_cast<int>(this->_internal_action_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.action_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_name(), target);
  }

  // optional double approx_time = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_approx_time(), target);
  }

  // optional string dest_user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dest_user_id().data(), static_cast<int>(this->_internal_dest_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.dest_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dest_user_id(), target);
  }

  // optional string contract_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.contract_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contract_id(), target);
  }

  // optional string coop_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coop_id().data(), static_cast<int>(this->_internal_coop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.coop_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coop_id(), target);
  }

  // optional bool autojoin = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_autojoin(), target);
  }

  // optional uint32 grade = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_grade(), target);
  }

  // optional bool replay = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_replay(), target);
  }

  // optional bool points_replay = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_points_replay(), target);
  }

  // optional uint32 reward_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reward_type(), target);
  }

  // optional string reward_subtype = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_subtype().data(), static_cast<int>(this->_internal_reward_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.reward_subtype");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_reward_subtype(), target);
  }

  // optional double reward_amount = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_reward_amount(), target);
  }

  // optional uint32 goal_index = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_goal_index(), target);
  }

  // optional string boost_id = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boost_id().data(), static_cast<int>(this->_internal_boost_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ContractAction.boost_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_boost_id(), target);
  }

  // optional uint32 tokens = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tokens(), target);
  }

  // optional uint32 kick_reason = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_kick_reason(), target);
  }

  // optional bool public = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_public_(), target);
  }

  // optional bool cc_only = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_cc_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ContractAction)
  return target;
}

size_t ContractAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ContractAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string action_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_name());
    }

    // optional string dest_user_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dest_user_id());
    }

    // optional string contract_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_id());
    }

    // optional string coop_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coop_id());
    }

    // optional string reward_subtype = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_subtype());
    }

    // optional string boost_id = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boost_id());
    }

    // optional double approx_time = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 grade = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grade());
    }

    // optional uint32 reward_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_type());
    }

    // optional bool autojoin = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool replay = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool points_replay = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool public = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 goal_index = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goal_index());
    }

    // optional double reward_amount = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 tokens = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tokens());
    }

    // optional uint32 kick_reason = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kick_reason());
    }

    // optional bool cc_only = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ContractAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ContractAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ContractAction)
    MergeFrom(*source);
  }
}

void ContractAction::MergeFrom(const ContractAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ContractAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_action_name(from._internal_action_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dest_user_id(from._internal_dest_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_contract_id(from._internal_contract_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_coop_id(from._internal_coop_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_reward_subtype(from._internal_reward_subtype());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_boost_id(from._internal_boost_id());
    }
    if (cached_has_bits & 0x00000080u) {
      approx_time_ = from.approx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000200u) {
      reward_type_ = from.reward_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      autojoin_ = from.autojoin_;
    }
    if (cached_has_bits & 0x00000800u) {
      replay_ = from.replay_;
    }
    if (cached_has_bits & 0x00001000u) {
      points_replay_ = from.points_replay_;
    }
    if (cached_has_bits & 0x00002000u) {
      public__ = from.public__;
    }
    if (cached_has_bits & 0x00004000u) {
      goal_index_ = from.goal_index_;
    }
    if (cached_has_bits & 0x00008000u) {
      reward_amount_ = from.reward_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      tokens_ = from.tokens_;
    }
    if (cached_has_bits & 0x00020000u) {
      kick_reason_ = from.kick_reason_;
    }
    if (cached_has_bits & 0x00040000u) {
      cc_only_ = from.cc_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ContractAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractAction::CopyFrom(const ContractAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ContractAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractAction::IsInitialized() const {
  return true;
}

void ContractAction::InternalSwap(ContractAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_name_.Swap(&other->action_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_user_id_.Swap(&other->dest_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coop_id_.Swap(&other->coop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reward_subtype_.Swap(&other->reward_subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boost_id_.Swap(&other->boost_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractAction, cc_only_)
      + sizeof(ContractAction::cc_only_)
      - PROTOBUF_FIELD_OFFSET(ContractAction, approx_time_)>(
          reinterpret_cast<char*>(&approx_time_),
          reinterpret_cast<char*>(&other->approx_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDataInfoRequest::InitAsDefaultInstance() {
  ::ei::_UserDataInfoRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class UserDataInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDataInfoRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const UserDataInfoRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backup_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::BasicRequestInfo&
UserDataInfoRequest::_Internal::rinfo(const UserDataInfoRequest* msg) {
  return *msg->rinfo_;
}
UserDataInfoRequest::UserDataInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UserDataInfoRequest)
}
UserDataInfoRequest::UserDataInfoRequest(const UserDataInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  backup_checksum_ = from.backup_checksum_;
  // @@protoc_insertion_point(copy_constructor:ei.UserDataInfoRequest)
}

void UserDataInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDataInfoRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backup_checksum_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(backup_checksum_));
}

UserDataInfoRequest::~UserDataInfoRequest() {
  // @@protoc_insertion_point(destructor:ei.UserDataInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDataInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void UserDataInfoRequest::ArenaDtor(void* object) {
  UserDataInfoRequest* _this = reinterpret_cast< UserDataInfoRequest* >(object);
  (void)_this;
}
void UserDataInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDataInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDataInfoRequest& UserDataInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDataInfoRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void UserDataInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UserDataInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  backup_checksum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDataInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserDataInfoRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserDataInfoRequest.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 backup_checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_backup_checksum(&has_bits);
          backup_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDataInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UserDataInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserDataInfoRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserDataInfoRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // optional uint64 backup_checksum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_backup_checksum(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UserDataInfoRequest)
  return target;
}

size_t UserDataInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UserDataInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string device_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint64 backup_checksum = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_backup_checksum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDataInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UserDataInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDataInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDataInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UserDataInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UserDataInfoRequest)
    MergeFrom(*source);
  }
}

void UserDataInfoRequest::MergeFrom(const UserDataInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UserDataInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      backup_checksum_ = from.backup_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDataInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UserDataInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataInfoRequest::CopyFrom(const UserDataInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UserDataInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataInfoRequest::IsInitialized() const {
  return true;
}

void UserDataInfoRequest::InternalSwap(UserDataInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDataInfoRequest, backup_checksum_)
      + sizeof(UserDataInfoRequest::backup_checksum_)
      - PROTOBUF_FIELD_OFFSET(UserDataInfoRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDataInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDataInfoResponse::InitAsDefaultInstance() {
}
class UserDataInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDataInfoResponse>()._has_bits_);
  static void set_has_backup_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_backup_total_cash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserDataInfoResponse::UserDataInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coop_memberships_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UserDataInfoResponse)
}
UserDataInfoResponse::UserDataInfoResponse(const UserDataInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      coop_memberships_(from.coop_memberships_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&backup_checksum_, &from.backup_checksum_,
    static_cast<size_t>(reinterpret_cast<char*>(&backup_total_cash_) -
    reinterpret_cast<char*>(&backup_checksum_)) + sizeof(backup_total_cash_));
  // @@protoc_insertion_point(copy_constructor:ei.UserDataInfoResponse)
}

void UserDataInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDataInfoResponse_ei_2eproto.base);
  ::memset(&backup_checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backup_total_cash_) -
      reinterpret_cast<char*>(&backup_checksum_)) + sizeof(backup_total_cash_));
}

UserDataInfoResponse::~UserDataInfoResponse() {
  // @@protoc_insertion_point(destructor:ei.UserDataInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDataInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserDataInfoResponse::ArenaDtor(void* object) {
  UserDataInfoResponse* _this = reinterpret_cast< UserDataInfoResponse* >(object);
  (void)_this;
}
void UserDataInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDataInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDataInfoResponse& UserDataInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDataInfoResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void UserDataInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UserDataInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coop_memberships_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&backup_checksum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backup_total_cash_) -
        reinterpret_cast<char*>(&backup_checksum_)) + sizeof(backup_total_cash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDataInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 backup_checksum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_backup_checksum(&has_bits);
          backup_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double backup_total_cash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_backup_total_cash(&has_bits);
          backup_total_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string coop_memberships = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_coop_memberships();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserDataInfoResponse.coop_memberships");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDataInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UserDataInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 backup_checksum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_backup_checksum(), target);
  }

  // optional double backup_total_cash = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_backup_total_cash(), target);
  }

  // repeated string coop_memberships = 3;
  for (int i = 0, n = this->_internal_coop_memberships_size(); i < n; i++) {
    const auto& s = this->_internal_coop_memberships(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserDataInfoResponse.coop_memberships");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UserDataInfoResponse)
  return target;
}

size_t UserDataInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UserDataInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string coop_memberships = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(coop_memberships_.size());
  for (int i = 0, n = coop_memberships_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      coop_memberships_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 backup_checksum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_backup_checksum());
    }

    // optional double backup_total_cash = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDataInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UserDataInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDataInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDataInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UserDataInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UserDataInfoResponse)
    MergeFrom(*source);
  }
}

void UserDataInfoResponse::MergeFrom(const UserDataInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UserDataInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coop_memberships_.MergeFrom(from.coop_memberships_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      backup_checksum_ = from.backup_checksum_;
    }
    if (cached_has_bits & 0x00000002u) {
      backup_total_cash_ = from.backup_total_cash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDataInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UserDataInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataInfoResponse::CopyFrom(const UserDataInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UserDataInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataInfoResponse::IsInitialized() const {
  return true;
}

void UserDataInfoResponse::InternalSwap(UserDataInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coop_memberships_.InternalSwap(&other->coop_memberships_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDataInfoResponse, backup_total_cash_)
      + sizeof(UserDataInfoResponse::backup_total_cash_)
      - PROTOBUF_FIELD_OFFSET(UserDataInfoResponse, backup_checksum_)>(
          reinterpret_cast<char*>(&backup_checksum_),
          reinterpret_cast<char*>(&other->backup_checksum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDataInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearAllUserDataRequest::InitAsDefaultInstance() {
  ::ei::_ClearAllUserDataRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ClearAllUserDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearAllUserDataRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ClearAllUserDataRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backup_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::BasicRequestInfo&
ClearAllUserDataRequest::_Internal::rinfo(const ClearAllUserDataRequest* msg) {
  return *msg->rinfo_;
}
ClearAllUserDataRequest::ClearAllUserDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ClearAllUserDataRequest)
}
ClearAllUserDataRequest::ClearAllUserDataRequest(const ClearAllUserDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_id()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  backup_checksum_ = from.backup_checksum_;
  // @@protoc_insertion_point(copy_constructor:ei.ClearAllUserDataRequest)
}

void ClearAllUserDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearAllUserDataRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backup_checksum_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(backup_checksum_));
}

ClearAllUserDataRequest::~ClearAllUserDataRequest() {
  // @@protoc_insertion_point(destructor:ei.ClearAllUserDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearAllUserDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void ClearAllUserDataRequest::ArenaDtor(void* object) {
  ClearAllUserDataRequest* _this = reinterpret_cast< ClearAllUserDataRequest* >(object);
  (void)_this;
}
void ClearAllUserDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearAllUserDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearAllUserDataRequest& ClearAllUserDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearAllUserDataRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ClearAllUserDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ClearAllUserDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  backup_checksum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearAllUserDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ClearAllUserDataRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ClearAllUserDataRequest.device_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 backup_checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_backup_checksum(&has_bits);
          backup_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearAllUserDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ClearAllUserDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ClearAllUserDataRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string device_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ClearAllUserDataRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // optional uint64 backup_checksum = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_backup_checksum(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ClearAllUserDataRequest)
  return target;
}

size_t ClearAllUserDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ClearAllUserDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string device_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint64 backup_checksum = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_backup_checksum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearAllUserDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ClearAllUserDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearAllUserDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearAllUserDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ClearAllUserDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ClearAllUserDataRequest)
    MergeFrom(*source);
  }
}

void ClearAllUserDataRequest::MergeFrom(const ClearAllUserDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ClearAllUserDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      backup_checksum_ = from.backup_checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearAllUserDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ClearAllUserDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearAllUserDataRequest::CopyFrom(const ClearAllUserDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ClearAllUserDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAllUserDataRequest::IsInitialized() const {
  return true;
}

void ClearAllUserDataRequest::InternalSwap(ClearAllUserDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearAllUserDataRequest, backup_checksum_)
      + sizeof(ClearAllUserDataRequest::backup_checksum_)
      - PROTOBUF_FIELD_OFFSET(ClearAllUserDataRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearAllUserDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerGift::InitAsDefaultInstance() {
}
class ServerGift::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerGift>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reward_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reward_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServerGift::ServerGift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ServerGift)
}
ServerGift::ServerGift(const ServerGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reward_sub_type()) {
    reward_sub_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_sub_type(),
      GetArena());
  }
  ::memcpy(&reward_amount_, &from.reward_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&reward_amount_)) + sizeof(reward_type_));
  // @@protoc_insertion_point(copy_constructor:ei.ServerGift)
}

void ServerGift::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerGift_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_amount_ = 0;
  reward_type_ = 1;
}

ServerGift::~ServerGift() {
  // @@protoc_insertion_point(destructor:ei.ServerGift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerGift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerGift::ArenaDtor(void* object) {
  ServerGift* _this = reinterpret_cast< ServerGift* >(object);
  (void)_this;
}
void ServerGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerGift& ServerGift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerGift_ei_2eproto.base);
  return *internal_default_instance();
}


void ServerGift::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ServerGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_sub_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    reward_amount_ = 0;
    reward_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ServerGift.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.RewardType reward_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::RewardType_IsValid(val))) {
            _internal_set_reward_type(static_cast<::ei::RewardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reward_sub_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reward_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ServerGift.reward_sub_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reward_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_reward_amount(&has_bits);
          reward_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ServerGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ServerGift.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional .ei.RewardType reward_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reward_type(), target);
  }

  // optional string reward_sub_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reward_sub_type().data(), static_cast<int>(this->_internal_reward_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ServerGift.reward_sub_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reward_sub_type(), target);
  }

  // optional double reward_amount = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_reward_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ServerGift)
  return target;
}

size_t ServerGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ServerGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string reward_sub_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reward_sub_type());
    }

    // optional double reward_amount = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .ei.RewardType reward_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ServerGift)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ServerGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ServerGift)
    MergeFrom(*source);
  }
}

void ServerGift::MergeFrom(const ServerGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ServerGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_reward_sub_type(from._internal_reward_sub_type());
    }
    if (cached_has_bits & 0x00000004u) {
      reward_amount_ = from.reward_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      reward_type_ = from.reward_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ServerGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGift::CopyFrom(const ServerGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ServerGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGift::IsInitialized() const {
  return true;
}

void ServerGift::InternalSwap(ServerGift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reward_sub_type_.Swap(&other->reward_sub_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reward_amount_, other->reward_amount_);
  swap(reward_type_, other->reward_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_BoostsConfig_ItemConfig::InitAsDefaultInstance() {
}
class LiveConfig_BoostsConfig_ItemConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_BoostsConfig_ItemConfig>()._has_bits_);
  static void set_has_boost_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_se_required(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LiveConfig_BoostsConfig_ItemConfig::LiveConfig_BoostsConfig_ItemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.BoostsConfig.ItemConfig)
}
LiveConfig_BoostsConfig_ItemConfig::LiveConfig_BoostsConfig_ItemConfig(const LiveConfig_BoostsConfig_ItemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_boost_id()) {
    boost_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boost_id(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&se_required_) -
    reinterpret_cast<char*>(&price_)) + sizeof(se_required_));
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.BoostsConfig.ItemConfig)
}

void LiveConfig_BoostsConfig_ItemConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto.base);
  boost_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_required_) -
      reinterpret_cast<char*>(&price_)) + sizeof(se_required_));
}

LiveConfig_BoostsConfig_ItemConfig::~LiveConfig_BoostsConfig_ItemConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.BoostsConfig.ItemConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_BoostsConfig_ItemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  boost_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiveConfig_BoostsConfig_ItemConfig::ArenaDtor(void* object) {
  LiveConfig_BoostsConfig_ItemConfig* _this = reinterpret_cast< LiveConfig_BoostsConfig_ItemConfig* >(object);
  (void)_this;
}
void LiveConfig_BoostsConfig_ItemConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_BoostsConfig_ItemConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_BoostsConfig_ItemConfig& LiveConfig_BoostsConfig_ItemConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_BoostsConfig_ItemConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_BoostsConfig_ItemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    boost_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&se_required_) -
        reinterpret_cast<char*>(&price_)) + sizeof(se_required_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_BoostsConfig_ItemConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string boost_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_boost_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LiveConfig.BoostsConfig.ItemConfig.boost_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 token_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_token_price(&has_bits);
          token_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double se_required = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_se_required(&has_bits);
          se_required_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_BoostsConfig_ItemConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string boost_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_boost_id().data(), static_cast<int>(this->_internal_boost_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LiveConfig.BoostsConfig.ItemConfig.boost_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_boost_id(), target);
  }

  // optional uint32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price(), target);
  }

  // optional uint32 token_price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_token_price(), target);
  }

  // optional double se_required = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_se_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.BoostsConfig.ItemConfig)
  return target;
}

size_t LiveConfig_BoostsConfig_ItemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string boost_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_boost_id());
    }

    // optional uint32 price = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 token_price = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_token_price());
    }

    // optional double se_required = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_BoostsConfig_ItemConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_BoostsConfig_ItemConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_BoostsConfig_ItemConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.BoostsConfig.ItemConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.BoostsConfig.ItemConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_BoostsConfig_ItemConfig::MergeFrom(const LiveConfig_BoostsConfig_ItemConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_boost_id(from._internal_boost_id());
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_price_ = from.token_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      se_required_ = from.se_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiveConfig_BoostsConfig_ItemConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_BoostsConfig_ItemConfig::CopyFrom(const LiveConfig_BoostsConfig_ItemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.BoostsConfig.ItemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_BoostsConfig_ItemConfig::IsInitialized() const {
  return true;
}

void LiveConfig_BoostsConfig_ItemConfig::InternalSwap(LiveConfig_BoostsConfig_ItemConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boost_id_.Swap(&other->boost_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig_BoostsConfig_ItemConfig, se_required_)
      + sizeof(LiveConfig_BoostsConfig_ItemConfig::se_required_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig_BoostsConfig_ItemConfig, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_BoostsConfig_ItemConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_BoostsConfig::InitAsDefaultInstance() {
}
class LiveConfig_BoostsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_BoostsConfig>()._has_bits_);
  static void set_has_cash_boost_cooloff_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LiveConfig_BoostsConfig::LiveConfig_BoostsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.BoostsConfig)
}
LiveConfig_BoostsConfig::LiveConfig_BoostsConfig(const LiveConfig_BoostsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_configs_(from.item_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cash_boost_cooloff_time_ = from.cash_boost_cooloff_time_;
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.BoostsConfig)
}

void LiveConfig_BoostsConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_BoostsConfig_ei_2eproto.base);
  cash_boost_cooloff_time_ = 0;
}

LiveConfig_BoostsConfig::~LiveConfig_BoostsConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.BoostsConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_BoostsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiveConfig_BoostsConfig::ArenaDtor(void* object) {
  LiveConfig_BoostsConfig* _this = reinterpret_cast< LiveConfig_BoostsConfig* >(object);
  (void)_this;
}
void LiveConfig_BoostsConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_BoostsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_BoostsConfig& LiveConfig_BoostsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_BoostsConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_BoostsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.BoostsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_configs_.Clear();
  cash_boost_cooloff_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_BoostsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.LiveConfig.BoostsConfig.ItemConfig item_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double cash_boost_cooloff_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cash_boost_cooloff_time(&has_bits);
          cash_boost_cooloff_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_BoostsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.BoostsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.LiveConfig.BoostsConfig.ItemConfig item_configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_configs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double cash_boost_cooloff_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cash_boost_cooloff_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.BoostsConfig)
  return target;
}

size_t LiveConfig_BoostsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.BoostsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LiveConfig.BoostsConfig.ItemConfig item_configs = 1;
  total_size += 1UL * this->_internal_item_configs_size();
  for (const auto& msg : this->item_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double cash_boost_cooloff_time = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_BoostsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.BoostsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_BoostsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_BoostsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.BoostsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.BoostsConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_BoostsConfig::MergeFrom(const LiveConfig_BoostsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.BoostsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_configs_.MergeFrom(from.item_configs_);
  if (from._internal_has_cash_boost_cooloff_time()) {
    _internal_set_cash_boost_cooloff_time(from._internal_cash_boost_cooloff_time());
  }
}

void LiveConfig_BoostsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.BoostsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_BoostsConfig::CopyFrom(const LiveConfig_BoostsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.BoostsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_BoostsConfig::IsInitialized() const {
  return true;
}

void LiveConfig_BoostsConfig::InternalSwap(LiveConfig_BoostsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_configs_.InternalSwap(&other->item_configs_);
  swap(cash_boost_cooloff_time_, other->cash_boost_cooloff_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_BoostsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_GiftConfig_GiftValueConfig::InitAsDefaultInstance() {
}
class LiveConfig_GiftConfig_GiftValueConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_GiftConfig_GiftValueConfig>()._has_bits_);
  static void set_has_gift_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rand_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rand_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_video_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LiveConfig_GiftConfig_GiftValueConfig::LiveConfig_GiftConfig_GiftValueConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.GiftConfig.GiftValueConfig)
}
LiveConfig_GiftConfig_GiftValueConfig::LiveConfig_GiftConfig_GiftValueConfig(const LiveConfig_GiftConfig_GiftValueConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gift_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gift_id()) {
    gift_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gift_id(),
      GetArena());
  }
  ::memcpy(&rand_min_, &from.rand_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_max_) -
    reinterpret_cast<char*>(&rand_min_)) + sizeof(video_max_));
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.GiftConfig.GiftValueConfig)
}

void LiveConfig_GiftConfig_GiftValueConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto.base);
  gift_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rand_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_max_) -
      reinterpret_cast<char*>(&rand_min_)) + sizeof(video_max_));
}

LiveConfig_GiftConfig_GiftValueConfig::~LiveConfig_GiftConfig_GiftValueConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.GiftConfig.GiftValueConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_GiftConfig_GiftValueConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gift_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiveConfig_GiftConfig_GiftValueConfig::ArenaDtor(void* object) {
  LiveConfig_GiftConfig_GiftValueConfig* _this = reinterpret_cast< LiveConfig_GiftConfig_GiftValueConfig* >(object);
  (void)_this;
}
void LiveConfig_GiftConfig_GiftValueConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_GiftConfig_GiftValueConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_GiftConfig_GiftValueConfig& LiveConfig_GiftConfig_GiftValueConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_GiftConfig_GiftValueConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_GiftConfig_GiftValueConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gift_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&rand_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&video_max_) -
        reinterpret_cast<char*>(&rand_min_)) + sizeof(video_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_GiftConfig_GiftValueConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string gift_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gift_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LiveConfig.GiftConfig.GiftValueConfig.gift_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double rand_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rand_min(&has_bits);
          rand_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rand_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_rand_max(&has_bits);
          rand_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_video_min(&has_bits);
          video_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_video_max(&has_bits);
          video_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_GiftConfig_GiftValueConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gift_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gift_id().data(), static_cast<int>(this->_internal_gift_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LiveConfig.GiftConfig.GiftValueConfig.gift_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gift_id(), target);
  }

  // optional double rand_min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rand_min(), target);
  }

  // optional double rand_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rand_max(), target);
  }

  // optional double amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_amount(), target);
  }

  // optional double video_min = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_video_min(), target);
  }

  // optional double video_max = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_video_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.GiftConfig.GiftValueConfig)
  return target;
}

size_t LiveConfig_GiftConfig_GiftValueConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string gift_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gift_id());
    }

    // optional double rand_min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double rand_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double amount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double video_min = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double video_max = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_GiftConfig_GiftValueConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_GiftConfig_GiftValueConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_GiftConfig_GiftValueConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.GiftConfig.GiftValueConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.GiftConfig.GiftValueConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_GiftConfig_GiftValueConfig::MergeFrom(const LiveConfig_GiftConfig_GiftValueConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gift_id(from._internal_gift_id());
    }
    if (cached_has_bits & 0x00000002u) {
      rand_min_ = from.rand_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      rand_max_ = from.rand_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      video_min_ = from.video_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      video_max_ = from.video_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiveConfig_GiftConfig_GiftValueConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_GiftConfig_GiftValueConfig::CopyFrom(const LiveConfig_GiftConfig_GiftValueConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.GiftConfig.GiftValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_GiftConfig_GiftValueConfig::IsInitialized() const {
  return true;
}

void LiveConfig_GiftConfig_GiftValueConfig::InternalSwap(LiveConfig_GiftConfig_GiftValueConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gift_id_.Swap(&other->gift_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig_GiftValueConfig, video_max_)
      + sizeof(LiveConfig_GiftConfig_GiftValueConfig::video_max_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig_GiftValueConfig, rand_min_)>(
          reinterpret_cast<char*>(&rand_min_),
          reinterpret_cast<char*>(&other->rand_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_GiftConfig_GiftValueConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_GiftConfig_GiftMuConfig::InitAsDefaultInstance() {
}
class LiveConfig_GiftConfig_GiftMuConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_GiftConfig_GiftMuConfig>()._has_bits_);
  static void set_has_min_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overall_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LiveConfig_GiftConfig_GiftMuConfig::LiveConfig_GiftConfig_GiftMuConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.GiftConfig.GiftMuConfig)
}
LiveConfig_GiftConfig_GiftMuConfig::LiveConfig_GiftConfig_GiftMuConfig(const LiveConfig_GiftConfig_GiftMuConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_spent_, &from.min_spent_,
    static_cast<size_t>(reinterpret_cast<char*>(&overall_mult_) -
    reinterpret_cast<char*>(&min_spent_)) + sizeof(overall_mult_));
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.GiftConfig.GiftMuConfig)
}

void LiveConfig_GiftConfig_GiftMuConfig::SharedCtor() {
  ::memset(&min_spent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overall_mult_) -
      reinterpret_cast<char*>(&min_spent_)) + sizeof(overall_mult_));
}

LiveConfig_GiftConfig_GiftMuConfig::~LiveConfig_GiftConfig_GiftMuConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.GiftConfig.GiftMuConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_GiftConfig_GiftMuConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiveConfig_GiftConfig_GiftMuConfig::ArenaDtor(void* object) {
  LiveConfig_GiftConfig_GiftMuConfig* _this = reinterpret_cast< LiveConfig_GiftConfig_GiftMuConfig* >(object);
  (void)_this;
}
void LiveConfig_GiftConfig_GiftMuConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_GiftConfig_GiftMuConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_GiftConfig_GiftMuConfig& LiveConfig_GiftConfig_GiftMuConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_GiftConfig_GiftMuConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_GiftConfig_GiftMuConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&min_spent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overall_mult_) -
        reinterpret_cast<char*>(&min_spent_)) + sizeof(overall_mult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_GiftConfig_GiftMuConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_spent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_spent(&has_bits);
          min_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_spent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_spent(&has_bits);
          max_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double overall_mult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_overall_mult(&has_bits);
          overall_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_GiftConfig_GiftMuConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_spent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_spent(), target);
  }

  // optional double max_spent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_spent(), target);
  }

  // optional double overall_mult = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_overall_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.GiftConfig.GiftMuConfig)
  return target;
}

size_t LiveConfig_GiftConfig_GiftMuConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double min_spent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_spent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double overall_mult = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_GiftConfig_GiftMuConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_GiftConfig_GiftMuConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_GiftConfig_GiftMuConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.GiftConfig.GiftMuConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.GiftConfig.GiftMuConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_GiftConfig_GiftMuConfig::MergeFrom(const LiveConfig_GiftConfig_GiftMuConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      min_spent_ = from.min_spent_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_spent_ = from.max_spent_;
    }
    if (cached_has_bits & 0x00000004u) {
      overall_mult_ = from.overall_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiveConfig_GiftConfig_GiftMuConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_GiftConfig_GiftMuConfig::CopyFrom(const LiveConfig_GiftConfig_GiftMuConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.GiftConfig.GiftMuConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_GiftConfig_GiftMuConfig::IsInitialized() const {
  return true;
}

void LiveConfig_GiftConfig_GiftMuConfig::InternalSwap(LiveConfig_GiftConfig_GiftMuConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig_GiftMuConfig, overall_mult_)
      + sizeof(LiveConfig_GiftConfig_GiftMuConfig::overall_mult_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig_GiftMuConfig, min_spent_)>(
          reinterpret_cast<char*>(&min_spent_),
          reinterpret_cast<char*>(&other->min_spent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_GiftConfig_GiftMuConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_GiftConfig::InitAsDefaultInstance() {
  ::ei::_LiveConfig_GiftConfig_default_instance_._instance.get_mutable()->random_gift_mu_config_ = const_cast< ::ei::LiveConfig_GiftConfig_GiftMuConfig*>(
      ::ei::LiveConfig_GiftConfig_GiftMuConfig::internal_default_instance());
  ::ei::_LiveConfig_GiftConfig_default_instance_._instance.get_mutable()->video_gift_mu_config_ = const_cast< ::ei::LiveConfig_GiftConfig_GiftMuConfig*>(
      ::ei::LiveConfig_GiftConfig_GiftMuConfig::internal_default_instance());
}
class LiveConfig_GiftConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_GiftConfig>()._has_bits_);
  static void set_has_gift_mu_min_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gift_mu_max_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gift_mu_overall_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::ei::LiveConfig_GiftConfig_GiftMuConfig& random_gift_mu_config(const LiveConfig_GiftConfig* msg);
  static void set_has_random_gift_mu_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::LiveConfig_GiftConfig_GiftMuConfig& video_gift_mu_config(const LiveConfig_GiftConfig* msg);
  static void set_has_video_gift_mu_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_offer_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_video_offer_interval_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_video_offer_interval_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_video_offer_interval_piggy_extra_full(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_video_reset_on_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_package_interval_contract(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_package_interval_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_package_interval_piggy_extra_full(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_package_reset_on_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::ei::LiveConfig_GiftConfig_GiftMuConfig&
LiveConfig_GiftConfig::_Internal::random_gift_mu_config(const LiveConfig_GiftConfig* msg) {
  return *msg->random_gift_mu_config_;
}
const ::ei::LiveConfig_GiftConfig_GiftMuConfig&
LiveConfig_GiftConfig::_Internal::video_gift_mu_config(const LiveConfig_GiftConfig* msg) {
  return *msg->video_gift_mu_config_;
}
LiveConfig_GiftConfig::LiveConfig_GiftConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gift_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.GiftConfig)
}
LiveConfig_GiftConfig::LiveConfig_GiftConfig(const LiveConfig_GiftConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gift_configs_(from.gift_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_random_gift_mu_config()) {
    random_gift_mu_config_ = new ::ei::LiveConfig_GiftConfig_GiftMuConfig(*from.random_gift_mu_config_);
  } else {
    random_gift_mu_config_ = nullptr;
  }
  if (from._internal_has_video_gift_mu_config()) {
    video_gift_mu_config_ = new ::ei::LiveConfig_GiftConfig_GiftMuConfig(*from.video_gift_mu_config_);
  } else {
    video_gift_mu_config_ = nullptr;
  }
  ::memcpy(&package_interval_, &from.package_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&package_reset_on_idle_) -
    reinterpret_cast<char*>(&package_interval_)) + sizeof(package_reset_on_idle_));
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.GiftConfig)
}

void LiveConfig_GiftConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_GiftConfig_ei_2eproto.base);
  ::memset(&random_gift_mu_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&package_reset_on_idle_) -
      reinterpret_cast<char*>(&random_gift_mu_config_)) + sizeof(package_reset_on_idle_));
}

LiveConfig_GiftConfig::~LiveConfig_GiftConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.GiftConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_GiftConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete random_gift_mu_config_;
  if (this != internal_default_instance()) delete video_gift_mu_config_;
}

void LiveConfig_GiftConfig::ArenaDtor(void* object) {
  LiveConfig_GiftConfig* _this = reinterpret_cast< LiveConfig_GiftConfig* >(object);
  (void)_this;
}
void LiveConfig_GiftConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_GiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_GiftConfig& LiveConfig_GiftConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_GiftConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_GiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.GiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gift_configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(random_gift_mu_config_ != nullptr);
      random_gift_mu_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(video_gift_mu_config_ != nullptr);
      video_gift_mu_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&package_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&package_interval_contract_) -
        reinterpret_cast<char*>(&package_interval_)) + sizeof(package_interval_contract_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&package_interval_piggy_full_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&package_reset_on_idle_) -
        reinterpret_cast<char*>(&package_interval_piggy_full_)) + sizeof(package_reset_on_idle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_GiftConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double package_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_package_interval(&has_bits);
          package_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_offer_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_video_offer_interval(&has_bits);
          video_offer_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_offer_interval_contract = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_video_offer_interval_contract(&has_bits);
          video_offer_interval_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_offer_interval_piggy_full = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_video_offer_interval_piggy_full(&has_bits);
          video_offer_interval_piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video_offer_interval_piggy_extra_full = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_video_offer_interval_piggy_extra_full(&has_bits);
          video_offer_interval_piggy_extra_full_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double package_interval_contract = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_package_interval_contract(&has_bits);
          package_interval_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double package_interval_piggy_full = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_package_interval_piggy_full(&has_bits);
          package_interval_piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double package_interval_piggy_extra_full = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_package_interval_piggy_extra_full(&has_bits);
          package_interval_piggy_extra_full_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.LiveConfig.GiftConfig.GiftValueConfig gift_configs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gift_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double gift_mu_min_spent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_gift_mu_min_spent(&has_bits);
          gift_mu_min_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gift_mu_max_spent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_gift_mu_max_spent(&has_bits);
          gift_mu_max_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gift_mu_overall_mult = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_gift_mu_overall_mult(&has_bits);
          gift_mu_overall_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool package_reset_on_idle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_package_reset_on_idle(&has_bits);
          package_reset_on_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool video_reset_on_idle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_video_reset_on_idle(&has_bits);
          video_reset_on_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig.GiftConfig.GiftMuConfig random_gift_mu_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_gift_mu_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig.GiftConfig.GiftMuConfig video_gift_mu_config = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_gift_mu_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_GiftConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.GiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double package_interval = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_package_interval(), target);
  }

  // optional double video_offer_interval = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_video_offer_interval(), target);
  }

  // optional double video_offer_interval_contract = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_video_offer_interval_contract(), target);
  }

  // optional double video_offer_interval_piggy_full = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_video_offer_interval_piggy_full(), target);
  }

  // optional double video_offer_interval_piggy_extra_full = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_video_offer_interval_piggy_extra_full(), target);
  }

  // optional double package_interval_contract = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_package_interval_contract(), target);
  }

  // optional double package_interval_piggy_full = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_package_interval_piggy_full(), target);
  }

  // optional double package_interval_piggy_extra_full = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_package_interval_piggy_extra_full(), target);
  }

  // repeated .ei.LiveConfig.GiftConfig.GiftValueConfig gift_configs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gift_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_gift_configs(i), target, stream);
  }

  // optional double gift_mu_min_spent = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gift_mu_min_spent(), target);
  }

  // optional double gift_mu_max_spent = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_gift_mu_max_spent(), target);
  }

  // optional double gift_mu_overall_mult = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_gift_mu_overall_mult(), target);
  }

  // optional bool package_reset_on_idle = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_package_reset_on_idle(), target);
  }

  // optional bool video_reset_on_idle = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_video_reset_on_idle(), target);
  }

  // optional .ei.LiveConfig.GiftConfig.GiftMuConfig random_gift_mu_config = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::random_gift_mu_config(this), target, stream);
  }

  // optional .ei.LiveConfig.GiftConfig.GiftMuConfig video_gift_mu_config = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::video_gift_mu_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.GiftConfig)
  return target;
}

size_t LiveConfig_GiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.GiftConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.LiveConfig.GiftConfig.GiftValueConfig gift_configs = 9;
  total_size += 1UL * this->_internal_gift_configs_size();
  for (const auto& msg : this->gift_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ei.LiveConfig.GiftConfig.GiftMuConfig random_gift_mu_config = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *random_gift_mu_config_);
    }

    // optional .ei.LiveConfig.GiftConfig.GiftMuConfig video_gift_mu_config = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_gift_mu_config_);
    }

    // optional double package_interval = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double video_offer_interval = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double video_offer_interval_contract = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double video_offer_interval_piggy_full = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double video_offer_interval_piggy_extra_full = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double package_interval_contract = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double package_interval_piggy_full = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double package_interval_piggy_extra_full = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double gift_mu_min_spent = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double gift_mu_max_spent = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double gift_mu_overall_mult = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool video_reset_on_idle = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool package_reset_on_idle = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_GiftConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.GiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_GiftConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_GiftConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.GiftConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.GiftConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_GiftConfig::MergeFrom(const LiveConfig_GiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.GiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gift_configs_.MergeFrom(from.gift_configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_random_gift_mu_config()->::ei::LiveConfig_GiftConfig_GiftMuConfig::MergeFrom(from._internal_random_gift_mu_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_video_gift_mu_config()->::ei::LiveConfig_GiftConfig_GiftMuConfig::MergeFrom(from._internal_video_gift_mu_config());
    }
    if (cached_has_bits & 0x00000004u) {
      package_interval_ = from.package_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_offer_interval_ = from.video_offer_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      video_offer_interval_contract_ = from.video_offer_interval_contract_;
    }
    if (cached_has_bits & 0x00000020u) {
      video_offer_interval_piggy_full_ = from.video_offer_interval_piggy_full_;
    }
    if (cached_has_bits & 0x00000040u) {
      video_offer_interval_piggy_extra_full_ = from.video_offer_interval_piggy_extra_full_;
    }
    if (cached_has_bits & 0x00000080u) {
      package_interval_contract_ = from.package_interval_contract_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      package_interval_piggy_full_ = from.package_interval_piggy_full_;
    }
    if (cached_has_bits & 0x00000200u) {
      package_interval_piggy_extra_full_ = from.package_interval_piggy_extra_full_;
    }
    if (cached_has_bits & 0x00000400u) {
      gift_mu_min_spent_ = from.gift_mu_min_spent_;
    }
    if (cached_has_bits & 0x00000800u) {
      gift_mu_max_spent_ = from.gift_mu_max_spent_;
    }
    if (cached_has_bits & 0x00001000u) {
      gift_mu_overall_mult_ = from.gift_mu_overall_mult_;
    }
    if (cached_has_bits & 0x00002000u) {
      video_reset_on_idle_ = from.video_reset_on_idle_;
    }
    if (cached_has_bits & 0x00004000u) {
      package_reset_on_idle_ = from.package_reset_on_idle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiveConfig_GiftConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.GiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_GiftConfig::CopyFrom(const LiveConfig_GiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.GiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_GiftConfig::IsInitialized() const {
  return true;
}

void LiveConfig_GiftConfig::InternalSwap(LiveConfig_GiftConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gift_configs_.InternalSwap(&other->gift_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig, package_reset_on_idle_)
      + sizeof(LiveConfig_GiftConfig::package_reset_on_idle_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig_GiftConfig, random_gift_mu_config_)>(
          reinterpret_cast<char*>(&random_gift_mu_config_),
          reinterpret_cast<char*>(&other->random_gift_mu_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_GiftConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig_MiscConfig::InitAsDefaultInstance() {
}
class LiveConfig_MiscConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig_MiscConfig>()._has_bits_);
  static void set_has_ask_to_track(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ask_to_track_min_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ask_to_track_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ask_to_track_show_pre_dialog(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ask_to_track_after_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chicken_run_boost_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_shells_intro_tickets(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shells_max_free_chicken_configs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shells_intro_alert_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_shells_lighting_controls_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_contracts_expert_league_min_soul_power(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_new_player_event_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_contracts_club_available(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_contracts_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

LiveConfig_MiscConfig::LiveConfig_MiscConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig.MiscConfig)
}
LiveConfig_MiscConfig::LiveConfig_MiscConfig(const LiveConfig_MiscConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ask_to_track_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ask_to_track_message()) {
    ask_to_track_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ask_to_track_message(),
      GetArena());
  }
  ::memcpy(&ask_to_track_min_soul_eggs_, &from.ask_to_track_min_soul_eggs_,
    static_cast<size_t>(reinterpret_cast<char*>(&shells_lighting_controls_price_) -
    reinterpret_cast<char*>(&ask_to_track_min_soul_eggs_)) + sizeof(shells_lighting_controls_price_));
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig.MiscConfig)
}

void LiveConfig_MiscConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_MiscConfig_ei_2eproto.base);
  ask_to_track_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ask_to_track_min_soul_eggs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracts_beta_) -
      reinterpret_cast<char*>(&ask_to_track_min_soul_eggs_)) + sizeof(contracts_beta_));
  shells_lighting_controls_price_ = 175u;
}

LiveConfig_MiscConfig::~LiveConfig_MiscConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig.MiscConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig_MiscConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ask_to_track_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiveConfig_MiscConfig::ArenaDtor(void* object) {
  LiveConfig_MiscConfig* _this = reinterpret_cast< LiveConfig_MiscConfig* >(object);
  (void)_this;
}
void LiveConfig_MiscConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig_MiscConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig_MiscConfig& LiveConfig_MiscConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_MiscConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig_MiscConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig.MiscConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ask_to_track_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ask_to_track_min_soul_eggs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chicken_run_boost_percentage_) -
        reinterpret_cast<char*>(&ask_to_track_min_soul_eggs_)) + sizeof(chicken_run_boost_percentage_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&shells_max_free_chicken_configs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contracts_beta_) -
        reinterpret_cast<char*>(&shells_max_free_chicken_configs_)) + sizeof(contracts_beta_));
    shells_lighting_controls_price_ = 175u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig_MiscConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ask_to_track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ask_to_track(&has_bits);
          ask_to_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ask_to_track_min_soul_eggs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ask_to_track_min_soul_eggs(&has_bits);
          ask_to_track_min_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string ask_to_track_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ask_to_track_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LiveConfig.MiscConfig.ask_to_track_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ask_to_track_show_pre_dialog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ask_to_track_show_pre_dialog(&has_bits);
          ask_to_track_show_pre_dialog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ask_to_track_after_privacy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ask_to_track_after_privacy(&has_bits);
          ask_to_track_after_privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double chicken_run_boost_percentage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_chicken_run_boost_percentage(&has_bits);
          chicken_run_boost_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 shells_intro_tickets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_shells_intro_tickets(&has_bits);
          shells_intro_tickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shells_max_free_chicken_configs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shells_max_free_chicken_configs(&has_bits);
          shells_max_free_chicken_configs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shells_intro_alert_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_shells_intro_alert_threshold(&has_bits);
          shells_intro_alert_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double contracts_expert_league_min_soul_power = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_contracts_expert_league_min_soul_power(&has_bits);
          contracts_expert_league_min_soul_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double new_player_event_duration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_new_player_event_duration(&has_bits);
          new_player_event_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_club_available = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_contracts_club_available(&has_bits);
          contracts_club_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_beta = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_contracts_beta(&has_bits);
          contracts_beta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shells_lighting_controls_price = 14 [default = 175];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_shells_lighting_controls_price(&has_bits);
          shells_lighting_controls_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig_MiscConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig.MiscConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ask_to_track = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ask_to_track(), target);
  }

  // optional double ask_to_track_min_soul_eggs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ask_to_track_min_soul_eggs(), target);
  }

  // optional string ask_to_track_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ask_to_track_message().data(), static_cast<int>(this->_internal_ask_to_track_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LiveConfig.MiscConfig.ask_to_track_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ask_to_track_message(), target);
  }

  // optional bool ask_to_track_show_pre_dialog = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ask_to_track_show_pre_dialog(), target);
  }

  // optional bool ask_to_track_after_privacy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ask_to_track_after_privacy(), target);
  }

  // optional double chicken_run_boost_percentage = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_chicken_run_boost_percentage(), target);
  }

  // optional uint32 shells_intro_tickets = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_shells_intro_tickets(), target);
  }

  // optional uint32 shells_max_free_chicken_configs = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_shells_max_free_chicken_configs(), target);
  }

  // optional uint32 shells_intro_alert_threshold = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_shells_intro_alert_threshold(), target);
  }

  // optional double contracts_expert_league_min_soul_power = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_contracts_expert_league_min_soul_power(), target);
  }

  // optional double new_player_event_duration = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_new_player_event_duration(), target);
  }

  // optional bool contracts_club_available = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_contracts_club_available(), target);
  }

  // optional bool contracts_beta = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_contracts_beta(), target);
  }

  // optional uint32 shells_lighting_controls_price = 14 [default = 175];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_shells_lighting_controls_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig.MiscConfig)
  return target;
}

size_t LiveConfig_MiscConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig.MiscConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ask_to_track_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ask_to_track_message());
    }

    // optional double ask_to_track_min_soul_eggs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool ask_to_track = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ask_to_track_show_pre_dialog = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ask_to_track_after_privacy = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool contracts_club_available = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 shells_intro_tickets = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shells_intro_tickets());
    }

    // optional double chicken_run_boost_percentage = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 shells_max_free_chicken_configs = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shells_max_free_chicken_configs());
    }

    // optional uint32 shells_intro_alert_threshold = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shells_intro_alert_threshold());
    }

    // optional double contracts_expert_league_min_soul_power = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double new_player_event_duration = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool contracts_beta = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 shells_lighting_controls_price = 14 [default = 175];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shells_lighting_controls_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig_MiscConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig.MiscConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig_MiscConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig_MiscConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig.MiscConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig.MiscConfig)
    MergeFrom(*source);
  }
}

void LiveConfig_MiscConfig::MergeFrom(const LiveConfig_MiscConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig.MiscConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ask_to_track_message(from._internal_ask_to_track_message());
    }
    if (cached_has_bits & 0x00000002u) {
      ask_to_track_min_soul_eggs_ = from.ask_to_track_min_soul_eggs_;
    }
    if (cached_has_bits & 0x00000004u) {
      ask_to_track_ = from.ask_to_track_;
    }
    if (cached_has_bits & 0x00000008u) {
      ask_to_track_show_pre_dialog_ = from.ask_to_track_show_pre_dialog_;
    }
    if (cached_has_bits & 0x00000010u) {
      ask_to_track_after_privacy_ = from.ask_to_track_after_privacy_;
    }
    if (cached_has_bits & 0x00000020u) {
      contracts_club_available_ = from.contracts_club_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      shells_intro_tickets_ = from.shells_intro_tickets_;
    }
    if (cached_has_bits & 0x00000080u) {
      chicken_run_boost_percentage_ = from.chicken_run_boost_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      shells_max_free_chicken_configs_ = from.shells_max_free_chicken_configs_;
    }
    if (cached_has_bits & 0x00000200u) {
      shells_intro_alert_threshold_ = from.shells_intro_alert_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      contracts_expert_league_min_soul_power_ = from.contracts_expert_league_min_soul_power_;
    }
    if (cached_has_bits & 0x00000800u) {
      new_player_event_duration_ = from.new_player_event_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      contracts_beta_ = from.contracts_beta_;
    }
    if (cached_has_bits & 0x00002000u) {
      shells_lighting_controls_price_ = from.shells_lighting_controls_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiveConfig_MiscConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig.MiscConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig_MiscConfig::CopyFrom(const LiveConfig_MiscConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig.MiscConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig_MiscConfig::IsInitialized() const {
  return true;
}

void LiveConfig_MiscConfig::InternalSwap(LiveConfig_MiscConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ask_to_track_message_.Swap(&other->ask_to_track_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig_MiscConfig, contracts_beta_)
      + sizeof(LiveConfig_MiscConfig::contracts_beta_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig_MiscConfig, ask_to_track_min_soul_eggs_)>(
          reinterpret_cast<char*>(&ask_to_track_min_soul_eggs_),
          reinterpret_cast<char*>(&other->ask_to_track_min_soul_eggs_));
  swap(shells_lighting_controls_price_, other->shells_lighting_controls_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig_MiscConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveConfig::InitAsDefaultInstance() {
  ::ei::_LiveConfig_default_instance_._instance.get_mutable()->boosts_config_ = const_cast< ::ei::LiveConfig_BoostsConfig*>(
      ::ei::LiveConfig_BoostsConfig::internal_default_instance());
  ::ei::_LiveConfig_default_instance_._instance.get_mutable()->gift_config_ = const_cast< ::ei::LiveConfig_GiftConfig*>(
      ::ei::LiveConfig_GiftConfig::internal_default_instance());
  ::ei::_LiveConfig_default_instance_._instance.get_mutable()->misc_config_ = const_cast< ::ei::LiveConfig_MiscConfig*>(
      ::ei::LiveConfig_MiscConfig::internal_default_instance());
}
class LiveConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveConfig>()._has_bits_);
  static void set_has_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::LiveConfig_BoostsConfig& boosts_config(const LiveConfig* msg);
  static void set_has_boosts_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::LiveConfig_GiftConfig& gift_config(const LiveConfig* msg);
  static void set_has_gift_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::LiveConfig_MiscConfig& misc_config(const LiveConfig* msg);
  static void set_has_misc_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::LiveConfig_BoostsConfig&
LiveConfig::_Internal::boosts_config(const LiveConfig* msg) {
  return *msg->boosts_config_;
}
const ::ei::LiveConfig_GiftConfig&
LiveConfig::_Internal::gift_config(const LiveConfig* msg) {
  return *msg->gift_config_;
}
const ::ei::LiveConfig_MiscConfig&
LiveConfig::_Internal::misc_config(const LiveConfig* msg) {
  return *msg->misc_config_;
}
LiveConfig::LiveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LiveConfig)
}
LiveConfig::LiveConfig(const LiveConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_config_id()) {
    config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_id(),
      GetArena());
  }
  if (from._internal_has_boosts_config()) {
    boosts_config_ = new ::ei::LiveConfig_BoostsConfig(*from.boosts_config_);
  } else {
    boosts_config_ = nullptr;
  }
  if (from._internal_has_gift_config()) {
    gift_config_ = new ::ei::LiveConfig_GiftConfig(*from.gift_config_);
  } else {
    gift_config_ = nullptr;
  }
  if (from._internal_has_misc_config()) {
    misc_config_ = new ::ei::LiveConfig_MiscConfig(*from.misc_config_);
  } else {
    misc_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.LiveConfig)
}

void LiveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveConfig_ei_2eproto.base);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&boosts_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_config_) -
      reinterpret_cast<char*>(&boosts_config_)) + sizeof(misc_config_));
}

LiveConfig::~LiveConfig() {
  // @@protoc_insertion_point(destructor:ei.LiveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete boosts_config_;
  if (this != internal_default_instance()) delete gift_config_;
  if (this != internal_default_instance()) delete misc_config_;
}

void LiveConfig::ArenaDtor(void* object) {
  LiveConfig* _this = reinterpret_cast< LiveConfig* >(object);
  (void)_this;
}
void LiveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveConfig& LiveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void LiveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      config_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boosts_config_ != nullptr);
      boosts_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gift_config_ != nullptr);
      gift_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(misc_config_ != nullptr);
      misc_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string config_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.LiveConfig.config_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig.BoostsConfig boosts_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boosts_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig.GiftConfig gift_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gift_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig.MiscConfig misc_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_misc_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string config_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_id().data(), static_cast<int>(this->_internal_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.LiveConfig.config_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config_id(), target);
  }

  // optional .ei.LiveConfig.BoostsConfig boosts_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::boosts_config(this), target, stream);
  }

  // optional .ei.LiveConfig.GiftConfig gift_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gift_config(this), target, stream);
  }

  // optional .ei.LiveConfig.MiscConfig misc_config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::misc_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LiveConfig)
  return target;
}

size_t LiveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LiveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string config_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_id());
    }

    // optional .ei.LiveConfig.BoostsConfig boosts_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boosts_config_);
    }

    // optional .ei.LiveConfig.GiftConfig gift_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gift_config_);
    }

    // optional .ei.LiveConfig.MiscConfig misc_config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LiveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LiveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LiveConfig)
    MergeFrom(*source);
  }
}

void LiveConfig::MergeFrom(const LiveConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LiveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_config_id(from._internal_config_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boosts_config()->::ei::LiveConfig_BoostsConfig::MergeFrom(from._internal_boosts_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gift_config()->::ei::LiveConfig_GiftConfig::MergeFrom(from._internal_gift_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_misc_config()->::ei::LiveConfig_MiscConfig::MergeFrom(from._internal_misc_config());
    }
  }
}

void LiveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveConfig::CopyFrom(const LiveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveConfig::IsInitialized() const {
  return true;
}

void LiveConfig::InternalSwap(LiveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveConfig, misc_config_)
      + sizeof(LiveConfig::misc_config_)
      - PROTOBUF_FIELD_OFFSET(LiveConfig, boosts_config_)>(
          reinterpret_cast<char*>(&boosts_config_),
          reinterpret_cast<char*>(&other->boosts_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InGameMail::InitAsDefaultInstance() {
  ::ei::_InGameMail_default_instance_._instance.get_mutable()->image_ = const_cast< ::ei::DLCItem*>(
      ::ei::DLCItem::internal_default_instance());
}
class InGameMail::_Internal {
 public:
  using HasBits = decltype(std::declval<InGameMail>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_link(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_app_link_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ei::DLCItem& image(const InGameMail* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_mystical_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_min_piggy_breaks(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gold_tip(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tip(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_min_days_since_last_tip(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_days_until_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::DLCItem&
InGameMail::_Internal::image(const InGameMail* msg) {
  return *msg->image_;
}
InGameMail::InGameMail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  builds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.InGameMail)
}
InGameMail::InGameMail(const InGameMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      builds_(from.builds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action()) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  app_link_extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_link_extra()) {
    app_link_extra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_link_extra(),
      GetArena());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_category()) {
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category(),
      GetArena());
  }
  if (from._internal_has_image()) {
    image_ = new ::ei::DLCItem(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&gold_tip_, &from.gold_tip_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&gold_tip_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:ei.InGameMail)
}

void InGameMail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InGameMail_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_link_extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&image_)) + sizeof(priority_));
}

InGameMail::~InGameMail() {
  // @@protoc_insertion_point(destructor:ei.InGameMail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InGameMail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_link_extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void InGameMail::ArenaDtor(void* object) {
  InGameMail* _this = reinterpret_cast< InGameMail* >(object);
  (void)_this;
}
void InGameMail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InGameMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InGameMail& InGameMail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InGameMail_ei_2eproto.base);
  return *internal_default_instance();
}


void InGameMail::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.InGameMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  builds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      app_link_extra_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      category_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(image_ != nullptr);
    image_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&gold_tip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_link_) -
        reinterpret_cast<char*>(&gold_tip_)) + sizeof(app_link_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&user_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&days_until_retry_) -
        reinterpret_cast<char*>(&user_type_)) + sizeof(days_until_retry_));
  }
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InGameMail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.action");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gold_tip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_gold_tip(&has_bits);
          gold_tip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_platform(&has_bits);
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string builds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_builds();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.builds");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 min_client_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_client_version(&has_bits);
          min_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_soul_eggs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_min_soul_eggs(&has_bits);
          min_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_client_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_client_version(&has_bits);
          max_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_mystical_bonus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_min_mystical_bonus(&has_bits);
          min_mystical_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.UILocation app_link = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UILocation_IsValid(val))) {
            _internal_set_app_link(static_cast<::ei::UILocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string app_link_extra = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_app_link_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.app_link_extra");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.DLCItem image = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.UserType user_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserType_IsValid(val))) {
            _internal_set_user_type(static_cast<::ei::UserType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 min_piggy_breaks = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_piggy_breaks(&has_bits);
          min_piggy_breaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double image_width = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_image_width(&has_bits);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double image_height = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_image_height(&has_bits);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool tip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tip(&has_bits);
          tip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_days_since_last_tip = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_min_days_since_last_tip(&has_bits);
          min_days_since_last_tip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_retries = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_max_retries(&has_bits);
          max_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double days_until_retry = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_days_until_retry(&has_bits);
          days_until_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string category = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.InGameMail.category");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InGameMail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.InGameMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional string action = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional double gold_tip = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_gold_tip(), target);
  }

  // optional uint32 platform = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_platform(), target);
  }

  // optional string date = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.date");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_date(), target);
  }

  // repeated string builds = 9;
  for (int i = 0, n = this->_internal_builds_size(); i < n; i++) {
    const auto& s = this->_internal_builds(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.builds");
    target = stream->WriteString(9, s, target);
  }

  // optional uint32 min_client_version = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_client_version(), target);
  }

  // optional double min_soul_eggs = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_min_soul_eggs(), target);
  }

  // optional uint32 max_client_version = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_client_version(), target);
  }

  // optional double min_mystical_bonus = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_mystical_bonus(), target);
  }

  // optional .ei.UILocation app_link = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_app_link(), target);
  }

  // optional string app_link_extra = 15;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_link_extra().data(), static_cast<int>(this->_internal_app_link_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.app_link_extra");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_app_link_extra(), target);
  }

  // optional .ei.DLCItem image = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::image(this), target, stream);
  }

  // optional .ei.UserType user_type = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_user_type(), target);
  }

  // optional uint32 min_piggy_breaks = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_min_piggy_breaks(), target);
  }

  // optional double image_width = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_image_width(), target);
  }

  // optional double image_height = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_image_height(), target);
  }

  // optional bool tip = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_tip(), target);
  }

  // optional double min_days_since_last_tip = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_min_days_since_last_tip(), target);
  }

  // optional uint32 max_retries = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_max_retries(), target);
  }

  // optional double days_until_retry = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_days_until_retry(), target);
  }

  // optional uint32 priority = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_priority(), target);
  }

  // optional string category = 28;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.InGameMail.category");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.InGameMail)
  return target;
}

size_t InGameMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.InGameMail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string builds = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(builds_.size());
  for (int i = 0, n = builds_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      builds_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string url = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string date = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date());
    }

    // optional string app_link_extra = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_link_extra());
    }

    // optional string category = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ei.DLCItem image = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_);
    }

    // optional double gold_tip = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 platform = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform());
    }

    // optional uint32 min_client_version = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_client_version());
    }

    // optional double min_soul_eggs = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double min_mystical_bonus = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 max_client_version = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_client_version());
    }

    // optional .ei.UILocation app_link = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_app_link());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .ei.UserType user_type = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_type());
    }

    // optional uint32 min_piggy_breaks = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_piggy_breaks());
    }

    // optional double image_width = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double image_height = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double min_days_since_last_tip = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional bool tip = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 max_retries = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_retries());
    }

    // optional double days_until_retry = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional uint32 priority = 27;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InGameMail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.InGameMail)
  GOOGLE_DCHECK_NE(&from, this);
  const InGameMail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InGameMail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.InGameMail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.InGameMail)
    MergeFrom(*source);
  }
}

void InGameMail::MergeFrom(const InGameMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.InGameMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  builds_.MergeFrom(from.builds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_app_link_extra(from._internal_app_link_extra());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_category(from._internal_category());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_image()->::ei::DLCItem::MergeFrom(from._internal_image());
    }
    if (cached_has_bits & 0x00000200u) {
      gold_tip_ = from.gold_tip_;
    }
    if (cached_has_bits & 0x00000400u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_client_version_ = from.min_client_version_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_soul_eggs_ = from.min_soul_eggs_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_mystical_bonus_ = from.min_mystical_bonus_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_client_version_ = from.max_client_version_;
    }
    if (cached_has_bits & 0x00008000u) {
      app_link_ = from.app_link_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      user_type_ = from.user_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      min_piggy_breaks_ = from.min_piggy_breaks_;
    }
    if (cached_has_bits & 0x00040000u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00080000u) {
      image_height_ = from.image_height_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_days_since_last_tip_ = from.min_days_since_last_tip_;
    }
    if (cached_has_bits & 0x00200000u) {
      tip_ = from.tip_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_retries_ = from.max_retries_;
    }
    if (cached_has_bits & 0x00800000u) {
      days_until_retry_ = from.days_until_retry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_priority(from._internal_priority());
  }
}

void InGameMail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.InGameMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InGameMail::CopyFrom(const InGameMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.InGameMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InGameMail::IsInitialized() const {
  return true;
}

void InGameMail::InternalSwap(InGameMail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  builds_.InternalSwap(&other->builds_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_link_extra_.Swap(&other->app_link_extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InGameMail, priority_)
      + sizeof(InGameMail::priority_)
      - PROTOBUF_FIELD_OFFSET(InGameMail, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InGameMail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MailDB::InitAsDefaultInstance() {
}
class MailDB::_Internal {
 public:
  using HasBits = decltype(std::declval<MailDB>()._has_bits_);
  static void set_has_tips_db_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tips_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MailDB::MailDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MailDB)
}
MailDB::MailDB(const MailDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mail_(from.mail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tips_db_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tips_db_data()) {
    tips_db_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tips_db_data(),
      GetArena());
  }
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tips_checksum()) {
    tips_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tips_checksum(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.MailDB)
}

void MailDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MailDB_ei_2eproto.base);
  tips_db_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MailDB::~MailDB() {
  // @@protoc_insertion_point(destructor:ei.MailDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tips_db_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tips_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailDB::ArenaDtor(void* object) {
  MailDB* _this = reinterpret_cast< MailDB* >(object);
  (void)_this;
}
void MailDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MailDB& MailDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MailDB_ei_2eproto.base);
  return *internal_default_instance();
}


void MailDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MailDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tips_db_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tips_checksum_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.InGameMail mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes tips_db_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tips_db_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tips_checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tips_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MailDB.tips_checksum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MailDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.InGameMail mail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mail(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes tips_db_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tips_db_data(), target);
  }

  // optional string tips_checksum = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tips_checksum().data(), static_cast<int>(this->_internal_tips_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MailDB.tips_checksum");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tips_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MailDB)
  return target;
}

size_t MailDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MailDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.InGameMail mail = 1;
  total_size += 1UL * this->_internal_mail_size();
  for (const auto& msg : this->mail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes tips_db_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tips_db_data());
    }

    // optional string tips_checksum = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tips_checksum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MailDB)
  GOOGLE_DCHECK_NE(&from, this);
  const MailDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MailDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MailDB)
    MergeFrom(*source);
  }
}

void MailDB::MergeFrom(const MailDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MailDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mail_.MergeFrom(from.mail_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tips_db_data(from._internal_tips_db_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tips_checksum(from._internal_tips_checksum());
    }
  }
}

void MailDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MailDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDB::CopyFrom(const MailDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MailDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDB::IsInitialized() const {
  return true;
}

void MailDB::InternalSwap(MailDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mail_.InternalSwap(&other->mail_);
  tips_db_data_.Swap(&other->tips_db_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tips_checksum_.Swap(&other->tips_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MailDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TipsDB::InitAsDefaultInstance() {
}
class TipsDB::_Internal {
 public:
};

TipsDB::TipsDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.TipsDB)
}
TipsDB::TipsDB(const TipsDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.TipsDB)
}

void TipsDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TipsDB_ei_2eproto.base);
}

TipsDB::~TipsDB() {
  // @@protoc_insertion_point(destructor:ei.TipsDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TipsDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TipsDB::ArenaDtor(void* object) {
  TipsDB* _this = reinterpret_cast< TipsDB* >(object);
  (void)_this;
}
void TipsDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TipsDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TipsDB& TipsDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TipsDB_ei_2eproto.base);
  return *internal_default_instance();
}


void TipsDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.TipsDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TipsDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.InGameMail tips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TipsDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.TipsDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.InGameMail tips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.TipsDB)
  return target;
}

size_t TipsDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.TipsDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.InGameMail tips = 1;
  total_size += 1UL * this->_internal_tips_size();
  for (const auto& msg : this->tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TipsDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.TipsDB)
  GOOGLE_DCHECK_NE(&from, this);
  const TipsDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TipsDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.TipsDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.TipsDB)
    MergeFrom(*source);
  }
}

void TipsDB::MergeFrom(const TipsDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.TipsDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
}

void TipsDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.TipsDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TipsDB::CopyFrom(const TipsDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.TipsDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TipsDB::IsInitialized() const {
  return true;
}

void TipsDB::InternalSwap(TipsDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tips_.InternalSwap(&other->tips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TipsDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MailState_TipState::InitAsDefaultInstance() {
}
class MailState_TipState::_Internal {
 public:
  using HasBits = decltype(std::declval<MailState_TipState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reads(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_read(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MailState_TipState::MailState_TipState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MailState.TipState)
}
MailState_TipState::MailState_TipState(const MailState_TipState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&time_read_, &from.time_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&reads_) -
    reinterpret_cast<char*>(&time_read_)) + sizeof(reads_));
  // @@protoc_insertion_point(copy_constructor:ei.MailState.TipState)
}

void MailState_TipState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MailState_TipState_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reads_) -
      reinterpret_cast<char*>(&time_read_)) + sizeof(reads_));
}

MailState_TipState::~MailState_TipState() {
  // @@protoc_insertion_point(destructor:ei.MailState.TipState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailState_TipState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailState_TipState::ArenaDtor(void* object) {
  MailState_TipState* _this = reinterpret_cast< MailState_TipState* >(object);
  (void)_this;
}
void MailState_TipState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailState_TipState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MailState_TipState& MailState_TipState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MailState_TipState_ei_2eproto.base);
  return *internal_default_instance();
}


void MailState_TipState::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MailState.TipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&time_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reads_) -
        reinterpret_cast<char*>(&time_read_)) + sizeof(reads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailState_TipState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MailState.TipState.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reads(&has_bits);
          reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_read = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_time_read(&has_bits);
          time_read_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailState_TipState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MailState.TipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MailState.TipState.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 reads = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reads(), target);
  }

  // optional double time_read = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MailState.TipState)
  return target;
}

size_t MailState_TipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MailState.TipState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double time_read = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 reads = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reads());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailState_TipState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MailState.TipState)
  GOOGLE_DCHECK_NE(&from, this);
  const MailState_TipState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailState_TipState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MailState.TipState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MailState.TipState)
    MergeFrom(*source);
  }
}

void MailState_TipState::MergeFrom(const MailState_TipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MailState.TipState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      time_read_ = from.time_read_;
    }
    if (cached_has_bits & 0x00000004u) {
      reads_ = from.reads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MailState_TipState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MailState.TipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailState_TipState::CopyFrom(const MailState_TipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MailState.TipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailState_TipState::IsInitialized() const {
  return true;
}

void MailState_TipState::InternalSwap(MailState_TipState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailState_TipState, reads_)
      + sizeof(MailState_TipState::reads_)
      - PROTOBUF_FIELD_OFFSET(MailState_TipState, time_read_)>(
          reinterpret_cast<char*>(&time_read_),
          reinterpret_cast<char*>(&other->time_read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailState_TipState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MailState::InitAsDefaultInstance() {
}
class MailState::_Internal {
 public:
  using HasBits = decltype(std::declval<MailState>()._has_bits_);
  static void set_has_tips_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MailState::MailState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  read_mail_ids_(arena),
  tips_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MailState)
}
MailState::MailState(const MailState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      read_mail_ids_(from.read_mail_ids_),
      tips_states_(from.tips_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tips_checksum()) {
    tips_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tips_checksum(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.MailState)
}

void MailState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MailState_ei_2eproto.base);
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MailState::~MailState() {
  // @@protoc_insertion_point(destructor:ei.MailState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tips_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailState::ArenaDtor(void* object) {
  MailState* _this = reinterpret_cast< MailState* >(object);
  (void)_this;
}
void MailState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MailState& MailState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MailState_ei_2eproto.base);
  return *internal_default_instance();
}


void MailState::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MailState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_mail_ids_.Clear();
  tips_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tips_checksum_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string read_mail_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_read_mail_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MailState.read_mail_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.MailState.TipState tips_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string tips_checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tips_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MailState.tips_checksum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MailState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_mail_ids = 1;
  for (int i = 0, n = this->_internal_read_mail_ids_size(); i < n; i++) {
    const auto& s = this->_internal_read_mail_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MailState.read_mail_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated .ei.MailState.TipState tips_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tips_states(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string tips_checksum = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tips_checksum().data(), static_cast<int>(this->_internal_tips_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MailState.tips_checksum");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tips_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MailState)
  return target;
}

size_t MailState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MailState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string read_mail_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(read_mail_ids_.size());
  for (int i = 0, n = read_mail_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      read_mail_ids_.Get(i));
  }

  // repeated .ei.MailState.TipState tips_states = 2;
  total_size += 1UL * this->_internal_tips_states_size();
  for (const auto& msg : this->tips_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string tips_checksum = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tips_checksum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MailState)
  GOOGLE_DCHECK_NE(&from, this);
  const MailState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MailState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MailState)
    MergeFrom(*source);
  }
}

void MailState::MergeFrom(const MailState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MailState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_mail_ids_.MergeFrom(from.read_mail_ids_);
  tips_states_.MergeFrom(from.tips_states_);
  if (from._internal_has_tips_checksum()) {
    _internal_set_tips_checksum(from._internal_tips_checksum());
  }
}

void MailState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MailState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailState::CopyFrom(const MailState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MailState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailState::IsInitialized() const {
  return true;
}

void MailState::InternalSwap(MailState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  read_mail_ids_.InternalSwap(&other->read_mail_ids_);
  tips_states_.InternalSwap(&other->tips_states_);
  tips_checksum_.Swap(&other->tips_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MailState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeriodicalsResponse_RoyaltyInfo::InitAsDefaultInstance() {
}
class PeriodicalsResponse_RoyaltyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicalsResponse_RoyaltyInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PeriodicalsResponse_RoyaltyInfo::PeriodicalsResponse_RoyaltyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.PeriodicalsResponse.RoyaltyInfo)
}
PeriodicalsResponse_RoyaltyInfo::PeriodicalsResponse_RoyaltyInfo(const PeriodicalsResponse_RoyaltyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:ei.PeriodicalsResponse.RoyaltyInfo)
}

void PeriodicalsResponse_RoyaltyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = 0u;
}

PeriodicalsResponse_RoyaltyInfo::~PeriodicalsResponse_RoyaltyInfo() {
  // @@protoc_insertion_point(destructor:ei.PeriodicalsResponse.RoyaltyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeriodicalsResponse_RoyaltyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeriodicalsResponse_RoyaltyInfo::ArenaDtor(void* object) {
  PeriodicalsResponse_RoyaltyInfo* _this = reinterpret_cast< PeriodicalsResponse_RoyaltyInfo* >(object);
  (void)_this;
}
void PeriodicalsResponse_RoyaltyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeriodicalsResponse_RoyaltyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodicalsResponse_RoyaltyInfo& PeriodicalsResponse_RoyaltyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodicalsResponse_RoyaltyInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void PeriodicalsResponse_RoyaltyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.PeriodicalsResponse.RoyaltyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodicalsResponse_RoyaltyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.PeriodicalsResponse.RoyaltyInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeriodicalsResponse_RoyaltyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.PeriodicalsResponse.RoyaltyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.PeriodicalsResponse.RoyaltyInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.PeriodicalsResponse.RoyaltyInfo)
  return target;
}

size_t PeriodicalsResponse_RoyaltyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.PeriodicalsResponse.RoyaltyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint32 amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodicalsResponse_RoyaltyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.PeriodicalsResponse.RoyaltyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeriodicalsResponse_RoyaltyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeriodicalsResponse_RoyaltyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.PeriodicalsResponse.RoyaltyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.PeriodicalsResponse.RoyaltyInfo)
    MergeFrom(*source);
  }
}

void PeriodicalsResponse_RoyaltyInfo::MergeFrom(const PeriodicalsResponse_RoyaltyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.PeriodicalsResponse.RoyaltyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeriodicalsResponse_RoyaltyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.PeriodicalsResponse.RoyaltyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodicalsResponse_RoyaltyInfo::CopyFrom(const PeriodicalsResponse_RoyaltyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.PeriodicalsResponse.RoyaltyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicalsResponse_RoyaltyInfo::IsInitialized() const {
  return true;
}

void PeriodicalsResponse_RoyaltyInfo::InternalSwap(PeriodicalsResponse_RoyaltyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodicalsResponse_RoyaltyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeriodicalsResponse::InitAsDefaultInstance() {
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->sales_ = const_cast< ::ei::SalesInfo*>(
      ::ei::SalesInfo::internal_default_instance());
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->events_ = const_cast< ::ei::EggIncCurrentEvents*>(
      ::ei::EggIncCurrentEvents::internal_default_instance());
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->contracts_ = const_cast< ::ei::ContractsResponse*>(
      ::ei::ContractsResponse::internal_default_instance());
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->live_config_ = const_cast< ::ei::LiveConfig*>(
      ::ei::LiveConfig::internal_default_instance());
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->mail_bag_ = const_cast< ::ei::MailDB*>(
      ::ei::MailDB::internal_default_instance());
  ::ei::_PeriodicalsResponse_default_instance_._instance.get_mutable()->contract_player_info_ = const_cast< ::ei::ContractPlayerInfo*>(
      ::ei::ContractPlayerInfo::internal_default_instance());
}
class PeriodicalsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicalsResponse>()._has_bits_);
  static const ::ei::SalesInfo& sales(const PeriodicalsResponse* msg);
  static void set_has_sales(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::EggIncCurrentEvents& events(const PeriodicalsResponse* msg);
  static void set_has_events(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::ContractsResponse& contracts(const PeriodicalsResponse* msg);
  static void set_has_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::LiveConfig& live_config(const PeriodicalsResponse* msg);
  static void set_has_live_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ei::MailDB& mail_bag(const PeriodicalsResponse* msg);
  static void set_has_mail_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ei::ContractPlayerInfo& contract_player_info(const PeriodicalsResponse* msg);
  static void set_has_contract_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::SalesInfo&
PeriodicalsResponse::_Internal::sales(const PeriodicalsResponse* msg) {
  return *msg->sales_;
}
const ::ei::EggIncCurrentEvents&
PeriodicalsResponse::_Internal::events(const PeriodicalsResponse* msg) {
  return *msg->events_;
}
const ::ei::ContractsResponse&
PeriodicalsResponse::_Internal::contracts(const PeriodicalsResponse* msg) {
  return *msg->contracts_;
}
const ::ei::LiveConfig&
PeriodicalsResponse::_Internal::live_config(const PeriodicalsResponse* msg) {
  return *msg->live_config_;
}
const ::ei::MailDB&
PeriodicalsResponse::_Internal::mail_bag(const PeriodicalsResponse* msg) {
  return *msg->mail_bag_;
}
const ::ei::ContractPlayerInfo&
PeriodicalsResponse::_Internal::contract_player_info(const PeriodicalsResponse* msg) {
  return *msg->contract_player_info_;
}
PeriodicalsResponse::PeriodicalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gifts_(arena),
  evaluations_(arena),
  artifact_cases_(arena),
  showcase_royalties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.PeriodicalsResponse)
}
PeriodicalsResponse::PeriodicalsResponse(const PeriodicalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gifts_(from.gifts_),
      evaluations_(from.evaluations_),
      artifact_cases_(from.artifact_cases_),
      showcase_royalties_(from.showcase_royalties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sales()) {
    sales_ = new ::ei::SalesInfo(*from.sales_);
  } else {
    sales_ = nullptr;
  }
  if (from._internal_has_events()) {
    events_ = new ::ei::EggIncCurrentEvents(*from.events_);
  } else {
    events_ = nullptr;
  }
  if (from._internal_has_contracts()) {
    contracts_ = new ::ei::ContractsResponse(*from.contracts_);
  } else {
    contracts_ = nullptr;
  }
  if (from._internal_has_live_config()) {
    live_config_ = new ::ei::LiveConfig(*from.live_config_);
  } else {
    live_config_ = nullptr;
  }
  if (from._internal_has_mail_bag()) {
    mail_bag_ = new ::ei::MailDB(*from.mail_bag_);
  } else {
    mail_bag_ = nullptr;
  }
  if (from._internal_has_contract_player_info()) {
    contract_player_info_ = new ::ei::ContractPlayerInfo(*from.contract_player_info_);
  } else {
    contract_player_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.PeriodicalsResponse)
}

void PeriodicalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeriodicalsResponse_ei_2eproto.base);
  ::memset(&sales_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contract_player_info_) -
      reinterpret_cast<char*>(&sales_)) + sizeof(contract_player_info_));
}

PeriodicalsResponse::~PeriodicalsResponse() {
  // @@protoc_insertion_point(destructor:ei.PeriodicalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeriodicalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sales_;
  if (this != internal_default_instance()) delete events_;
  if (this != internal_default_instance()) delete contracts_;
  if (this != internal_default_instance()) delete live_config_;
  if (this != internal_default_instance()) delete mail_bag_;
  if (this != internal_default_instance()) delete contract_player_info_;
}

void PeriodicalsResponse::ArenaDtor(void* object) {
  PeriodicalsResponse* _this = reinterpret_cast< PeriodicalsResponse* >(object);
  (void)_this;
}
void PeriodicalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeriodicalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodicalsResponse& PeriodicalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodicalsResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void PeriodicalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.PeriodicalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gifts_.Clear();
  evaluations_.Clear();
  artifact_cases_.Clear();
  showcase_royalties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sales_ != nullptr);
      sales_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(events_ != nullptr);
      events_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(contracts_ != nullptr);
      contracts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(live_config_ != nullptr);
      live_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(mail_bag_ != nullptr);
      mail_bag_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(contract_player_info_ != nullptr);
      contract_player_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodicalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.SalesInfo sales = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sales(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.EggIncCurrentEvents events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractsResponse contracts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contracts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ServerGift gifts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gifts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.LiveConfig live_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MailDB mail_bag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_bag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ContractPlayerInfo contract_player_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ContractEvaluation evaluations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evaluations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.CompleteMissionResponse artifact_cases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifact_cases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.PeriodicalsResponse.RoyaltyInfo showcase_royalties = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_showcase_royalties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeriodicalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.PeriodicalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.SalesInfo sales = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sales(this), target, stream);
  }

  // optional .ei.EggIncCurrentEvents events = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::events(this), target, stream);
  }

  // optional .ei.ContractsResponse contracts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::contracts(this), target, stream);
  }

  // repeated .ei.ServerGift gifts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gifts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_gifts(i), target, stream);
  }

  // optional .ei.LiveConfig live_config = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::live_config(this), target, stream);
  }

  // optional .ei.MailDB mail_bag = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mail_bag(this), target, stream);
  }

  // optional .ei.ContractPlayerInfo contract_player_info = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::contract_player_info(this), target, stream);
  }

  // repeated .ei.ContractEvaluation evaluations = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evaluations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_evaluations(i), target, stream);
  }

  // repeated .ei.CompleteMissionResponse artifact_cases = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artifact_cases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_artifact_cases(i), target, stream);
  }

  // repeated .ei.PeriodicalsResponse.RoyaltyInfo showcase_royalties = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_showcase_royalties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_showcase_royalties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.PeriodicalsResponse)
  return target;
}

size_t PeriodicalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.PeriodicalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ServerGift gifts = 4;
  total_size += 1UL * this->_internal_gifts_size();
  for (const auto& msg : this->gifts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ContractEvaluation evaluations = 8;
  total_size += 1UL * this->_internal_evaluations_size();
  for (const auto& msg : this->evaluations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.CompleteMissionResponse artifact_cases = 9;
  total_size += 1UL * this->_internal_artifact_cases_size();
  for (const auto& msg : this->artifact_cases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.PeriodicalsResponse.RoyaltyInfo showcase_royalties = 10;
  total_size += 1UL * this->_internal_showcase_royalties_size();
  for (const auto& msg : this->showcase_royalties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ei.SalesInfo sales = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sales_);
    }

    // optional .ei.EggIncCurrentEvents events = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *events_);
    }

    // optional .ei.ContractsResponse contracts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contracts_);
    }

    // optional .ei.LiveConfig live_config = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *live_config_);
    }

    // optional .ei.MailDB mail_bag = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mail_bag_);
    }

    // optional .ei.ContractPlayerInfo contract_player_info = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_player_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodicalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.PeriodicalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeriodicalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeriodicalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.PeriodicalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.PeriodicalsResponse)
    MergeFrom(*source);
  }
}

void PeriodicalsResponse::MergeFrom(const PeriodicalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.PeriodicalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gifts_.MergeFrom(from.gifts_);
  evaluations_.MergeFrom(from.evaluations_);
  artifact_cases_.MergeFrom(from.artifact_cases_);
  showcase_royalties_.MergeFrom(from.showcase_royalties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sales()->::ei::SalesInfo::MergeFrom(from._internal_sales());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_events()->::ei::EggIncCurrentEvents::MergeFrom(from._internal_events());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_contracts()->::ei::ContractsResponse::MergeFrom(from._internal_contracts());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_live_config()->::ei::LiveConfig::MergeFrom(from._internal_live_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_mail_bag()->::ei::MailDB::MergeFrom(from._internal_mail_bag());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_contract_player_info()->::ei::ContractPlayerInfo::MergeFrom(from._internal_contract_player_info());
    }
  }
}

void PeriodicalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.PeriodicalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodicalsResponse::CopyFrom(const PeriodicalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.PeriodicalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicalsResponse::IsInitialized() const {
  return true;
}

void PeriodicalsResponse::InternalSwap(PeriodicalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gifts_.InternalSwap(&other->gifts_);
  evaluations_.InternalSwap(&other->evaluations_);
  artifact_cases_.InternalSwap(&other->artifact_cases_);
  showcase_royalties_.InternalSwap(&other->showcase_royalties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodicalsResponse, contract_player_info_)
      + sizeof(PeriodicalsResponse::contract_player_info_)
      - PROTOBUF_FIELD_OFFSET(PeriodicalsResponse, sales_)>(
          reinterpret_cast<char*>(&sales_),
          reinterpret_cast<char*>(&other->sales_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodicalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeriodicalsRequest::InitAsDefaultInstance() {
  ::ei::_GetPeriodicalsRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class GetPeriodicalsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPeriodicalsRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const GetPeriodicalsRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_piggy_full(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_piggy_found_full(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_seconds_full_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_full_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lost_increments(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mystical_earnings_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_contracts_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_artifacts_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_current_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::ei::BasicRequestInfo&
GetPeriodicalsRequest::_Internal::rinfo(const GetPeriodicalsRequest* msg) {
  return *msg->rinfo_;
}
GetPeriodicalsRequest::GetPeriodicalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.GetPeriodicalsRequest)
}
GetPeriodicalsRequest::GetPeriodicalsRequest(const GetPeriodicalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&seconds_full_realtime_, &from.seconds_full_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&eop_) -
    reinterpret_cast<char*>(&seconds_full_realtime_)) + sizeof(eop_));
  // @@protoc_insertion_point(copy_constructor:ei.GetPeriodicalsRequest)
}

void GetPeriodicalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeriodicalsRequest_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eop_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(eop_));
}

GetPeriodicalsRequest::~GetPeriodicalsRequest() {
  // @@protoc_insertion_point(destructor:ei.GetPeriodicalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPeriodicalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void GetPeriodicalsRequest::ArenaDtor(void* object) {
  GetPeriodicalsRequest* _this = reinterpret_cast< GetPeriodicalsRequest* >(object);
  (void)_this;
}
void GetPeriodicalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPeriodicalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeriodicalsRequest& GetPeriodicalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeriodicalsRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void GetPeriodicalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.GetPeriodicalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seconds_full_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&piggy_found_full_) -
        reinterpret_cast<char*>(&seconds_full_realtime_)) + sizeof(piggy_found_full_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&contracts_unlocked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eop_) -
        reinterpret_cast<char*>(&contracts_unlocked_)) + sizeof(eop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeriodicalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.GetPeriodicalsRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_piggy_full(&has_bits);
          piggy_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool piggy_found_full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_piggy_found_full(&has_bits);
          piggy_found_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_full_realtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_seconds_full_realtime(&has_bits);
          seconds_full_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_full_gametime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_seconds_full_gametime(&has_bits);
          seconds_full_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 lost_increments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lost_increments(&has_bits);
          lost_increments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 current_client_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_current_client_version(&has_bits);
          current_client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mystical_earnings_mult = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_mystical_earnings_mult(&has_bits);
          mystical_earnings_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 eop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_eop(&has_bits);
          eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_unlocked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_contracts_unlocked(&has_bits);
          contracts_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool artifacts_unlocked = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_artifacts_unlocked(&has_bits);
          artifacts_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeriodicalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.GetPeriodicalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.GetPeriodicalsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional bool piggy_full = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_piggy_full(), target);
  }

  // optional bool piggy_found_full = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_piggy_found_full(), target);
  }

  // optional double seconds_full_realtime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_seconds_full_realtime(), target);
  }

  // optional double seconds_full_gametime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_full_gametime(), target);
  }

  // optional uint32 lost_increments = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lost_increments(), target);
  }

  // optional double soul_eggs = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_soul_eggs(), target);
  }

  // optional uint32 current_client_version = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_client_version(), target);
  }

  // optional bool debug = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_debug(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rinfo(this), target, stream);
  }

  // optional double mystical_earnings_mult = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_mystical_earnings_mult(), target);
  }

  // optional uint32 eop = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_eop(), target);
  }

  // optional bool contracts_unlocked = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_contracts_unlocked(), target);
  }

  // optional bool artifacts_unlocked = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_artifacts_unlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.GetPeriodicalsRequest)
  return target;
}

size_t GetPeriodicalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.GetPeriodicalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional double seconds_full_realtime = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double seconds_full_gametime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double soul_eggs = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 lost_increments = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lost_increments());
    }

    // optional bool piggy_full = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool piggy_found_full = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool contracts_unlocked = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool artifacts_unlocked = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional uint32 current_client_version = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_client_version());
    }

    // optional bool debug = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional double mystical_earnings_mult = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional uint32 eop = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eop());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeriodicalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.GetPeriodicalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeriodicalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeriodicalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.GetPeriodicalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.GetPeriodicalsRequest)
    MergeFrom(*source);
  }
}

void GetPeriodicalsRequest::MergeFrom(const GetPeriodicalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.GetPeriodicalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_full_realtime_ = from.seconds_full_realtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_full_gametime_ = from.seconds_full_gametime_;
    }
    if (cached_has_bits & 0x00000010u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000020u) {
      lost_increments_ = from.lost_increments_;
    }
    if (cached_has_bits & 0x00000040u) {
      piggy_full_ = from.piggy_full_;
    }
    if (cached_has_bits & 0x00000080u) {
      piggy_found_full_ = from.piggy_found_full_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      contracts_unlocked_ = from.contracts_unlocked_;
    }
    if (cached_has_bits & 0x00000200u) {
      artifacts_unlocked_ = from.artifacts_unlocked_;
    }
    if (cached_has_bits & 0x00000400u) {
      current_client_version_ = from.current_client_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      debug_ = from.debug_;
    }
    if (cached_has_bits & 0x00001000u) {
      mystical_earnings_mult_ = from.mystical_earnings_mult_;
    }
    if (cached_has_bits & 0x00002000u) {
      eop_ = from.eop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPeriodicalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.GetPeriodicalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeriodicalsRequest::CopyFrom(const GetPeriodicalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.GetPeriodicalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeriodicalsRequest::IsInitialized() const {
  return true;
}

void GetPeriodicalsRequest::InternalSwap(GetPeriodicalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPeriodicalsRequest, eop_)
      + sizeof(GetPeriodicalsRequest::eop_)
      - PROTOBUF_FIELD_OFFSET(GetPeriodicalsRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeriodicalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigRequest::InitAsDefaultInstance() {
  ::ei::_ConfigRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ConfigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ConfigRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contracts_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_artifacts_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fuel_tank_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pro_permit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ultra(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tips_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::BasicRequestInfo&
ConfigRequest::_Internal::rinfo(const ConfigRequest* msg) {
  return *msg->rinfo_;
}
ConfigRequest::ConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ConfigRequest)
}
ConfigRequest::ConfigRequest(const ConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tips_checksum()) {
    tips_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tips_checksum(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&soul_eggs_, &from.soul_eggs_,
    static_cast<size_t>(reinterpret_cast<char*>(&ultra_) -
    reinterpret_cast<char*>(&soul_eggs_)) + sizeof(ultra_));
  // @@protoc_insertion_point(copy_constructor:ei.ConfigRequest)
}

void ConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigRequest_ei_2eproto.base);
  tips_checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ultra_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(ultra_));
}

ConfigRequest::~ConfigRequest() {
  // @@protoc_insertion_point(destructor:ei.ConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tips_checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void ConfigRequest::ArenaDtor(void* object) {
  ConfigRequest* _this = reinterpret_cast< ConfigRequest* >(object);
  (void)_this;
}
void ConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigRequest& ConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tips_checksum_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&soul_eggs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultra_) -
        reinterpret_cast<char*>(&soul_eggs_)) + sizeof(ultra_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool artifacts_unlocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_artifacts_unlocked(&has_bits);
          artifacts_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fuel_tank_unlocked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fuel_tank_unlocked(&has_bits);
          fuel_tank_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contracts_unlocked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contracts_unlocked(&has_bits);
          contracts_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pro_permit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pro_permit(&has_bits);
          pro_permit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ultra = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ultra(&has_bits);
          ultra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tips_checksum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_tips_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ConfigRequest.tips_checksum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // optional double soul_eggs = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_soul_eggs(), target);
  }

  // optional bool artifacts_unlocked = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_artifacts_unlocked(), target);
  }

  // optional bool fuel_tank_unlocked = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fuel_tank_unlocked(), target);
  }

  // optional bool contracts_unlocked = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_contracts_unlocked(), target);
  }

  // optional bool pro_permit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pro_permit(), target);
  }

  // optional bool ultra = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ultra(), target);
  }

  // optional string tips_checksum = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tips_checksum().data(), static_cast<int>(this->_internal_tips_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ConfigRequest.tips_checksum");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_tips_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ConfigRequest)
  return target;
}

size_t ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tips_checksum = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tips_checksum());
    }

    // optional .ei.BasicRequestInfo rinfo = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional double soul_eggs = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool contracts_unlocked = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool artifacts_unlocked = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool fuel_tank_unlocked = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool pro_permit = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ultra = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ConfigRequest)
    MergeFrom(*source);
  }
}

void ConfigRequest::MergeFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tips_checksum(from._internal_tips_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000008u) {
      contracts_unlocked_ = from.contracts_unlocked_;
    }
    if (cached_has_bits & 0x00000010u) {
      artifacts_unlocked_ = from.artifacts_unlocked_;
    }
    if (cached_has_bits & 0x00000020u) {
      fuel_tank_unlocked_ = from.fuel_tank_unlocked_;
    }
    if (cached_has_bits & 0x00000040u) {
      pro_permit_ = from.pro_permit_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultra_ = from.ultra_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRequest::CopyFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRequest::IsInitialized() const {
  return true;
}

void ConfigRequest::InternalSwap(ConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tips_checksum_.Swap(&other->tips_checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigRequest, ultra_)
      + sizeof(ConfigRequest::ultra_)
      - PROTOBUF_FIELD_OFFSET(ConfigRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigResponse::InitAsDefaultInstance() {
  ::ei::_ConfigResponse_default_instance_._instance.get_mutable()->live_config_ = const_cast< ::ei::LiveConfig*>(
      ::ei::LiveConfig::internal_default_instance());
  ::ei::_ConfigResponse_default_instance_._instance.get_mutable()->mail_bag_ = const_cast< ::ei::MailDB*>(
      ::ei::MailDB::internal_default_instance());
  ::ei::_ConfigResponse_default_instance_._instance.get_mutable()->dlc_catalog_ = const_cast< ::ei::DLCCatalog*>(
      ::ei::DLCCatalog::internal_default_instance());
}
class ConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigResponse>()._has_bits_);
  static const ::ei::LiveConfig& live_config(const ConfigResponse* msg);
  static void set_has_live_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::MailDB& mail_bag(const ConfigResponse* msg);
  static void set_has_mail_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::DLCCatalog& dlc_catalog(const ConfigResponse* msg);
  static void set_has_dlc_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::LiveConfig&
ConfigResponse::_Internal::live_config(const ConfigResponse* msg) {
  return *msg->live_config_;
}
const ::ei::MailDB&
ConfigResponse::_Internal::mail_bag(const ConfigResponse* msg) {
  return *msg->mail_bag_;
}
const ::ei::DLCCatalog&
ConfigResponse::_Internal::dlc_catalog(const ConfigResponse* msg) {
  return *msg->dlc_catalog_;
}
ConfigResponse::ConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ConfigResponse)
}
ConfigResponse::ConfigResponse(const ConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_live_config()) {
    live_config_ = new ::ei::LiveConfig(*from.live_config_);
  } else {
    live_config_ = nullptr;
  }
  if (from._internal_has_mail_bag()) {
    mail_bag_ = new ::ei::MailDB(*from.mail_bag_);
  } else {
    mail_bag_ = nullptr;
  }
  if (from._internal_has_dlc_catalog()) {
    dlc_catalog_ = new ::ei::DLCCatalog(*from.dlc_catalog_);
  } else {
    dlc_catalog_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.ConfigResponse)
}

void ConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigResponse_ei_2eproto.base);
  ::memset(&live_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlc_catalog_) -
      reinterpret_cast<char*>(&live_config_)) + sizeof(dlc_catalog_));
}

ConfigResponse::~ConfigResponse() {
  // @@protoc_insertion_point(destructor:ei.ConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete live_config_;
  if (this != internal_default_instance()) delete mail_bag_;
  if (this != internal_default_instance()) delete dlc_catalog_;
}

void ConfigResponse::ArenaDtor(void* object) {
  ConfigResponse* _this = reinterpret_cast< ConfigResponse* >(object);
  (void)_this;
}
void ConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigResponse& ConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(live_config_ != nullptr);
      live_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mail_bag_ != nullptr);
      mail_bag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dlc_catalog_ != nullptr);
      dlc_catalog_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.LiveConfig live_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MailDB mail_bag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_bag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.DLCCatalog dlc_catalog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlc_catalog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.LiveConfig live_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::live_config(this), target, stream);
  }

  // optional .ei.MailDB mail_bag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail_bag(this), target, stream);
  }

  // optional .ei.DLCCatalog dlc_catalog = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dlc_catalog(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ConfigResponse)
  return target;
}

size_t ConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ei.LiveConfig live_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *live_config_);
    }

    // optional .ei.MailDB mail_bag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mail_bag_);
    }

    // optional .ei.DLCCatalog dlc_catalog = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dlc_catalog_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ConfigResponse)
    MergeFrom(*source);
  }
}

void ConfigResponse::MergeFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_live_config()->::ei::LiveConfig::MergeFrom(from._internal_live_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mail_bag()->::ei::MailDB::MergeFrom(from._internal_mail_bag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dlc_catalog()->::ei::DLCCatalog::MergeFrom(from._internal_dlc_catalog());
    }
  }
}

void ConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigResponse::CopyFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResponse::IsInitialized() const {
  return true;
}

void ConfigResponse::InternalSwap(ConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigResponse, dlc_catalog_)
      + sizeof(ConfigResponse::dlc_catalog_)
      - PROTOBUF_FIELD_OFFSET(ConfigResponse, live_config_)>(
          reinterpret_cast<char*>(&live_config_),
          reinterpret_cast<char*>(&other->live_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdAttributionRawData::InitAsDefaultInstance() {
}
class AdAttributionRawData::_Internal {
 public:
  using HasBits = decltype(std::declval<AdAttributionRawData>()._has_bits_);
  static void set_has_device_ad_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ad_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_json_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdAttributionRawData::AdAttributionRawData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AdAttributionRawData)
}
AdAttributionRawData::AdAttributionRawData(const AdAttributionRawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_ad_id()) {
    device_ad_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_ad_id(),
      GetArena());
  }
  ad_network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ad_network()) {
    ad_network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ad_network(),
      GetArena());
  }
  json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json_data()) {
    json_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_data(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.AdAttributionRawData)
}

void AdAttributionRawData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdAttributionRawData_ei_2eproto.base);
  device_ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdAttributionRawData::~AdAttributionRawData() {
  // @@protoc_insertion_point(destructor:ei.AdAttributionRawData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdAttributionRawData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_ad_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdAttributionRawData::ArenaDtor(void* object) {
  AdAttributionRawData* _this = reinterpret_cast< AdAttributionRawData* >(object);
  (void)_this;
}
void AdAttributionRawData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdAttributionRawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdAttributionRawData& AdAttributionRawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdAttributionRawData_ei_2eproto.base);
  return *internal_default_instance();
}


void AdAttributionRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AdAttributionRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      device_ad_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ad_network_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      json_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdAttributionRawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_ad_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_ad_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRawData.device_ad_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ad_network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ad_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRawData.ad_network");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string json_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_json_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRawData.json_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRawData.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdAttributionRawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AdAttributionRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_ad_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_ad_id().data(), static_cast<int>(this->_internal_device_ad_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRawData.device_ad_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_ad_id(), target);
  }

  // optional string ad_network = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ad_network().data(), static_cast<int>(this->_internal_ad_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRawData.ad_network");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ad_network(), target);
  }

  // optional string json_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_data().data(), static_cast<int>(this->_internal_json_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRawData.json_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_json_data(), target);
  }

  // optional string user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRawData.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AdAttributionRawData)
  return target;
}

size_t AdAttributionRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AdAttributionRawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string device_ad_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_ad_id());
    }

    // optional string ad_network = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ad_network());
    }

    // optional string json_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_data());
    }

    // optional string user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdAttributionRawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AdAttributionRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const AdAttributionRawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdAttributionRawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AdAttributionRawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AdAttributionRawData)
    MergeFrom(*source);
  }
}

void AdAttributionRawData::MergeFrom(const AdAttributionRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AdAttributionRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_ad_id(from._internal_device_ad_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ad_network(from._internal_ad_network());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_json_data(from._internal_json_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
}

void AdAttributionRawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AdAttributionRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdAttributionRawData::CopyFrom(const AdAttributionRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AdAttributionRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdAttributionRawData::IsInitialized() const {
  return true;
}

void AdAttributionRawData::InternalSwap(AdAttributionRawData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_ad_id_.Swap(&other->device_ad_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ad_network_.Swap(&other->ad_network_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_data_.Swap(&other->json_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdAttributionRawData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdAttributionRow::InitAsDefaultInstance() {
}
class AdAttributionRow::_Internal {
 public:
  using HasBits = decltype(std::declval<AdAttributionRow>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ad_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ad_network(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_campaign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keyword(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_click_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_download_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AdAttributionRow::AdAttributionRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AdAttributionRow)
}
AdAttributionRow::AdAttributionRow(const AdAttributionRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ad_id()) {
    ad_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ad_id(),
      GetArena());
  }
  ad_network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ad_network()) {
    ad_network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ad_network(),
      GetArena());
  }
  campaign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_campaign()) {
    campaign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_campaign(),
      GetArena());
  }
  keyword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyword()) {
    keyword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyword(),
      GetArena());
  }
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extra()) {
    extra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_extra(),
      GetArena());
  }
  ::memcpy(&click_date_, &from.click_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&approx_time_) -
    reinterpret_cast<char*>(&click_date_)) + sizeof(approx_time_));
  // @@protoc_insertion_point(copy_constructor:ei.AdAttributionRow)
}

void AdAttributionRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdAttributionRow_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&click_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approx_time_) -
      reinterpret_cast<char*>(&click_date_)) + sizeof(approx_time_));
}

AdAttributionRow::~AdAttributionRow() {
  // @@protoc_insertion_point(destructor:ei.AdAttributionRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdAttributionRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdAttributionRow::ArenaDtor(void* object) {
  AdAttributionRow* _this = reinterpret_cast< AdAttributionRow* >(object);
  (void)_this;
}
void AdAttributionRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdAttributionRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdAttributionRow& AdAttributionRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdAttributionRow_ei_2eproto.base);
  return *internal_default_instance();
}


void AdAttributionRow::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AdAttributionRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ad_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ad_network_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      campaign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      keyword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      extra_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&click_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_date_) -
        reinterpret_cast<char*>(&click_date_)) + sizeof(download_date_));
  }
  approx_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdAttributionRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ad_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ad_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.ad_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ad_network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ad_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.ad_network");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string campaign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_campaign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.campaign");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string keyword = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_keyword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.keyword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extra = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionRow.extra");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float click_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_click_date(&has_bits);
          click_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float download_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_download_date(&has_bits);
          download_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float approx_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdAttributionRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AdAttributionRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string ad_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ad_id().data(), static_cast<int>(this->_internal_ad_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.ad_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ad_id(), target);
  }

  // optional string ad_network = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ad_network().data(), static_cast<int>(this->_internal_ad_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.ad_network");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ad_network(), target);
  }

  // optional string campaign = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_campaign().data(), static_cast<int>(this->_internal_campaign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.campaign");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_campaign(), target);
  }

  // optional string keyword = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyword().data(), static_cast<int>(this->_internal_keyword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.keyword");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_keyword(), target);
  }

  // optional string extra = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionRow.extra");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_extra(), target);
  }

  // optional float click_date = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_click_date(), target);
  }

  // optional float download_date = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_download_date(), target);
  }

  // optional float approx_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_approx_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AdAttributionRow)
  return target;
}

size_t AdAttributionRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AdAttributionRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string ad_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ad_id());
    }

    // optional string ad_network = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ad_network());
    }

    // optional string campaign = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_campaign());
    }

    // optional string keyword = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyword());
    }

    // optional string extra = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extra());
    }

    // optional float click_date = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float download_date = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float approx_time = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdAttributionRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AdAttributionRow)
  GOOGLE_DCHECK_NE(&from, this);
  const AdAttributionRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdAttributionRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AdAttributionRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AdAttributionRow)
    MergeFrom(*source);
  }
}

void AdAttributionRow::MergeFrom(const AdAttributionRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AdAttributionRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ad_id(from._internal_ad_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ad_network(from._internal_ad_network());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_campaign(from._internal_campaign());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_keyword(from._internal_keyword());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_extra(from._internal_extra());
    }
    if (cached_has_bits & 0x00000040u) {
      click_date_ = from.click_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      download_date_ = from.download_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_approx_time(from._internal_approx_time());
  }
}

void AdAttributionRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AdAttributionRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdAttributionRow::CopyFrom(const AdAttributionRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AdAttributionRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdAttributionRow::IsInitialized() const {
  return true;
}

void AdAttributionRow::InternalSwap(AdAttributionRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ad_id_.Swap(&other->ad_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ad_network_.Swap(&other->ad_network_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaign_.Swap(&other->campaign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keyword_.Swap(&other->keyword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extra_.Swap(&other->extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdAttributionRow, approx_time_)
      + sizeof(AdAttributionRow::approx_time_)
      - PROTOBUF_FIELD_OFFSET(AdAttributionRow, click_date_)>(
          reinterpret_cast<char*>(&click_date_),
          reinterpret_cast<char*>(&other->click_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdAttributionRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdAttributionInfo::InitAsDefaultInstance() {
}
class AdAttributionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AdAttributionInfo>()._has_bits_);
  static void set_has_device_ad_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_network_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attribution(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_org_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_org_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_campaign_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_campaign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_click_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_conversion_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_conversion_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_geo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_adgroup_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_adgroup_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_keyword(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_keyword_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_keyword_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_creativeset_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_creativeset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

AdAttributionInfo::AdAttributionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AdAttributionInfo)
}
AdAttributionInfo::AdAttributionInfo(const AdAttributionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device_ad_id()) {
    device_ad_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_ad_id(),
      GetArena());
  }
  network_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_network_name()) {
    network_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network_name(),
      GetArena());
  }
  org_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_org_name()) {
    org_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_org_name(),
      GetArena());
  }
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_org_id()) {
    org_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_org_id(),
      GetArena());
  }
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_campaign_name()) {
    campaign_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_campaign_name(),
      GetArena());
  }
  campaign_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_campaign_id()) {
    campaign_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_campaign_id(),
      GetArena());
  }
  click_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_click_date()) {
    click_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_click_date(),
      GetArena());
  }
  conversion_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_conversion_date()) {
    conversion_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conversion_date(),
      GetArena());
  }
  conversion_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_conversion_type()) {
    conversion_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conversion_type(),
      GetArena());
  }
  geo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_geo()) {
    geo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_geo(),
      GetArena());
  }
  adgroup_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_adgroup_name()) {
    adgroup_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_adgroup_name(),
      GetArena());
  }
  adgroup_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_adgroup_id()) {
    adgroup_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_adgroup_id(),
      GetArena());
  }
  keyword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyword()) {
    keyword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyword(),
      GetArena());
  }
  keyword_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyword_id()) {
    keyword_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyword_id(),
      GetArena());
  }
  keyword_extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyword_extra()) {
    keyword_extra_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyword_extra(),
      GetArena());
  }
  creativeset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creativeset_name()) {
    creativeset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creativeset_name(),
      GetArena());
  }
  creativeset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creativeset_id()) {
    creativeset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creativeset_id(),
      GetArena());
  }
  attribution_ = from.attribution_;
  // @@protoc_insertion_point(copy_constructor:ei.AdAttributionInfo)
}

void AdAttributionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdAttributionInfo_ei_2eproto.base);
  device_ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  click_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adgroup_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adgroup_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creativeset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creativeset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attribution_ = false;
}

AdAttributionInfo::~AdAttributionInfo() {
  // @@protoc_insertion_point(destructor:ei.AdAttributionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdAttributionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_ad_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  campaign_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  click_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversion_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  geo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adgroup_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adgroup_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keyword_extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creativeset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creativeset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdAttributionInfo::ArenaDtor(void* object) {
  AdAttributionInfo* _this = reinterpret_cast< AdAttributionInfo* >(object);
  (void)_this;
}
void AdAttributionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdAttributionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdAttributionInfo& AdAttributionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdAttributionInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void AdAttributionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AdAttributionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      device_ad_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      network_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      org_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      org_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      campaign_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      campaign_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      click_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      conversion_date_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      conversion_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      geo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      adgroup_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      adgroup_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      keyword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      keyword_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      keyword_extra_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      creativeset_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    creativeset_id_.ClearNonDefaultToEmpty();
  }
  attribution_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdAttributionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_ad_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_ad_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.device_ad_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string network_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_network_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.network_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool attribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_attribution(&has_bits);
          attribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string org_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_org_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.org_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string org_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_org_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.org_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string campaign_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_campaign_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.campaign_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string campaign_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_campaign_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.campaign_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string click_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_click_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.click_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string conversion_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_conversion_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.conversion_date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string conversion_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_conversion_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.conversion_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string geo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_geo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.geo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string adgroup_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_adgroup_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.adgroup_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string adgroup_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_adgroup_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.adgroup_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string keyword = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_keyword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.keyword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string keyword_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_keyword_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.keyword_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string keyword_extra = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_keyword_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.keyword_extra");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creativeset_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_creativeset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.creativeset_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creativeset_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_creativeset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AdAttributionInfo.creativeset_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdAttributionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AdAttributionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_ad_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_ad_id().data(), static_cast<int>(this->_internal_device_ad_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.device_ad_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_ad_id(), target);
  }

  // optional string network_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_network_name().data(), static_cast<int>(this->_internal_network_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.network_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_network_name(), target);
  }

  // optional bool attribution = 3;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_attribution(), target);
  }

  // optional string org_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_org_name().data(), static_cast<int>(this->_internal_org_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.org_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_org_name(), target);
  }

  // optional string org_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.org_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_org_id(), target);
  }

  // optional string campaign_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_campaign_name().data(), static_cast<int>(this->_internal_campaign_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.campaign_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_campaign_name(), target);
  }

  // optional string campaign_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_campaign_id().data(), static_cast<int>(this->_internal_campaign_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.campaign_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_campaign_id(), target);
  }

  // optional string click_date = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_click_date().data(), static_cast<int>(this->_internal_click_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.click_date");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_click_date(), target);
  }

  // optional string conversion_date = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversion_date().data(), static_cast<int>(this->_internal_conversion_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.conversion_date");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_conversion_date(), target);
  }

  // optional string conversion_type = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conversion_type().data(), static_cast<int>(this->_internal_conversion_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.conversion_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_conversion_type(), target);
  }

  // optional string geo = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_geo().data(), static_cast<int>(this->_internal_geo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.geo");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_geo(), target);
  }

  // optional string adgroup_name = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_adgroup_name().data(), static_cast<int>(this->_internal_adgroup_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.adgroup_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_adgroup_name(), target);
  }

  // optional string adgroup_id = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_adgroup_id().data(), static_cast<int>(this->_internal_adgroup_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.adgroup_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_adgroup_id(), target);
  }

  // optional string keyword = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyword().data(), static_cast<int>(this->_internal_keyword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.keyword");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_keyword(), target);
  }

  // optional string keyword_id = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyword_id().data(), static_cast<int>(this->_internal_keyword_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.keyword_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_keyword_id(), target);
  }

  // optional string keyword_extra = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyword_extra().data(), static_cast<int>(this->_internal_keyword_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.keyword_extra");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_keyword_extra(), target);
  }

  // optional string creativeset_name = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creativeset_name().data(), static_cast<int>(this->_internal_creativeset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.creativeset_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_creativeset_name(), target);
  }

  // optional string creativeset_id = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creativeset_id().data(), static_cast<int>(this->_internal_creativeset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AdAttributionInfo.creativeset_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_creativeset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AdAttributionInfo)
  return target;
}

size_t AdAttributionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AdAttributionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_ad_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_ad_id());
    }

    // optional string network_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_network_name());
    }

    // optional string org_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_org_name());
    }

    // optional string org_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_org_id());
    }

    // optional string campaign_name = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_campaign_name());
    }

    // optional string campaign_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_campaign_id());
    }

    // optional string click_date = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_click_date());
    }

    // optional string conversion_date = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversion_date());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string conversion_type = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conversion_type());
    }

    // optional string geo = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_geo());
    }

    // optional string adgroup_name = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_adgroup_name());
    }

    // optional string adgroup_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_adgroup_id());
    }

    // optional string keyword = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyword());
    }

    // optional string keyword_id = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyword_id());
    }

    // optional string keyword_extra = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyword_extra());
    }

    // optional string creativeset_name = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creativeset_name());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional string creativeset_id = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creativeset_id());
    }

    // optional bool attribution = 3;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdAttributionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AdAttributionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AdAttributionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdAttributionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AdAttributionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AdAttributionInfo)
    MergeFrom(*source);
  }
}

void AdAttributionInfo::MergeFrom(const AdAttributionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AdAttributionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_ad_id(from._internal_device_ad_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_network_name(from._internal_network_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_org_name(from._internal_org_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_org_id(from._internal_org_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_campaign_name(from._internal_campaign_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_campaign_id(from._internal_campaign_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_click_date(from._internal_click_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_conversion_date(from._internal_conversion_date());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_conversion_type(from._internal_conversion_type());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_geo(from._internal_geo());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_adgroup_name(from._internal_adgroup_name());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_adgroup_id(from._internal_adgroup_id());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_keyword(from._internal_keyword());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_keyword_id(from._internal_keyword_id());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_keyword_extra(from._internal_keyword_extra());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_creativeset_name(from._internal_creativeset_name());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_creativeset_id(from._internal_creativeset_id());
    }
    if (cached_has_bits & 0x00020000u) {
      attribution_ = from.attribution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdAttributionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AdAttributionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdAttributionInfo::CopyFrom(const AdAttributionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AdAttributionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdAttributionInfo::IsInitialized() const {
  return true;
}

void AdAttributionInfo::InternalSwap(AdAttributionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_ad_id_.Swap(&other->device_ad_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_name_.Swap(&other->network_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  org_name_.Swap(&other->org_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  org_id_.Swap(&other->org_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaign_name_.Swap(&other->campaign_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  campaign_id_.Swap(&other->campaign_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  click_date_.Swap(&other->click_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conversion_date_.Swap(&other->conversion_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  conversion_type_.Swap(&other->conversion_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  geo_.Swap(&other->geo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  adgroup_name_.Swap(&other->adgroup_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  adgroup_id_.Swap(&other->adgroup_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keyword_.Swap(&other->keyword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keyword_id_.Swap(&other->keyword_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keyword_extra_.Swap(&other->keyword_extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creativeset_name_.Swap(&other->creativeset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creativeset_id_.Swap(&other->creativeset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(attribution_, other->attribution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdAttributionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsClientInfo_LaunchCount::InitAsDefaultInstance() {
}
class ArtifactsClientInfo_LaunchCount::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsClientInfo_LaunchCount>()._has_bits_);
  static void set_has_ship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_launches(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_launch_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ArtifactsClientInfo_LaunchCount::ArtifactsClientInfo_LaunchCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsClientInfo.LaunchCount)
}
ArtifactsClientInfo_LaunchCount::ArtifactsClientInfo_LaunchCount(const ArtifactsClientInfo_LaunchCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ship_, &from.ship_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_points_) -
    reinterpret_cast<char*>(&ship_)) + sizeof(launch_points_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsClientInfo.LaunchCount)
}

void ArtifactsClientInfo_LaunchCount::SharedCtor() {
  ::memset(&ship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_points_) -
      reinterpret_cast<char*>(&ship_)) + sizeof(launch_points_));
}

ArtifactsClientInfo_LaunchCount::~ArtifactsClientInfo_LaunchCount() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsClientInfo.LaunchCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsClientInfo_LaunchCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsClientInfo_LaunchCount::ArenaDtor(void* object) {
  ArtifactsClientInfo_LaunchCount* _this = reinterpret_cast< ArtifactsClientInfo_LaunchCount* >(object);
  (void)_this;
}
void ArtifactsClientInfo_LaunchCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsClientInfo_LaunchCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsClientInfo_LaunchCount& ArtifactsClientInfo_LaunchCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsClientInfo_LaunchCount_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsClientInfo_LaunchCount::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsClientInfo.LaunchCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_points_) -
        reinterpret_cast<char*>(&ship_)) + sizeof(launch_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsClientInfo_LaunchCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.MissionInfo.Spaceship ship = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Spaceship_IsValid(val))) {
            _internal_set_ship(static_cast<::ei::MissionInfo_Spaceship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 num_launches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_launches(&has_bits);
          num_launches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double launch_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_launch_points(&has_bits);
          launch_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsClientInfo_LaunchCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsClientInfo.LaunchCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.MissionInfo.Spaceship ship = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ship(), target);
  }

  // optional uint32 num_launches = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_launches(), target);
  }

  // optional double launch_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_launch_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsClientInfo.LaunchCount)
  return target;
}

size_t ArtifactsClientInfo_LaunchCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsClientInfo.LaunchCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ei.MissionInfo.Spaceship ship = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ship());
    }

    // optional uint32 num_launches = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_launches());
    }

    // optional double launch_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsClientInfo_LaunchCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsClientInfo.LaunchCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsClientInfo_LaunchCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsClientInfo_LaunchCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsClientInfo.LaunchCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsClientInfo.LaunchCount)
    MergeFrom(*source);
  }
}

void ArtifactsClientInfo_LaunchCount::MergeFrom(const ArtifactsClientInfo_LaunchCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsClientInfo.LaunchCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ship_ = from.ship_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_launches_ = from.num_launches_;
    }
    if (cached_has_bits & 0x00000004u) {
      launch_points_ = from.launch_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsClientInfo_LaunchCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsClientInfo.LaunchCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsClientInfo_LaunchCount::CopyFrom(const ArtifactsClientInfo_LaunchCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsClientInfo.LaunchCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsClientInfo_LaunchCount::IsInitialized() const {
  return true;
}

void ArtifactsClientInfo_LaunchCount::InternalSwap(ArtifactsClientInfo_LaunchCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsClientInfo_LaunchCount, launch_points_)
      + sizeof(ArtifactsClientInfo_LaunchCount::launch_points_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsClientInfo_LaunchCount, ship_)>(
          reinterpret_cast<char*>(&ship_),
          reinterpret_cast<char*>(&other->ship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsClientInfo_LaunchCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsClientInfo::InitAsDefaultInstance() {
}
class ArtifactsClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsClientInfo>()._has_bits_);
  static void set_has_mission_capacity_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mission_duration_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mission_ftl_duration_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ArtifactsClientInfo::ArtifactsClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  launch_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsClientInfo)
}
ArtifactsClientInfo::ArtifactsClientInfo(const ArtifactsClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      launch_counts_(from.launch_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mission_capacity_mult_, &from.mission_capacity_mult_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_ftl_duration_mult_) -
    reinterpret_cast<char*>(&mission_capacity_mult_)) + sizeof(mission_ftl_duration_mult_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsClientInfo)
}

void ArtifactsClientInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsClientInfo_ei_2eproto.base);
  ::memset(&mission_capacity_mult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_ftl_duration_mult_) -
      reinterpret_cast<char*>(&mission_capacity_mult_)) + sizeof(mission_ftl_duration_mult_));
}

ArtifactsClientInfo::~ArtifactsClientInfo() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsClientInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsClientInfo::ArenaDtor(void* object) {
  ArtifactsClientInfo* _this = reinterpret_cast< ArtifactsClientInfo* >(object);
  (void)_this;
}
void ArtifactsClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsClientInfo& ArtifactsClientInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsClientInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launch_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mission_capacity_mult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mission_ftl_duration_mult_) -
        reinterpret_cast<char*>(&mission_capacity_mult_)) + sizeof(mission_ftl_duration_mult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double mission_capacity_mult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_mission_capacity_mult(&has_bits);
          mission_capacity_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mission_duration_mult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_mission_duration_mult(&has_bits);
          mission_duration_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsClientInfo.LaunchCount launch_counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_launch_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double mission_ftl_duration_mult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_mission_ftl_duration_mult(&has_bits);
          mission_ftl_duration_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mission_capacity_mult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mission_capacity_mult(), target);
  }

  // optional double mission_duration_mult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mission_duration_mult(), target);
  }

  // repeated .ei.ArtifactsClientInfo.LaunchCount launch_counts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_launch_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_launch_counts(i), target, stream);
  }

  // optional double mission_ftl_duration_mult = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_mission_ftl_duration_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsClientInfo)
  return target;
}

size_t ArtifactsClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactsClientInfo.LaunchCount launch_counts = 3;
  total_size += 1UL * this->_internal_launch_counts_size();
  for (const auto& msg : this->launch_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double mission_capacity_mult = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double mission_duration_mult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double mission_ftl_duration_mult = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsClientInfo)
    MergeFrom(*source);
  }
}

void ArtifactsClientInfo::MergeFrom(const ArtifactsClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launch_counts_.MergeFrom(from.launch_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mission_capacity_mult_ = from.mission_capacity_mult_;
    }
    if (cached_has_bits & 0x00000002u) {
      mission_duration_mult_ = from.mission_duration_mult_;
    }
    if (cached_has_bits & 0x00000004u) {
      mission_ftl_duration_mult_ = from.mission_ftl_duration_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsClientInfo::CopyFrom(const ArtifactsClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsClientInfo::IsInitialized() const {
  return true;
}

void ArtifactsClientInfo::InternalSwap(ArtifactsClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  launch_counts_.InternalSwap(&other->launch_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsClientInfo, mission_ftl_duration_mult_)
      + sizeof(ArtifactsClientInfo::mission_ftl_duration_mult_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsClientInfo, mission_capacity_mult_)>(
          reinterpret_cast<char*>(&mission_capacity_mult_),
          reinterpret_cast<char*>(&other->mission_capacity_mult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionInfo_Fuel::InitAsDefaultInstance() {
}
class MissionInfo_Fuel::_Internal {
 public:
  using HasBits = decltype(std::declval<MissionInfo_Fuel>()._has_bits_);
  static void set_has_egg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MissionInfo_Fuel::MissionInfo_Fuel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MissionInfo.Fuel)
}
MissionInfo_Fuel::MissionInfo_Fuel(const MissionInfo_Fuel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(egg_));
  // @@protoc_insertion_point(copy_constructor:ei.MissionInfo.Fuel)
}

void MissionInfo_Fuel::SharedCtor() {
  amount_ = 0;
  egg_ = 1;
}

MissionInfo_Fuel::~MissionInfo_Fuel() {
  // @@protoc_insertion_point(destructor:ei.MissionInfo.Fuel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionInfo_Fuel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MissionInfo_Fuel::ArenaDtor(void* object) {
  MissionInfo_Fuel* _this = reinterpret_cast< MissionInfo_Fuel* >(object);
  (void)_this;
}
void MissionInfo_Fuel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionInfo_Fuel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionInfo_Fuel& MissionInfo_Fuel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionInfo_Fuel_ei_2eproto.base);
  return *internal_default_instance();
}


void MissionInfo_Fuel::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MissionInfo.Fuel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    amount_ = 0;
    egg_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionInfo_Fuel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Egg egg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionInfo_Fuel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MissionInfo.Fuel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Egg egg = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_egg(), target);
  }

  // optional double amount = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MissionInfo.Fuel)
  return target;
}

size_t MissionInfo_Fuel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MissionInfo.Fuel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double amount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ei.Egg egg = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionInfo_Fuel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MissionInfo.Fuel)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfo_Fuel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionInfo_Fuel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MissionInfo.Fuel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MissionInfo.Fuel)
    MergeFrom(*source);
  }
}

void MissionInfo_Fuel::MergeFrom(const MissionInfo_Fuel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MissionInfo.Fuel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_ = from.egg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MissionInfo_Fuel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MissionInfo.Fuel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo_Fuel::CopyFrom(const MissionInfo_Fuel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MissionInfo.Fuel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo_Fuel::IsInitialized() const {
  return true;
}

void MissionInfo_Fuel::InternalSwap(MissionInfo_Fuel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(amount_, other->amount_);
  swap(egg_, other->egg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionInfo_Fuel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionInfo::InitAsDefaultInstance() {
}
class MissionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MissionInfo>()._has_bits_);
  static void set_has_ship(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_quality_bump(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_artifact(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_time_derived(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mission_log(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MissionInfo::MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fuel_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MissionInfo)
}
MissionInfo::MissionInfo(const MissionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fuel_(from.fuel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  mission_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mission_log()) {
    mission_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mission_log(),
      GetArena());
  }
  ::memcpy(&ship_, &from.ship_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_artifact_) -
    reinterpret_cast<char*>(&ship_)) + sizeof(target_artifact_));
  // @@protoc_insertion_point(copy_constructor:ei.MissionInfo)
}

void MissionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionInfo_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_artifact_) -
      reinterpret_cast<char*>(&ship_)) + sizeof(target_artifact_));
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:ei.MissionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mission_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissionInfo::ArenaDtor(void* object) {
  MissionInfo* _this = reinterpret_cast< MissionInfo* >(object);
  (void)_this;
}
void MissionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionInfo& MissionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mission_log_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&ship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacity_) -
        reinterpret_cast<char*>(&ship_)) + sizeof(capacity_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&start_time_derived_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_artifact_) -
        reinterpret_cast<char*>(&start_time_derived_)) + sizeof(target_artifact_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.MissionInfo.Spaceship ship = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Spaceship_IsValid(val))) {
            _internal_set_ship(static_cast<::ei::MissionInfo_Spaceship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::MissionInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo.DurationType duration_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_DurationType_IsValid(val))) {
            _internal_set_duration_type(static_cast<::ei::MissionInfo_DurationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ei.MissionInfo.Fuel fuel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fuel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double duration_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_duration_seconds(&has_bits);
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MissionInfo.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_time_derived = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_start_time_derived(&has_bits);
          start_time_derived_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 capacity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mission_log = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_mission_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MissionInfo.mission_log");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double quality_bump = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_quality_bump(&has_bits);
          quality_bump_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec.Name target_artifact = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ArtifactSpec_Name_IsValid(val))) {
            _internal_set_target_artifact(static_cast<::ei::ArtifactSpec_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.MissionInfo.Spaceship ship = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ship(), target);
  }

  // optional .ei.MissionInfo.Status status = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional .ei.MissionInfo.DurationType duration_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_duration_type(), target);
  }

  // repeated .ei.MissionInfo.Fuel fuel = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fuel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fuel(i), target, stream);
  }

  // optional double duration_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_duration_seconds(), target);
  }

  // optional double seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_seconds_remaining(), target);
  }

  // optional string identifier = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MissionInfo.identifier");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_identifier(), target);
  }

  // optional double start_time_derived = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_start_time_derived(), target);
  }

  // optional uint32 capacity = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_capacity(), target);
  }

  // optional string mission_log = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mission_log().data(), static_cast<int>(this->_internal_mission_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MissionInfo.mission_log");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_mission_log(), target);
  }

  // optional double quality_bump = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_quality_bump(), target);
  }

  // optional uint32 level = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_level(), target);
  }

  // optional .ei.ArtifactSpec.Name target_artifact = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_target_artifact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MissionInfo)
  return target;
}

size_t MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MissionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.MissionInfo.Fuel fuel = 4;
  total_size += 1UL * this->_internal_fuel_size();
  for (const auto& msg : this->fuel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string mission_log = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mission_log());
    }

    // optional .ei.MissionInfo.Spaceship ship = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ship());
    }

    // optional .ei.MissionInfo.Status status = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional double duration_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double seconds_remaining = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .ei.MissionInfo.DurationType duration_type = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_duration_type());
    }

    // optional uint32 capacity = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capacity());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double start_time_derived = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double quality_bump = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 level = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional .ei.ArtifactSpec.Name target_artifact = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target_artifact());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MissionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MissionInfo)
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fuel_.MergeFrom(from.fuel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mission_log(from._internal_mission_log());
    }
    if (cached_has_bits & 0x00000004u) {
      ship_ = from.ship_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_seconds_ = from.duration_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_type_ = from.duration_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      capacity_ = from.capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      start_time_derived_ = from.start_time_derived_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_bump_ = from.quality_bump_;
    }
    if (cached_has_bits & 0x00000400u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      target_artifact_ = from.target_artifact_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MissionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  return true;
}

void MissionInfo::InternalSwap(MissionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fuel_.InternalSwap(&other->fuel_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mission_log_.Swap(&other->mission_log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionInfo, target_artifact_)
      + sizeof(MissionInfo::target_artifact_)
      - PROTOBUF_FIELD_OFFSET(MissionInfo, ship_)>(
          reinterpret_cast<char*>(&ship_),
          reinterpret_cast<char*>(&other->ship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactSpec::InitAsDefaultInstance() {
}
class ArtifactSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactSpec>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_egg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ArtifactSpec::ArtifactSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactSpec)
}
ArtifactSpec::ArtifactSpec(const ArtifactSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_) -
    reinterpret_cast<char*>(&name_)) + sizeof(egg_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactSpec)
}

void ArtifactSpec::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rarity_) -
      reinterpret_cast<char*>(&name_)) + sizeof(rarity_));
  egg_ = 1;
}

ArtifactSpec::~ArtifactSpec() {
  // @@protoc_insertion_point(destructor:ei.ArtifactSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactSpec::ArenaDtor(void* object) {
  ArtifactSpec* _this = reinterpret_cast< ArtifactSpec* >(object);
  (void)_this;
}
void ArtifactSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactSpec& ArtifactSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rarity_) -
        reinterpret_cast<char*>(&name_)) + sizeof(rarity_));
    egg_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ArtifactSpec_Name_IsValid(val))) {
            _internal_set_name(static_cast<::ei::ArtifactSpec_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ArtifactSpec_Level_IsValid(val))) {
            _internal_set_level(static_cast<::ei::ArtifactSpec_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec.Rarity rarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ArtifactSpec_Rarity_IsValid(val))) {
            _internal_set_rarity(static_cast<::ei::ArtifactSpec_Rarity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.Egg egg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Egg_IsValid(val))) {
            _internal_set_egg(static_cast<::ei::Egg>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec.Name name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // optional .ei.ArtifactSpec.Level level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // optional .ei.ArtifactSpec.Rarity rarity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rarity(), target);
  }

  // optional .ei.Egg egg = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_egg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactSpec)
  return target;
}

size_t ArtifactSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ei.ArtifactSpec.Name name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
    }

    // optional .ei.ArtifactSpec.Level level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
    }

    // optional .ei.ArtifactSpec.Rarity rarity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rarity());
    }

    // optional .ei.Egg egg = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_egg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactSpec)
    MergeFrom(*source);
  }
}

void ArtifactSpec::MergeFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_ = from.name_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000008u) {
      egg_ = from.egg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactSpec::CopyFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactSpec::IsInitialized() const {
  return true;
}

void ArtifactSpec::InternalSwap(ArtifactSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactSpec, rarity_)
      + sizeof(ArtifactSpec::rarity_)
      - PROTOBUF_FIELD_OFFSET(ArtifactSpec, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
  swap(egg_, other->egg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteArtifact::InitAsDefaultInstance() {
  ::ei::_CompleteArtifact_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class CompleteArtifact::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteArtifact>()._has_bits_);
  static const ::ei::ArtifactSpec& spec(const CompleteArtifact* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::ArtifactSpec&
CompleteArtifact::_Internal::spec(const CompleteArtifact* msg) {
  return *msg->spec_;
}
CompleteArtifact::CompleteArtifact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CompleteArtifact)
}
CompleteArtifact::CompleteArtifact(const CompleteArtifact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stones_(from.stones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.CompleteArtifact)
}

void CompleteArtifact::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteArtifact_ei_2eproto.base);
  spec_ = nullptr;
}

CompleteArtifact::~CompleteArtifact() {
  // @@protoc_insertion_point(destructor:ei.CompleteArtifact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteArtifact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_;
}

void CompleteArtifact::ArenaDtor(void* object) {
  CompleteArtifact* _this = reinterpret_cast< CompleteArtifact* >(object);
  (void)_this;
}
void CompleteArtifact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteArtifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteArtifact& CompleteArtifact::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteArtifact_ei_2eproto.base);
  return *internal_default_instance();
}


void CompleteArtifact::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CompleteArtifact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stones_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_ != nullptr);
    spec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteArtifact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactSpec stones = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteArtifact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CompleteArtifact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec spec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // repeated .ei.ArtifactSpec stones = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CompleteArtifact)
  return target;
}

size_t CompleteArtifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CompleteArtifact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactSpec stones = 2;
  total_size += 1UL * this->_internal_stones_size();
  for (const auto& msg : this->stones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ei.ArtifactSpec spec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteArtifact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CompleteArtifact)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteArtifact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteArtifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CompleteArtifact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CompleteArtifact)
    MergeFrom(*source);
  }
}

void CompleteArtifact::MergeFrom(const CompleteArtifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CompleteArtifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stones_.MergeFrom(from.stones_);
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
  }
}

void CompleteArtifact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CompleteArtifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteArtifact::CopyFrom(const CompleteArtifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CompleteArtifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteArtifact::IsInitialized() const {
  return true;
}

void CompleteArtifact::InternalSwap(CompleteArtifact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stones_.InternalSwap(&other->stones_);
  swap(spec_, other->spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteArtifact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactInventoryItem::InitAsDefaultInstance() {
  ::ei::_ArtifactInventoryItem_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::ei::CompleteArtifact*>(
      ::ei::CompleteArtifact::internal_default_instance());
}
class ArtifactInventoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactInventoryItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::CompleteArtifact& artifact(const ArtifactInventoryItem* msg);
  static void set_has_artifact(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::CompleteArtifact&
ArtifactInventoryItem::_Internal::artifact(const ArtifactInventoryItem* msg) {
  return *msg->artifact_;
}
ArtifactInventoryItem::ArtifactInventoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactInventoryItem)
}
ArtifactInventoryItem::ArtifactInventoryItem(const ArtifactInventoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_id()) {
    server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  if (from._internal_has_artifact()) {
    artifact_ = new ::ei::CompleteArtifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactInventoryItem)
}

void ArtifactInventoryItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactInventoryItem_ei_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&artifact_)) + sizeof(quantity_));
}

ArtifactInventoryItem::~ArtifactInventoryItem() {
  // @@protoc_insertion_point(destructor:ei.ArtifactInventoryItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactInventoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_;
}

void ArtifactInventoryItem::ArenaDtor(void* object) {
  ArtifactInventoryItem* _this = reinterpret_cast< ArtifactInventoryItem* >(object);
  (void)_this;
}
void ArtifactInventoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactInventoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactInventoryItem& ArtifactInventoryItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactInventoryItem_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactInventoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactInventoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(artifact_ != nullptr);
      artifact_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactInventoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.CompleteArtifact artifact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_artifact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ArtifactInventoryItem.server_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactInventoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactInventoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .ei.CompleteArtifact artifact = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::artifact(this), target, stream);
  }

  // optional double quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_quantity(), target);
  }

  // optional string server_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ArtifactInventoryItem.server_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactInventoryItem)
  return target;
}

size_t ArtifactInventoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactInventoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string server_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional .ei.CompleteArtifact artifact = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *artifact_);
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional double quantity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactInventoryItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactInventoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactInventoryItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactInventoryItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactInventoryItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactInventoryItem)
    MergeFrom(*source);
  }
}

void ArtifactInventoryItem::MergeFrom(const ArtifactInventoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactInventoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_artifact()->::ei::CompleteArtifact::MergeFrom(from._internal_artifact());
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactInventoryItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactInventoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactInventoryItem::CopyFrom(const ArtifactInventoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactInventoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactInventoryItem::IsInitialized() const {
  return true;
}

void ArtifactInventoryItem::InternalSwap(ArtifactInventoryItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactInventoryItem, quantity_)
      + sizeof(ArtifactInventoryItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(ArtifactInventoryItem, artifact_)>(
          reinterpret_cast<char*>(&artifact_),
          reinterpret_cast<char*>(&other->artifact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactInventoryItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InventorySlot::InitAsDefaultInstance() {
}
class InventorySlot::_Internal {
 public:
  using HasBits = decltype(std::declval<InventorySlot>()._has_bits_);
  static void set_has_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InventorySlot::InventorySlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.InventorySlot)
}
InventorySlot::InventorySlot(const InventorySlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&occupied_, &from.occupied_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&occupied_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:ei.InventorySlot)
}

void InventorySlot::SharedCtor() {
  ::memset(&occupied_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&occupied_)) + sizeof(item_id_));
}

InventorySlot::~InventorySlot() {
  // @@protoc_insertion_point(destructor:ei.InventorySlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InventorySlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InventorySlot::ArenaDtor(void* object) {
  InventorySlot* _this = reinterpret_cast< InventorySlot* >(object);
  (void)_this;
}
void InventorySlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InventorySlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InventorySlot& InventorySlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InventorySlot_ei_2eproto.base);
  return *internal_default_instance();
}


void InventorySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.InventorySlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&occupied_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&occupied_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventorySlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool occupied = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_occupied(&has_bits);
          occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InventorySlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.InventorySlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool occupied = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_occupied(), target);
  }

  // optional uint32 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.InventorySlot)
  return target;
}

size_t InventorySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.InventorySlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool occupied = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventorySlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.InventorySlot)
  GOOGLE_DCHECK_NE(&from, this);
  const InventorySlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InventorySlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.InventorySlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.InventorySlot)
    MergeFrom(*source);
  }
}

void InventorySlot::MergeFrom(const InventorySlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.InventorySlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      occupied_ = from.occupied_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InventorySlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.InventorySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventorySlot::CopyFrom(const InventorySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.InventorySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventorySlot::IsInitialized() const {
  return true;
}

void InventorySlot::InternalSwap(InventorySlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InventorySlot, item_id_)
      + sizeof(InventorySlot::item_id_)
      - PROTOBUF_FIELD_OFFSET(InventorySlot, occupied_)>(
          reinterpret_cast<char*>(&occupied_),
          reinterpret_cast<char*>(&other->occupied_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InventorySlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationRequest::InitAsDefaultInstance() {
  ::ei::_ArtifactsConfigurationRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ArtifactsConfigurationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsConfigurationRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ArtifactsConfigurationRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::BasicRequestInfo&
ArtifactsConfigurationRequest::_Internal::rinfo(const ArtifactsConfigurationRequest* msg) {
  return *msg->rinfo_;
}
ArtifactsConfigurationRequest::ArtifactsConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationRequest)
}
ArtifactsConfigurationRequest::ArtifactsConfigurationRequest(const ArtifactsConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationRequest)
}

void ArtifactsConfigurationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsConfigurationRequest_ei_2eproto.base);
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(client_version_));
}

ArtifactsConfigurationRequest::~ArtifactsConfigurationRequest() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
}

void ArtifactsConfigurationRequest::ArenaDtor(void* object) {
  ArtifactsConfigurationRequest* _this = reinterpret_cast< ArtifactsConfigurationRequest* >(object);
  (void)_this;
}
void ArtifactsConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationRequest& ArtifactsConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rinfo_ != nullptr);
    rinfo_->Clear();
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationRequest)
  return target;
}

size_t ArtifactsConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.BasicRequestInfo rinfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationRequest)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationRequest::MergeFrom(const ArtifactsConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationRequest::CopyFrom(const ArtifactsConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationRequest::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationRequest::InternalSwap(ArtifactsConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationRequest, client_version_)
      + sizeof(ArtifactsConfigurationRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationResponse_MissionParameters_Duration::InitAsDefaultInstance() {
}
class ArtifactsConfigurationResponse_MissionParameters_Duration::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsConfigurationResponse_MissionParameters_Duration>()._has_bits_);
  static void set_has_duration_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level_capacity_bump(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level_quality_bump(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ArtifactsConfigurationResponse_MissionParameters_Duration::ArtifactsConfigurationResponse_MissionParameters_Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
}
ArtifactsConfigurationResponse_MissionParameters_Duration::ArtifactsConfigurationResponse_MissionParameters_Duration(const ArtifactsConfigurationResponse_MissionParameters_Duration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_quality_bump_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(level_quality_bump_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::SharedCtor() {
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_quality_bump_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(level_quality_bump_));
}

ArtifactsConfigurationResponse_MissionParameters_Duration::~ArtifactsConfigurationResponse_MissionParameters_Duration() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::ArenaDtor(void* object) {
  ArtifactsConfigurationResponse_MissionParameters_Duration* _this = reinterpret_cast< ArtifactsConfigurationResponse_MissionParameters_Duration* >(object);
  (void)_this;
}
void ArtifactsConfigurationResponse_MissionParameters_Duration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationResponse_MissionParameters_Duration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationResponse_MissionParameters_Duration& ArtifactsConfigurationResponse_MissionParameters_Duration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationResponse_MissionParameters_Duration_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationResponse_MissionParameters_Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_quality_bump_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(level_quality_bump_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationResponse_MissionParameters_Duration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.MissionInfo.DurationType duration_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_DurationType_IsValid(val))) {
            _internal_set_duration_type(static_cast<::ei::MissionInfo_DurationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_quality(&has_bits);
          min_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_quality(&has_bits);
          max_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level_capacity_bump = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_level_capacity_bump(&has_bits);
          level_capacity_bump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float level_quality_bump = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_level_quality_bump(&has_bits);
          level_quality_bump_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationResponse_MissionParameters_Duration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.MissionInfo.DurationType duration_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_duration_type(), target);
  }

  // optional double seconds = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds(), target);
  }

  // optional float quality = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_quality(), target);
  }

  // optional float min_quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_quality(), target);
  }

  // optional float max_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_quality(), target);
  }

  // optional uint32 capacity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_capacity(), target);
  }

  // optional uint32 level_capacity_bump = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level_capacity_bump(), target);
  }

  // optional float level_quality_bump = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_level_quality_bump(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  return target;
}

size_t ArtifactsConfigurationResponse_MissionParameters_Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double seconds = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .ei.MissionInfo.DurationType duration_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_duration_type());
    }

    // optional float quality = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_quality = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 capacity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capacity());
    }

    // optional uint32 level_capacity_bump = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level_capacity_bump());
    }

    // optional float level_quality_bump = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationResponse_MissionParameters_Duration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationResponse_MissionParameters_Duration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::MergeFrom(const ArtifactsConfigurationResponse_MissionParameters_Duration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_type_ = from.duration_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_quality_ = from.min_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_quality_ = from.max_quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_capacity_bump_ = from.level_capacity_bump_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_quality_bump_ = from.level_quality_bump_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::CopyFrom(const ArtifactsConfigurationResponse_MissionParameters_Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationResponse.MissionParameters.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationResponse_MissionParameters_Duration::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationResponse_MissionParameters_Duration::InternalSwap(ArtifactsConfigurationResponse_MissionParameters_Duration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_MissionParameters_Duration, level_quality_bump_)
      + sizeof(ArtifactsConfigurationResponse_MissionParameters_Duration::level_quality_bump_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_MissionParameters_Duration, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationResponse_MissionParameters_Duration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationResponse_MissionParameters::InitAsDefaultInstance() {
}
class ArtifactsConfigurationResponse_MissionParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsConfigurationResponse_MissionParameters>()._has_bits_);
  static void set_has_ship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_capacity_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArtifactsConfigurationResponse_MissionParameters::ArtifactsConfigurationResponse_MissionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  durations_(arena),
  level_mission_requirements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationResponse.MissionParameters)
}
ArtifactsConfigurationResponse_MissionParameters::ArtifactsConfigurationResponse_MissionParameters(const ArtifactsConfigurationResponse_MissionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      durations_(from.durations_),
      level_mission_requirements_(from.level_mission_requirements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ship_, &from.ship_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacity_deprecated_) -
    reinterpret_cast<char*>(&ship_)) + sizeof(capacity_deprecated_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationResponse.MissionParameters)
}

void ArtifactsConfigurationResponse_MissionParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto.base);
  ::memset(&ship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_deprecated_) -
      reinterpret_cast<char*>(&ship_)) + sizeof(capacity_deprecated_));
}

ArtifactsConfigurationResponse_MissionParameters::~ArtifactsConfigurationResponse_MissionParameters() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationResponse.MissionParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationResponse_MissionParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsConfigurationResponse_MissionParameters::ArenaDtor(void* object) {
  ArtifactsConfigurationResponse_MissionParameters* _this = reinterpret_cast< ArtifactsConfigurationResponse_MissionParameters* >(object);
  (void)_this;
}
void ArtifactsConfigurationResponse_MissionParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationResponse_MissionParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationResponse_MissionParameters& ArtifactsConfigurationResponse_MissionParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationResponse_MissionParameters_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationResponse_MissionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  durations_.Clear();
  level_mission_requirements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacity_deprecated_) -
        reinterpret_cast<char*>(&ship_)) + sizeof(capacity_deprecated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationResponse_MissionParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.MissionInfo.Spaceship ship = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Spaceship_IsValid(val))) {
            _internal_set_ship(static_cast<::ei::MissionInfo_Spaceship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 capacity_DEPRECATED = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_capacity_deprecated(&has_bits);
          capacity_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsConfigurationResponse.MissionParameters.Duration durations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_durations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 level_mission_requirements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_level_mission_requirements(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_level_mission_requirements(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationResponse_MissionParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.MissionInfo.Spaceship ship = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ship(), target);
  }

  // optional uint32 capacity_DEPRECATED = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_capacity_deprecated(), target);
  }

  // repeated .ei.ArtifactsConfigurationResponse.MissionParameters.Duration durations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_durations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_durations(i), target, stream);
  }

  // repeated uint32 level_mission_requirements = 4;
  for (int i = 0, n = this->_internal_level_mission_requirements_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level_mission_requirements(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationResponse.MissionParameters)
  return target;
}

size_t ArtifactsConfigurationResponse_MissionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactsConfigurationResponse.MissionParameters.Duration durations = 3;
  total_size += 1UL * this->_internal_durations_size();
  for (const auto& msg : this->durations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 level_mission_requirements = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->level_mission_requirements_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_level_mission_requirements_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.MissionInfo.Spaceship ship = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ship());
    }

    // optional uint32 capacity_DEPRECATED = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capacity_deprecated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationResponse_MissionParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationResponse_MissionParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationResponse_MissionParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationResponse.MissionParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationResponse.MissionParameters)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationResponse_MissionParameters::MergeFrom(const ArtifactsConfigurationResponse_MissionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  durations_.MergeFrom(from.durations_);
  level_mission_requirements_.MergeFrom(from.level_mission_requirements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ship_ = from.ship_;
    }
    if (cached_has_bits & 0x00000002u) {
      capacity_deprecated_ = from.capacity_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsConfigurationResponse_MissionParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationResponse_MissionParameters::CopyFrom(const ArtifactsConfigurationResponse_MissionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationResponse.MissionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationResponse_MissionParameters::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationResponse_MissionParameters::InternalSwap(ArtifactsConfigurationResponse_MissionParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  durations_.InternalSwap(&other->durations_);
  level_mission_requirements_.InternalSwap(&other->level_mission_requirements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_MissionParameters, capacity_deprecated_)
      + sizeof(ArtifactsConfigurationResponse_MissionParameters::capacity_deprecated_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_MissionParameters, ship_)>(
          reinterpret_cast<char*>(&ship_),
          reinterpret_cast<char*>(&other->ship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationResponse_MissionParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationResponse_ArtifactParameters::InitAsDefaultInstance() {
  ::ei::_ArtifactsConfigurationResponse_ArtifactParameters_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class ArtifactsConfigurationResponse_ArtifactParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsConfigurationResponse_ArtifactParameters>()._has_bits_);
  static const ::ei::ArtifactSpec& spec(const ArtifactsConfigurationResponse_ArtifactParameters* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_odds_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crafting_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crafting_price_low(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crafting_price_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crafting_price_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crafting_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ei::ArtifactSpec&
ArtifactsConfigurationResponse_ArtifactParameters::_Internal::spec(const ArtifactsConfigurationResponse_ArtifactParameters* msg) {
  return *msg->spec_;
}
ArtifactsConfigurationResponse_ArtifactParameters::ArtifactsConfigurationResponse_ArtifactParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationResponse.ArtifactParameters)
}
ArtifactsConfigurationResponse_ArtifactParameters::ArtifactsConfigurationResponse_ArtifactParameters(const ArtifactsConfigurationResponse_ArtifactParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  ::memcpy(&base_quality_, &from.base_quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&crafting_price_domain_) -
    reinterpret_cast<char*>(&base_quality_)) + sizeof(crafting_price_domain_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationResponse.ArtifactParameters)
}

void ArtifactsConfigurationResponse_ArtifactParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto.base);
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crafting_price_domain_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(crafting_price_domain_));
}

ArtifactsConfigurationResponse_ArtifactParameters::~ArtifactsConfigurationResponse_ArtifactParameters() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationResponse_ArtifactParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_;
}

void ArtifactsConfigurationResponse_ArtifactParameters::ArenaDtor(void* object) {
  ArtifactsConfigurationResponse_ArtifactParameters* _this = reinterpret_cast< ArtifactsConfigurationResponse_ArtifactParameters* >(object);
  (void)_this;
}
void ArtifactsConfigurationResponse_ArtifactParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationResponse_ArtifactParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationResponse_ArtifactParameters& ArtifactsConfigurationResponse_ArtifactParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationResponse_ArtifactParameters_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationResponse_ArtifactParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_ != nullptr);
    spec_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&base_quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crafting_xp_) -
        reinterpret_cast<char*>(&base_quality_)) + sizeof(crafting_xp_));
  }
  crafting_price_domain_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationResponse_ArtifactParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double base_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_base_quality(&has_bits);
          base_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double odds_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_odds_multiplier(&has_bits);
          odds_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double crafting_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_crafting_price(&has_bits);
          crafting_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double crafting_price_low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_crafting_price_low(&has_bits);
          crafting_price_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 crafting_price_domain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_crafting_price_domain(&has_bits);
          crafting_price_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double crafting_price_curve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_crafting_price_curve(&has_bits);
          crafting_price_curve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 crafting_xp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_crafting_xp(&has_bits);
          crafting_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationResponse_ArtifactParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec spec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // optional double base_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_base_quality(), target);
  }

  // optional double value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // optional double odds_multiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_odds_multiplier(), target);
  }

  // optional double crafting_price = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_crafting_price(), target);
  }

  // optional double crafting_price_low = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_crafting_price_low(), target);
  }

  // optional uint32 crafting_price_domain = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_crafting_price_domain(), target);
  }

  // optional double crafting_price_curve = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_crafting_price_curve(), target);
  }

  // optional uint64 crafting_xp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_crafting_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  return target;
}

size_t ArtifactsConfigurationResponse_ArtifactParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ei.ArtifactSpec spec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional double base_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double odds_multiplier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double crafting_price = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double crafting_price_low = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double crafting_price_curve = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint64 crafting_xp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crafting_xp());
    }

  }
  // optional uint32 crafting_price_domain = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crafting_price_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationResponse_ArtifactParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationResponse_ArtifactParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationResponse_ArtifactParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationResponse.ArtifactParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationResponse.ArtifactParameters)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationResponse_ArtifactParameters::MergeFrom(const ArtifactsConfigurationResponse_ArtifactParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000002u) {
      base_quality_ = from.base_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      odds_multiplier_ = from.odds_multiplier_;
    }
    if (cached_has_bits & 0x00000010u) {
      crafting_price_ = from.crafting_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      crafting_price_low_ = from.crafting_price_low_;
    }
    if (cached_has_bits & 0x00000040u) {
      crafting_price_curve_ = from.crafting_price_curve_;
    }
    if (cached_has_bits & 0x00000080u) {
      crafting_xp_ = from.crafting_xp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_crafting_price_domain(from._internal_crafting_price_domain());
  }
}

void ArtifactsConfigurationResponse_ArtifactParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationResponse_ArtifactParameters::CopyFrom(const ArtifactsConfigurationResponse_ArtifactParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationResponse.ArtifactParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationResponse_ArtifactParameters::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationResponse_ArtifactParameters::InternalSwap(ArtifactsConfigurationResponse_ArtifactParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_ArtifactParameters, crafting_price_domain_)
      + sizeof(ArtifactsConfigurationResponse_ArtifactParameters::crafting_price_domain_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_ArtifactParameters, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationResponse_ArtifactParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationResponse_CraftingLevelInfo::InitAsDefaultInstance() {
}
class ArtifactsConfigurationResponse_CraftingLevelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsConfigurationResponse_CraftingLevelInfo>()._has_bits_);
  static void set_has_xp_required(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rarity_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArtifactsConfigurationResponse_CraftingLevelInfo::ArtifactsConfigurationResponse_CraftingLevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
}
ArtifactsConfigurationResponse_CraftingLevelInfo::ArtifactsConfigurationResponse_CraftingLevelInfo(const ArtifactsConfigurationResponse_CraftingLevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xp_required_, &from.xp_required_,
    static_cast<size_t>(reinterpret_cast<char*>(&rarity_mult_) -
    reinterpret_cast<char*>(&xp_required_)) + sizeof(rarity_mult_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::SharedCtor() {
  ::memset(&xp_required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rarity_mult_) -
      reinterpret_cast<char*>(&xp_required_)) + sizeof(rarity_mult_));
}

ArtifactsConfigurationResponse_CraftingLevelInfo::~ArtifactsConfigurationResponse_CraftingLevelInfo() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::ArenaDtor(void* object) {
  ArtifactsConfigurationResponse_CraftingLevelInfo* _this = reinterpret_cast< ArtifactsConfigurationResponse_CraftingLevelInfo* >(object);
  (void)_this;
}
void ArtifactsConfigurationResponse_CraftingLevelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationResponse_CraftingLevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationResponse_CraftingLevelInfo& ArtifactsConfigurationResponse_CraftingLevelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationResponse_CraftingLevelInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationResponse_CraftingLevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&xp_required_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rarity_mult_) -
        reinterpret_cast<char*>(&xp_required_)) + sizeof(rarity_mult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationResponse_CraftingLevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double xp_required = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_xp_required(&has_bits);
          xp_required_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float rarity_mult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_rarity_mult(&has_bits);
          rarity_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationResponse_CraftingLevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xp_required = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xp_required(), target);
  }

  // optional float rarity_mult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rarity_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  return target;
}

size_t ArtifactsConfigurationResponse_CraftingLevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double xp_required = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional float rarity_mult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationResponse_CraftingLevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationResponse_CraftingLevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::MergeFrom(const ArtifactsConfigurationResponse_CraftingLevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      xp_required_ = from.xp_required_;
    }
    if (cached_has_bits & 0x00000002u) {
      rarity_mult_ = from.rarity_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::CopyFrom(const ArtifactsConfigurationResponse_CraftingLevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationResponse.CraftingLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationResponse_CraftingLevelInfo::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationResponse_CraftingLevelInfo::InternalSwap(ArtifactsConfigurationResponse_CraftingLevelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_CraftingLevelInfo, rarity_mult_)
      + sizeof(ArtifactsConfigurationResponse_CraftingLevelInfo::rarity_mult_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsConfigurationResponse_CraftingLevelInfo, xp_required_)>(
          reinterpret_cast<char*>(&xp_required_),
          reinterpret_cast<char*>(&other->xp_required_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationResponse_CraftingLevelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsConfigurationResponse::InitAsDefaultInstance() {
}
class ArtifactsConfigurationResponse::_Internal {
 public:
};

ArtifactsConfigurationResponse::ArtifactsConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_parameters_(arena),
  artifact_parameters_(arena),
  crafting_level_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsConfigurationResponse)
}
ArtifactsConfigurationResponse::ArtifactsConfigurationResponse(const ArtifactsConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mission_parameters_(from.mission_parameters_),
      artifact_parameters_(from.artifact_parameters_),
      crafting_level_infos_(from.crafting_level_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsConfigurationResponse)
}

void ArtifactsConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsConfigurationResponse_ei_2eproto.base);
}

ArtifactsConfigurationResponse::~ArtifactsConfigurationResponse() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsConfigurationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsConfigurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsConfigurationResponse::ArenaDtor(void* object) {
  ArtifactsConfigurationResponse* _this = reinterpret_cast< ArtifactsConfigurationResponse* >(object);
  (void)_this;
}
void ArtifactsConfigurationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsConfigurationResponse& ArtifactsConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsConfigurationResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_parameters_.Clear();
  artifact_parameters_.Clear();
  crafting_level_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ArtifactsConfigurationResponse.MissionParameters mission_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsConfigurationResponse.ArtifactParameters artifact_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifact_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsConfigurationResponse.CraftingLevelInfo crafting_level_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crafting_level_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ArtifactsConfigurationResponse.MissionParameters mission_parameters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mission_parameters(i), target, stream);
  }

  // repeated .ei.ArtifactsConfigurationResponse.ArtifactParameters artifact_parameters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artifact_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_artifact_parameters(i), target, stream);
  }

  // repeated .ei.ArtifactsConfigurationResponse.CraftingLevelInfo crafting_level_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crafting_level_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_crafting_level_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsConfigurationResponse)
  return target;
}

size_t ArtifactsConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactsConfigurationResponse.MissionParameters mission_parameters = 1;
  total_size += 1UL * this->_internal_mission_parameters_size();
  for (const auto& msg : this->mission_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsConfigurationResponse.ArtifactParameters artifact_parameters = 2;
  total_size += 1UL * this->_internal_artifact_parameters_size();
  for (const auto& msg : this->artifact_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsConfigurationResponse.CraftingLevelInfo crafting_level_infos = 3;
  total_size += 1UL * this->_internal_crafting_level_infos_size();
  for (const auto& msg : this->crafting_level_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsConfigurationResponse)
    MergeFrom(*source);
  }
}

void ArtifactsConfigurationResponse::MergeFrom(const ArtifactsConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_parameters_.MergeFrom(from.mission_parameters_);
  artifact_parameters_.MergeFrom(from.artifact_parameters_);
  crafting_level_infos_.MergeFrom(from.crafting_level_infos_);
}

void ArtifactsConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsConfigurationResponse::CopyFrom(const ArtifactsConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsConfigurationResponse::IsInitialized() const {
  return true;
}

void ArtifactsConfigurationResponse::InternalSwap(ArtifactsConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mission_parameters_.InternalSwap(&other->mission_parameters_);
  artifact_parameters_.InternalSwap(&other->artifact_parameters_);
  crafting_level_infos_.InternalSwap(&other->crafting_level_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionRequest::InitAsDefaultInstance() {
  ::ei::_MissionRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_MissionRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::ei::MissionInfo*>(
      ::ei::MissionInfo::internal_default_instance());
  ::ei::_MissionRequest_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::ei::ArtifactsClientInfo*>(
      ::ei::ArtifactsClientInfo::internal_default_instance());
}
class MissionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MissionRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const MissionRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::MissionInfo& info(const MissionRequest* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::ArtifactsClientInfo& client_info(const MissionRequest* msg);
  static void set_has_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::BasicRequestInfo&
MissionRequest::_Internal::rinfo(const MissionRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::MissionInfo&
MissionRequest::_Internal::info(const MissionRequest* msg) {
  return *msg->info_;
}
const ::ei::ArtifactsClientInfo&
MissionRequest::_Internal::client_info(const MissionRequest* msg) {
  return *msg->client_info_;
}
MissionRequest::MissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MissionRequest)
}
MissionRequest::MissionRequest(const MissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::ei::MissionInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::ei::ArtifactsClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:ei.MissionRequest)
}

void MissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionRequest_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&info_)) + sizeof(client_version_));
}

MissionRequest::~MissionRequest() {
  // @@protoc_insertion_point(destructor:ei.MissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete rinfo_;
  if (this != internal_default_instance()) delete client_info_;
}

void MissionRequest::ArenaDtor(void* object) {
  MissionRequest* _this = reinterpret_cast< MissionRequest* >(object);
  (void)_this;
}
void MissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionRequest& MissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void MissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(client_info_ != nullptr);
      client_info_->Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.MissionRequest.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactsClientInfo client_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  // optional .ei.MissionInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // optional string ei_user_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.MissionRequest.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ei_user_id(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rinfo(this), target, stream);
  }

  // optional .ei.ArtifactsClientInfo client_info = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::client_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MissionRequest)
  return target;
}

size_t MissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ei_user_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional .ei.MissionInfo info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .ei.BasicRequestInfo rinfo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.ArtifactsClientInfo client_info = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *client_info_);
    }

    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MissionRequest)
    MergeFrom(*source);
  }
}

void MissionRequest::MergeFrom(const MissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::ei::MissionInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_client_info()->::ei::ArtifactsClientInfo::MergeFrom(from._internal_client_info());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionRequest::CopyFrom(const MissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionRequest::IsInitialized() const {
  return true;
}

void MissionRequest::InternalSwap(MissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionRequest, client_version_)
      + sizeof(MissionRequest::client_version_)
      - PROTOBUF_FIELD_OFFSET(MissionRequest, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionResponse::InitAsDefaultInstance() {
  ::ei::_MissionResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::ei::MissionInfo*>(
      ::ei::MissionInfo::internal_default_instance());
}
class MissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MissionResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::MissionInfo& info(const MissionResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::MissionInfo&
MissionResponse::_Internal::info(const MissionResponse* msg) {
  return *msg->info_;
}
MissionResponse::MissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.MissionResponse)
}
MissionResponse::MissionResponse(const MissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::ei::MissionInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ei.MissionResponse)
}

void MissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionResponse_ei_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&info_)) + sizeof(success_));
}

MissionResponse::~MissionResponse() {
  // @@protoc_insertion_point(destructor:ei.MissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void MissionResponse::ArenaDtor(void* object) {
  MissionResponse* _this = reinterpret_cast< MissionResponse* >(object);
  (void)_this;
}
void MissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionResponse& MissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void MissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.MissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.MissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional .ei.MissionInfo info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.MissionResponse)
  return target;
}

size_t MissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.MissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.MissionInfo info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.MissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.MissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.MissionResponse)
    MergeFrom(*source);
  }
}

void MissionResponse::MergeFrom(const MissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.MissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::ei::MissionInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.MissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionResponse::CopyFrom(const MissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.MissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionResponse::IsInitialized() const {
  return true;
}

void MissionResponse::InternalSwap(MissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionResponse, success_)
      + sizeof(MissionResponse::success_)
      - PROTOBUF_FIELD_OFFSET(MissionResponse, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteMissionResponse_SecureArtifactSpec::InitAsDefaultInstance() {
  ::ei::_CompleteMissionResponse_SecureArtifactSpec_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class CompleteMissionResponse_SecureArtifactSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteMissionResponse_SecureArtifactSpec>()._has_bits_);
  static const ::ei::ArtifactSpec& spec(const CompleteMissionResponse_SecureArtifactSpec* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::ArtifactSpec&
CompleteMissionResponse_SecureArtifactSpec::_Internal::spec(const CompleteMissionResponse_SecureArtifactSpec* msg) {
  return *msg->spec_;
}
CompleteMissionResponse_SecureArtifactSpec::CompleteMissionResponse_SecureArtifactSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CompleteMissionResponse.SecureArtifactSpec)
}
CompleteMissionResponse_SecureArtifactSpec::CompleteMissionResponse_SecureArtifactSpec(const CompleteMissionResponse_SecureArtifactSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_id()) {
    server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.CompleteMissionResponse.SecureArtifactSpec)
}

void CompleteMissionResponse_SecureArtifactSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spec_ = nullptr;
}

CompleteMissionResponse_SecureArtifactSpec::~CompleteMissionResponse_SecureArtifactSpec() {
  // @@protoc_insertion_point(destructor:ei.CompleteMissionResponse.SecureArtifactSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteMissionResponse_SecureArtifactSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
}

void CompleteMissionResponse_SecureArtifactSpec::ArenaDtor(void* object) {
  CompleteMissionResponse_SecureArtifactSpec* _this = reinterpret_cast< CompleteMissionResponse_SecureArtifactSpec* >(object);
  (void)_this;
}
void CompleteMissionResponse_SecureArtifactSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteMissionResponse_SecureArtifactSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteMissionResponse_SecureArtifactSpec& CompleteMissionResponse_SecureArtifactSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteMissionResponse_SecureArtifactSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void CompleteMissionResponse_SecureArtifactSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteMissionResponse_SecureArtifactSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CompleteMissionResponse.SecureArtifactSpec.server_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteMissionResponse_SecureArtifactSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec spec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // optional string server_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CompleteMissionResponse.SecureArtifactSpec.server_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CompleteMissionResponse.SecureArtifactSpec)
  return target;
}

size_t CompleteMissionResponse_SecureArtifactSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string server_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional .ei.ArtifactSpec spec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteMissionResponse_SecureArtifactSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteMissionResponse_SecureArtifactSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteMissionResponse_SecureArtifactSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CompleteMissionResponse.SecureArtifactSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CompleteMissionResponse.SecureArtifactSpec)
    MergeFrom(*source);
  }
}

void CompleteMissionResponse_SecureArtifactSpec::MergeFrom(const CompleteMissionResponse_SecureArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
    }
  }
}

void CompleteMissionResponse_SecureArtifactSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteMissionResponse_SecureArtifactSpec::CopyFrom(const CompleteMissionResponse_SecureArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CompleteMissionResponse.SecureArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteMissionResponse_SecureArtifactSpec::IsInitialized() const {
  return true;
}

void CompleteMissionResponse_SecureArtifactSpec::InternalSwap(CompleteMissionResponse_SecureArtifactSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(spec_, other->spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteMissionResponse_SecureArtifactSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteMissionResponse::InitAsDefaultInstance() {
  ::ei::_CompleteMissionResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::ei::MissionInfo*>(
      ::ei::MissionInfo::internal_default_instance());
}
class CompleteMissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompleteMissionResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::MissionInfo& info(const CompleteMissionResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::MissionInfo&
CompleteMissionResponse::_Internal::info(const CompleteMissionResponse* msg) {
  return *msg->info_;
}
CompleteMissionResponse::CompleteMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  artifacts_(arena),
  other_rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CompleteMissionResponse)
}
CompleteMissionResponse::CompleteMissionResponse(const CompleteMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      artifacts_(from.artifacts_),
      other_rewards_(from.other_rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::ei::MissionInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ei.CompleteMissionResponse)
}

void CompleteMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteMissionResponse_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&info_)) + sizeof(success_));
}

CompleteMissionResponse::~CompleteMissionResponse() {
  // @@protoc_insertion_point(destructor:ei.CompleteMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void CompleteMissionResponse::ArenaDtor(void* object) {
  CompleteMissionResponse* _this = reinterpret_cast< CompleteMissionResponse* >(object);
  (void)_this;
}
void CompleteMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteMissionResponse& CompleteMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteMissionResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void CompleteMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CompleteMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifacts_.Clear();
  other_rewards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.CompleteMissionResponse.SecureArtifactSpec artifacts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.Reward other_rewards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_other_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CompleteMissionResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CompleteMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional .ei.MissionInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // repeated .ei.CompleteMissionResponse.SecureArtifactSpec artifacts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artifacts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_artifacts(i), target, stream);
  }

  // repeated .ei.Reward other_rewards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_other_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_other_rewards(i), target, stream);
  }

  // optional string ei_user_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CompleteMissionResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CompleteMissionResponse)
  return target;
}

size_t CompleteMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CompleteMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.CompleteMissionResponse.SecureArtifactSpec artifacts = 3;
  total_size += 1UL * this->_internal_artifacts_size();
  for (const auto& msg : this->artifacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Reward other_rewards = 4;
  total_size += 1UL * this->_internal_other_rewards_size();
  for (const auto& msg : this->other_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ei_user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional .ei.MissionInfo info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CompleteMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CompleteMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CompleteMissionResponse)
    MergeFrom(*source);
  }
}

void CompleteMissionResponse::MergeFrom(const CompleteMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CompleteMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifacts_.MergeFrom(from.artifacts_);
  other_rewards_.MergeFrom(from.other_rewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::ei::MissionInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompleteMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CompleteMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteMissionResponse::CopyFrom(const CompleteMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CompleteMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteMissionResponse::IsInitialized() const {
  return true;
}

void CompleteMissionResponse::InternalSwap(CompleteMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  artifacts_.InternalSwap(&other->artifacts_);
  other_rewards_.InternalSwap(&other->other_rewards_);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompleteMissionResponse, success_)
      + sizeof(CompleteMissionResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CompleteMissionResponse, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectContractArtifactRewardsRequest::InitAsDefaultInstance() {
  ::ei::_CollectContractArtifactRewardsRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class CollectContractArtifactRewardsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CollectContractArtifactRewardsRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const CollectContractArtifactRewardsRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contract_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goal_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_best_ship(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::BasicRequestInfo&
CollectContractArtifactRewardsRequest::_Internal::rinfo(const CollectContractArtifactRewardsRequest* msg) {
  return *msg->rinfo_;
}
CollectContractArtifactRewardsRequest::CollectContractArtifactRewardsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CollectContractArtifactRewardsRequest)
}
CollectContractArtifactRewardsRequest::CollectContractArtifactRewardsRequest(const CollectContractArtifactRewardsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_identifier()) {
    contract_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_identifier(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&goal_index_, &from.goal_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&grade_) -
    reinterpret_cast<char*>(&goal_index_)) + sizeof(grade_));
  // @@protoc_insertion_point(copy_constructor:ei.CollectContractArtifactRewardsRequest)
}

void CollectContractArtifactRewardsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectContractArtifactRewardsRequest_ei_2eproto.base);
  contract_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grade_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(grade_));
}

CollectContractArtifactRewardsRequest::~CollectContractArtifactRewardsRequest() {
  // @@protoc_insertion_point(destructor:ei.CollectContractArtifactRewardsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CollectContractArtifactRewardsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void CollectContractArtifactRewardsRequest::ArenaDtor(void* object) {
  CollectContractArtifactRewardsRequest* _this = reinterpret_cast< CollectContractArtifactRewardsRequest* >(object);
  (void)_this;
}
void CollectContractArtifactRewardsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectContractArtifactRewardsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectContractArtifactRewardsRequest& CollectContractArtifactRewardsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectContractArtifactRewardsRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void CollectContractArtifactRewardsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CollectContractArtifactRewardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      contract_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&goal_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grade_) -
        reinterpret_cast<char*>(&goal_index_)) + sizeof(grade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectContractArtifactRewardsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string contract_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CollectContractArtifactRewardsRequest.contract_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goal_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_goal_index(&has_bits);
          goal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.MissionInfo.Spaceship best_ship = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::MissionInfo_Spaceship_IsValid(val))) {
            _internal_set_best_ship(static_cast<::ei::MissionInfo_Spaceship>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 league = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_league(&has_bits);
          league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Contract.PlayerGrade grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Contract_PlayerGrade_IsValid(val))) {
            _internal_set_grade(static_cast<::ei::Contract_PlayerGrade>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectContractArtifactRewardsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CollectContractArtifactRewardsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // optional string contract_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contract_identifier().data(), static_cast<int>(this->_internal_contract_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CollectContractArtifactRewardsRequest.contract_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_identifier(), target);
  }

  // optional uint32 goal_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_goal_index(), target);
  }

  // optional .ei.MissionInfo.Spaceship best_ship = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_best_ship(), target);
  }

  // optional uint32 league = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_league(), target);
  }

  // optional .ei.Contract.PlayerGrade grade = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CollectContractArtifactRewardsRequest)
  return target;
}

size_t CollectContractArtifactRewardsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CollectContractArtifactRewardsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string contract_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_identifier());
    }

    // optional .ei.BasicRequestInfo rinfo = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 goal_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goal_index());
    }

    // optional .ei.MissionInfo.Spaceship best_ship = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_best_ship());
    }

    // optional uint32 league = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league());
    }

    // optional .ei.Contract.PlayerGrade grade = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_grade());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectContractArtifactRewardsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CollectContractArtifactRewardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectContractArtifactRewardsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectContractArtifactRewardsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CollectContractArtifactRewardsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CollectContractArtifactRewardsRequest)
    MergeFrom(*source);
  }
}

void CollectContractArtifactRewardsRequest::MergeFrom(const CollectContractArtifactRewardsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CollectContractArtifactRewardsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_identifier(from._internal_contract_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      goal_index_ = from.goal_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      best_ship_ = from.best_ship_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_ = from.league_;
    }
    if (cached_has_bits & 0x00000020u) {
      grade_ = from.grade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CollectContractArtifactRewardsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CollectContractArtifactRewardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectContractArtifactRewardsRequest::CopyFrom(const CollectContractArtifactRewardsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CollectContractArtifactRewardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectContractArtifactRewardsRequest::IsInitialized() const {
  return true;
}

void CollectContractArtifactRewardsRequest::InternalSwap(CollectContractArtifactRewardsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_identifier_.Swap(&other->contract_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectContractArtifactRewardsRequest, grade_)
      + sizeof(CollectContractArtifactRewardsRequest::grade_)
      - PROTOBUF_FIELD_OFFSET(CollectContractArtifactRewardsRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectContractArtifactRewardsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CraftArtifactRequest::InitAsDefaultInstance() {
  ::ei::_CraftArtifactRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_CraftArtifactRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class CraftArtifactRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CraftArtifactRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const CraftArtifactRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ArtifactSpec& spec(const CraftArtifactRequest* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gold_price_paid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crafting_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crafting_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::BasicRequestInfo&
CraftArtifactRequest::_Internal::rinfo(const CraftArtifactRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::ArtifactSpec&
CraftArtifactRequest::_Internal::spec(const CraftArtifactRequest* msg) {
  return *msg->spec_;
}
CraftArtifactRequest::CraftArtifactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ingredients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CraftArtifactRequest)
}
CraftArtifactRequest::CraftArtifactRequest(const CraftArtifactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ingredients_(from.ingredients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&crafting_count_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(crafting_count_));
  // @@protoc_insertion_point(copy_constructor:ei.CraftArtifactRequest)
}

void CraftArtifactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CraftArtifactRequest_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crafting_count_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(crafting_count_));
}

CraftArtifactRequest::~CraftArtifactRequest() {
  // @@protoc_insertion_point(destructor:ei.CraftArtifactRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CraftArtifactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete rinfo_;
}

void CraftArtifactRequest::ArenaDtor(void* object) {
  CraftArtifactRequest* _this = reinterpret_cast< CraftArtifactRequest* >(object);
  (void)_this;
}
void CraftArtifactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CraftArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CraftArtifactRequest& CraftArtifactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CraftArtifactRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void CraftArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CraftArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingredients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crafting_count_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(crafting_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraftArtifactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ei_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CraftArtifactRequest.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactInventoryItem ingredients = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ingredients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gold_price_paid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_gold_price_paid(&has_bits);
          gold_price_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 crafting_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_crafting_count(&has_bits);
          crafting_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double crafting_xp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_crafting_xp(&has_bits);
          crafting_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CraftArtifactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CraftArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ei_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CraftArtifactRequest.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_user_id(), target);
  }

  // optional .ei.ArtifactSpec spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  // repeated .ei.ArtifactInventoryItem ingredients = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ingredients_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ingredients(i), target, stream);
  }

  // optional .ei.BasicRequestInfo rinfo = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rinfo(this), target, stream);
  }

  // optional double gold_price_paid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_gold_price_paid(), target);
  }

  // optional uint32 crafting_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_crafting_count(), target);
  }

  // optional double crafting_xp = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_crafting_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CraftArtifactRequest)
  return target;
}

size_t CraftArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CraftArtifactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactInventoryItem ingredients = 4;
  total_size += 1UL * this->_internal_ingredients_size();
  for (const auto& msg : this->ingredients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string ei_user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional .ei.ArtifactSpec spec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ei.BasicRequestInfo rinfo = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional double gold_price_paid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double crafting_xp = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 crafting_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crafting_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CraftArtifactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CraftArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CraftArtifactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CraftArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CraftArtifactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CraftArtifactRequest)
    MergeFrom(*source);
  }
}

void CraftArtifactRequest::MergeFrom(const CraftArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CraftArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingredients_.MergeFrom(from.ingredients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      gold_price_paid_ = from.gold_price_paid_;
    }
    if (cached_has_bits & 0x00000020u) {
      crafting_xp_ = from.crafting_xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      crafting_count_ = from.crafting_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CraftArtifactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CraftArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraftArtifactRequest::CopyFrom(const CraftArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CraftArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraftArtifactRequest::IsInitialized() const {
  return true;
}

void CraftArtifactRequest::InternalSwap(CraftArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ingredients_.InternalSwap(&other->ingredients_);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraftArtifactRequest, crafting_count_)
      + sizeof(CraftArtifactRequest::crafting_count_)
      - PROTOBUF_FIELD_OFFSET(CraftArtifactRequest, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraftArtifactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CraftArtifactResponse::InitAsDefaultInstance() {
}
class CraftArtifactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CraftArtifactResponse>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rarity_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CraftArtifactResponse::CraftArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CraftArtifactResponse)
}
CraftArtifactResponse::CraftArtifactResponse(const CraftArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_id()) {
    server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rarity_achieved_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(rarity_achieved_));
  // @@protoc_insertion_point(copy_constructor:ei.CraftArtifactResponse)
}

void CraftArtifactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CraftArtifactResponse_ei_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rarity_achieved_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(rarity_achieved_));
}

CraftArtifactResponse::~CraftArtifactResponse() {
  // @@protoc_insertion_point(destructor:ei.CraftArtifactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CraftArtifactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CraftArtifactResponse::ArenaDtor(void* object) {
  CraftArtifactResponse* _this = reinterpret_cast< CraftArtifactResponse* >(object);
  (void)_this;
}
void CraftArtifactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CraftArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CraftArtifactResponse& CraftArtifactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CraftArtifactResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void CraftArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CraftArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rarity_achieved_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(rarity_achieved_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraftArtifactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactSpec.Rarity rarity_achieved = 2 [default = COMMON];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ArtifactSpec_Rarity_IsValid(val))) {
            _internal_set_rarity_achieved(static_cast<::ei::ArtifactSpec_Rarity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CraftArtifactResponse.server_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CraftArtifactResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CraftArtifactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CraftArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .ei.ArtifactSpec.Rarity rarity_achieved = 2 [default = COMMON];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rarity_achieved(), target);
  }

  // optional string server_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CraftArtifactResponse.server_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_id(), target);
  }

  // optional string ei_user_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CraftArtifactResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CraftArtifactResponse)
  return target;
}

size_t CraftArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CraftArtifactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string server_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional string ei_user_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .ei.ArtifactSpec.Rarity rarity_achieved = 2 [default = COMMON];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rarity_achieved());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CraftArtifactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CraftArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CraftArtifactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CraftArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CraftArtifactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CraftArtifactResponse)
    MergeFrom(*source);
  }
}

void CraftArtifactResponse::MergeFrom(const CraftArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CraftArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      rarity_achieved_ = from.rarity_achieved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CraftArtifactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CraftArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraftArtifactResponse::CopyFrom(const CraftArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CraftArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraftArtifactResponse::IsInitialized() const {
  return true;
}

void CraftArtifactResponse::InternalSwap(CraftArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraftArtifactResponse, rarity_achieved_)
      + sizeof(CraftArtifactResponse::rarity_achieved_)
      - PROTOBUF_FIELD_OFFSET(CraftArtifactResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraftArtifactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsumeArtifactRequest::InitAsDefaultInstance() {
  ::ei::_ConsumeArtifactRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_ConsumeArtifactRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class ConsumeArtifactRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsumeArtifactRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ConsumeArtifactRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ArtifactSpec& spec(const ConsumeArtifactRequest* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_artifact_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::BasicRequestInfo&
ConsumeArtifactRequest::_Internal::rinfo(const ConsumeArtifactRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::ArtifactSpec&
ConsumeArtifactRequest::_Internal::spec(const ConsumeArtifactRequest* msg) {
  return *msg->spec_;
}
ConsumeArtifactRequest::ConsumeArtifactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_server_ids_(arena),
  additional_item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ConsumeArtifactRequest)
}
ConsumeArtifactRequest::ConsumeArtifactRequest(const ConsumeArtifactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_server_ids_(from.additional_server_ids_),
      additional_item_ids_(from.additional_item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  artifact_server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_artifact_server_id()) {
    artifact_server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_artifact_server_id(),
      GetArena());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:ei.ConsumeArtifactRequest)
}

void ConsumeArtifactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsumeArtifactRequest_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artifact_server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(quantity_));
}

ConsumeArtifactRequest::~ConsumeArtifactRequest() {
  // @@protoc_insertion_point(destructor:ei.ConsumeArtifactRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsumeArtifactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artifact_server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete rinfo_;
}

void ConsumeArtifactRequest::ArenaDtor(void* object) {
  ConsumeArtifactRequest* _this = reinterpret_cast< ConsumeArtifactRequest* >(object);
  (void)_this;
}
void ConsumeArtifactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsumeArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsumeArtifactRequest& ConsumeArtifactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsumeArtifactRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void ConsumeArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ConsumeArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_server_ids_.Clear();
  additional_item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      artifact_server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsumeArtifactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ConsumeArtifactRequest.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string artifact_server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_artifact_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ConsumeArtifactRequest.artifact_server_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string additional_server_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_server_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ConsumeArtifactRequest.additional_server_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 additional_item_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_additional_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_additional_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsumeArtifactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ConsumeArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec spec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // optional uint64 original_item_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_item_id(), target);
  }

  // optional string ei_user_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ConsumeArtifactRequest.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ei_user_id(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rinfo(this), target, stream);
  }

  // optional string artifact_server_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_artifact_server_id().data(), static_cast<int>(this->_internal_artifact_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ConsumeArtifactRequest.artifact_server_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_artifact_server_id(), target);
  }

  // optional uint32 quantity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_quantity(), target);
  }

  // repeated string additional_server_ids = 7;
  for (int i = 0, n = this->_internal_additional_server_ids_size(); i < n; i++) {
    const auto& s = this->_internal_additional_server_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ConsumeArtifactRequest.additional_server_ids");
    target = stream->WriteString(7, s, target);
  }

  // repeated uint64 additional_item_ids = 8;
  for (int i = 0, n = this->_internal_additional_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_additional_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ConsumeArtifactRequest)
  return target;
}

size_t ConsumeArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ConsumeArtifactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_server_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_server_ids_.size());
  for (int i = 0, n = additional_server_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_server_ids_.Get(i));
  }

  // repeated uint64 additional_item_ids = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->additional_item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string ei_user_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional string artifact_server_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_artifact_server_id());
    }

    // optional .ei.ArtifactSpec spec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional .ei.BasicRequestInfo rinfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint64 original_item_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional uint32 quantity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumeArtifactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ConsumeArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeArtifactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsumeArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ConsumeArtifactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ConsumeArtifactRequest)
    MergeFrom(*source);
  }
}

void ConsumeArtifactRequest::MergeFrom(const ConsumeArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ConsumeArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_server_ids_.MergeFrom(from.additional_server_ids_);
  additional_item_ids_.MergeFrom(from.additional_item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_artifact_server_id(from._internal_artifact_server_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConsumeArtifactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ConsumeArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeArtifactRequest::CopyFrom(const ConsumeArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ConsumeArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeArtifactRequest::IsInitialized() const {
  return true;
}

void ConsumeArtifactRequest::InternalSwap(ConsumeArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_server_ids_.InternalSwap(&other->additional_server_ids_);
  additional_item_ids_.InternalSwap(&other->additional_item_ids_);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  artifact_server_id_.Swap(&other->artifact_server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsumeArtifactRequest, quantity_)
      + sizeof(ConsumeArtifactRequest::quantity_)
      - PROTOBUF_FIELD_OFFSET(ConsumeArtifactRequest, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsumeArtifactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsumeArtifactResponse::InitAsDefaultInstance() {
}
class ConsumeArtifactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsumeArtifactResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConsumeArtifactResponse::ConsumeArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  byproducts_(arena),
  other_rewards_(arena),
  additional_item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ConsumeArtifactResponse)
}
ConsumeArtifactResponse::ConsumeArtifactResponse(const ConsumeArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      byproducts_(from.byproducts_),
      other_rewards_(from.other_rewards_),
      additional_item_ids_(from.additional_item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:ei.ConsumeArtifactResponse)
}

void ConsumeArtifactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsumeArtifactResponse_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
}

ConsumeArtifactResponse::~ConsumeArtifactResponse() {
  // @@protoc_insertion_point(destructor:ei.ConsumeArtifactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsumeArtifactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConsumeArtifactResponse::ArenaDtor(void* object) {
  ConsumeArtifactResponse* _this = reinterpret_cast< ConsumeArtifactResponse* >(object);
  (void)_this;
}
void ConsumeArtifactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsumeArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsumeArtifactResponse& ConsumeArtifactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsumeArtifactResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void ConsumeArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ConsumeArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byproducts_.Clear();
  other_rewards_.Clear();
  additional_item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ei_user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsumeArtifactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactSpec byproducts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byproducts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.Reward other_rewards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_other_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ConsumeArtifactResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 additional_item_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_additional_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_additional_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsumeArtifactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ConsumeArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint64 original_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_item_id(), target);
  }

  // repeated .ei.ArtifactSpec byproducts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_byproducts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_byproducts(i), target, stream);
  }

  // repeated .ei.Reward other_rewards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_other_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_other_rewards(i), target, stream);
  }

  // optional string ei_user_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ConsumeArtifactResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ei_user_id(), target);
  }

  // repeated uint64 additional_item_ids = 6;
  for (int i = 0, n = this->_internal_additional_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_additional_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ConsumeArtifactResponse)
  return target;
}

size_t ConsumeArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ConsumeArtifactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactSpec byproducts = 3;
  total_size += 1UL * this->_internal_byproducts_size();
  for (const auto& msg : this->byproducts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.Reward other_rewards = 4;
  total_size += 1UL * this->_internal_other_rewards_size();
  for (const auto& msg : this->other_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 additional_item_ids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->additional_item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ei_user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional uint64 original_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumeArtifactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ConsumeArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeArtifactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsumeArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ConsumeArtifactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ConsumeArtifactResponse)
    MergeFrom(*source);
  }
}

void ConsumeArtifactResponse::MergeFrom(const ConsumeArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ConsumeArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  byproducts_.MergeFrom(from.byproducts_);
  other_rewards_.MergeFrom(from.other_rewards_);
  additional_item_ids_.MergeFrom(from.additional_item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConsumeArtifactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ConsumeArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeArtifactResponse::CopyFrom(const ConsumeArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ConsumeArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeArtifactResponse::IsInitialized() const {
  return true;
}

void ConsumeArtifactResponse::InternalSwap(ConsumeArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  byproducts_.InternalSwap(&other->byproducts_);
  other_rewards_.InternalSwap(&other->other_rewards_);
  additional_item_ids_.InternalSwap(&other->additional_item_ids_);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsumeArtifactResponse, success_)
      + sizeof(ConsumeArtifactResponse::success_)
      - PROTOBUF_FIELD_OFFSET(ConsumeArtifactResponse, original_item_id_)>(
          reinterpret_cast<char*>(&original_item_id_),
          reinterpret_cast<char*>(&other->original_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsumeArtifactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthenticateArtifactResponse::InitAsDefaultInstance() {
}
class AuthenticateArtifactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateArtifactResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_demote(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delete_(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AuthenticateArtifactResponse::AuthenticateArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AuthenticateArtifactResponse)
}
AuthenticateArtifactResponse::AuthenticateArtifactResponse(const AuthenticateArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delete__) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(delete__));
  // @@protoc_insertion_point(copy_constructor:ei.AuthenticateArtifactResponse)
}

void AuthenticateArtifactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateArtifactResponse_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete__) -
      reinterpret_cast<char*>(&original_item_id_)) + sizeof(delete__));
}

AuthenticateArtifactResponse::~AuthenticateArtifactResponse() {
  // @@protoc_insertion_point(destructor:ei.AuthenticateArtifactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateArtifactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateArtifactResponse::ArenaDtor(void* object) {
  AuthenticateArtifactResponse* _this = reinterpret_cast< AuthenticateArtifactResponse* >(object);
  (void)_this;
}
void AuthenticateArtifactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticateArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateArtifactResponse& AuthenticateArtifactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateArtifactResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AuthenticateArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ei_user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delete__) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(delete__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateArtifactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool demote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_demote(&has_bits);
          demote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delete_(&has_bits);
          delete__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AuthenticateArtifactResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateArtifactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AuthenticateArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint64 original_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_item_id(), target);
  }

  // optional bool demote = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_demote(), target);
  }

  // optional bool delete = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delete_(), target);
  }

  // optional string ei_user_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AuthenticateArtifactResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AuthenticateArtifactResponse)
  return target;
}

size_t AuthenticateArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AuthenticateArtifactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ei_user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional uint64 original_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool demote = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool delete = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateArtifactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AuthenticateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateArtifactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AuthenticateArtifactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AuthenticateArtifactResponse)
    MergeFrom(*source);
  }
}

void AuthenticateArtifactResponse::MergeFrom(const AuthenticateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AuthenticateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      demote_ = from.demote_;
    }
    if (cached_has_bits & 0x00000010u) {
      delete__ = from.delete__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthenticateArtifactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AuthenticateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateArtifactResponse::CopyFrom(const AuthenticateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AuthenticateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateArtifactResponse::IsInitialized() const {
  return true;
}

void AuthenticateArtifactResponse::InternalSwap(AuthenticateArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateArtifactResponse, delete__)
      + sizeof(AuthenticateArtifactResponse::delete__)
      - PROTOBUF_FIELD_OFFSET(AuthenticateArtifactResponse, original_item_id_)>(
          reinterpret_cast<char*>(&original_item_id_),
          reinterpret_cast<char*>(&other->original_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateArtifactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetArtifactRequest::InitAsDefaultInstance() {
  ::ei::_SetArtifactRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_SetArtifactRequest_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::ei::ArtifactInventoryItem*>(
      ::ei::ArtifactInventoryItem::internal_default_instance());
}
class SetArtifactRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetArtifactRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const SetArtifactRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ArtifactInventoryItem& artifact(const SetArtifactRequest* msg);
  static void set_has_artifact(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gold_price_paid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::BasicRequestInfo&
SetArtifactRequest::_Internal::rinfo(const SetArtifactRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::ArtifactInventoryItem&
SetArtifactRequest::_Internal::artifact(const SetArtifactRequest* msg) {
  return *msg->artifact_;
}
SetArtifactRequest::SetArtifactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SetArtifactRequest)
}
SetArtifactRequest::SetArtifactRequest(const SetArtifactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stones_(from.stones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  if (from._internal_has_artifact()) {
    artifact_ = new ::ei::ArtifactInventoryItem(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  gold_price_paid_ = from.gold_price_paid_;
  // @@protoc_insertion_point(copy_constructor:ei.SetArtifactRequest)
}

void SetArtifactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetArtifactRequest_ei_2eproto.base);
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_price_paid_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(gold_price_paid_));
}

SetArtifactRequest::~SetArtifactRequest() {
  // @@protoc_insertion_point(destructor:ei.SetArtifactRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetArtifactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
  if (this != internal_default_instance()) delete artifact_;
}

void SetArtifactRequest::ArenaDtor(void* object) {
  SetArtifactRequest* _this = reinterpret_cast< SetArtifactRequest* >(object);
  (void)_this;
}
void SetArtifactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetArtifactRequest& SetArtifactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetArtifactRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void SetArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SetArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stones_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(artifact_ != nullptr);
      artifact_->Clear();
    }
  }
  gold_price_paid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetArtifactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ArtifactInventoryItem artifact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_artifact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactSpec stones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double gold_price_paid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gold_price_paid(&has_bits);
          gold_price_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetArtifactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SetArtifactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // optional .ei.ArtifactInventoryItem artifact = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::artifact(this), target, stream);
  }

  // repeated .ei.ArtifactSpec stones = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stones(i), target, stream);
  }

  // optional double gold_price_paid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gold_price_paid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SetArtifactRequest)
  return target;
}

size_t SetArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SetArtifactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactSpec stones = 3;
  total_size += 1UL * this->_internal_stones_size();
  for (const auto& msg : this->stones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ei.BasicRequestInfo rinfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.ArtifactInventoryItem artifact = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *artifact_);
    }

    // optional double gold_price_paid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetArtifactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetArtifactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SetArtifactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SetArtifactRequest)
    MergeFrom(*source);
  }
}

void SetArtifactRequest::MergeFrom(const SetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stones_.MergeFrom(from.stones_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_artifact()->::ei::ArtifactInventoryItem::MergeFrom(from._internal_artifact());
    }
    if (cached_has_bits & 0x00000004u) {
      gold_price_paid_ = from.gold_price_paid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetArtifactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetArtifactRequest::CopyFrom(const SetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetArtifactRequest::IsInitialized() const {
  return true;
}

void SetArtifactRequest::InternalSwap(SetArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stones_.InternalSwap(&other->stones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetArtifactRequest, gold_price_paid_)
      + sizeof(SetArtifactRequest::gold_price_paid_)
      - PROTOBUF_FIELD_OFFSET(SetArtifactRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetArtifactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetArtifactResponse::InitAsDefaultInstance() {
}
class SetArtifactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetArtifactResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetArtifactResponse::SetArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SetArtifactResponse)
}
SetArtifactResponse::SetArtifactResponse(const SetArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  ::memcpy(&original_item_id_, &from.original_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:ei.SetArtifactResponse)
}

void SetArtifactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetArtifactResponse_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
}

SetArtifactResponse::~SetArtifactResponse() {
  // @@protoc_insertion_point(destructor:ei.SetArtifactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetArtifactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetArtifactResponse::ArenaDtor(void* object) {
  SetArtifactResponse* _this = reinterpret_cast< SetArtifactResponse* >(object);
  (void)_this;
}
void SetArtifactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetArtifactResponse& SetArtifactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetArtifactResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void SetArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SetArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ei_user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&original_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&original_item_id_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetArtifactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_item_id(&has_bits);
          original_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ei_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SetArtifactResponse.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetArtifactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SetArtifactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint64 original_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_original_item_id(), target);
  }

  // optional string ei_user_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SetArtifactResponse.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SetArtifactResponse)
  return target;
}

size_t SetArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SetArtifactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ei_user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id());
    }

    // optional uint64 original_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_item_id());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetArtifactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetArtifactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SetArtifactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SetArtifactResponse)
    MergeFrom(*source);
  }
}

void SetArtifactResponse::MergeFrom(const SetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id(from._internal_ei_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      original_item_id_ = from.original_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetArtifactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetArtifactResponse::CopyFrom(const SetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetArtifactResponse::IsInitialized() const {
  return true;
}

void SetArtifactResponse::InternalSwap(SetArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetArtifactResponse, success_)
      + sizeof(SetArtifactResponse::success_)
      - PROTOBUF_FIELD_OFFSET(SetArtifactResponse, original_item_id_)>(
          reinterpret_cast<char*>(&original_item_id_),
          reinterpret_cast<char*>(&other->original_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetArtifactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsDB_ActiveArtifactSlot::InitAsDefaultInstance() {
}
class ArtifactsDB_ActiveArtifactSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsDB_ActiveArtifactSlot>()._has_bits_);
  static void set_has_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArtifactsDB_ActiveArtifactSlot::ArtifactsDB_ActiveArtifactSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsDB.ActiveArtifactSlot)
}
ArtifactsDB_ActiveArtifactSlot::ArtifactsDB_ActiveArtifactSlot(const ArtifactsDB_ActiveArtifactSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupied_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(occupied_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsDB.ActiveArtifactSlot)
}

void ArtifactsDB_ActiveArtifactSlot::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupied_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(occupied_));
}

ArtifactsDB_ActiveArtifactSlot::~ArtifactsDB_ActiveArtifactSlot() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsDB.ActiveArtifactSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsDB_ActiveArtifactSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsDB_ActiveArtifactSlot::ArenaDtor(void* object) {
  ArtifactsDB_ActiveArtifactSlot* _this = reinterpret_cast< ArtifactsDB_ActiveArtifactSlot* >(object);
  (void)_this;
}
void ArtifactsDB_ActiveArtifactSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsDB_ActiveArtifactSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsDB_ActiveArtifactSlot& ArtifactsDB_ActiveArtifactSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsDB_ActiveArtifactSlot_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsDB_ActiveArtifactSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsDB.ActiveArtifactSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&occupied_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(occupied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsDB_ActiveArtifactSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool occupied = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_occupied(&has_bits);
          occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsDB_ActiveArtifactSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsDB.ActiveArtifactSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool occupied = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_occupied(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsDB.ActiveArtifactSlot)
  return target;
}

size_t ArtifactsDB_ActiveArtifactSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsDB.ActiveArtifactSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional bool occupied = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsDB_ActiveArtifactSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsDB.ActiveArtifactSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsDB_ActiveArtifactSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsDB_ActiveArtifactSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsDB.ActiveArtifactSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsDB.ActiveArtifactSlot)
    MergeFrom(*source);
  }
}

void ArtifactsDB_ActiveArtifactSlot::MergeFrom(const ArtifactsDB_ActiveArtifactSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsDB.ActiveArtifactSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      occupied_ = from.occupied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsDB_ActiveArtifactSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsDB.ActiveArtifactSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsDB_ActiveArtifactSlot::CopyFrom(const ArtifactsDB_ActiveArtifactSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsDB.ActiveArtifactSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsDB_ActiveArtifactSlot::IsInitialized() const {
  return true;
}

void ArtifactsDB_ActiveArtifactSlot::InternalSwap(ArtifactsDB_ActiveArtifactSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsDB_ActiveArtifactSlot, occupied_)
      + sizeof(ArtifactsDB_ActiveArtifactSlot::occupied_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsDB_ActiveArtifactSlot, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsDB_ActiveArtifactSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsDB_ActiveArtifactSet::InitAsDefaultInstance() {
}
class ArtifactsDB_ActiveArtifactSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsDB_ActiveArtifactSet>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArtifactsDB_ActiveArtifactSet::ArtifactsDB_ActiveArtifactSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsDB.ActiveArtifactSet)
}
ArtifactsDB_ActiveArtifactSet::ArtifactsDB_ActiveArtifactSet(const ArtifactsDB_ActiveArtifactSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsDB.ActiveArtifactSet)
}

void ArtifactsDB_ActiveArtifactSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto.base);
  uid_ = 0u;
}

ArtifactsDB_ActiveArtifactSet::~ArtifactsDB_ActiveArtifactSet() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsDB.ActiveArtifactSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsDB_ActiveArtifactSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsDB_ActiveArtifactSet::ArenaDtor(void* object) {
  ArtifactsDB_ActiveArtifactSet* _this = reinterpret_cast< ArtifactsDB_ActiveArtifactSet* >(object);
  (void)_this;
}
void ArtifactsDB_ActiveArtifactSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsDB_ActiveArtifactSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsDB_ActiveArtifactSet& ArtifactsDB_ActiveArtifactSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsDB_ActiveArtifactSet_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsDB_ActiveArtifactSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsDB.ActiveArtifactSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsDB_ActiveArtifactSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ArtifactsDB.ActiveArtifactSlot slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsDB_ActiveArtifactSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsDB.ActiveArtifactSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ArtifactsDB.ActiveArtifactSlot slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_slots(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsDB.ActiveArtifactSet)
  return target;
}

size_t ArtifactsDB_ActiveArtifactSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsDB.ActiveArtifactSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactsDB.ActiveArtifactSlot slots = 1;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 uid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsDB_ActiveArtifactSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsDB.ActiveArtifactSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsDB_ActiveArtifactSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsDB_ActiveArtifactSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsDB.ActiveArtifactSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsDB.ActiveArtifactSet)
    MergeFrom(*source);
  }
}

void ArtifactsDB_ActiveArtifactSet::MergeFrom(const ArtifactsDB_ActiveArtifactSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsDB.ActiveArtifactSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from._internal_has_uid()) {
    _internal_set_uid(from._internal_uid());
  }
}

void ArtifactsDB_ActiveArtifactSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsDB.ActiveArtifactSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsDB_ActiveArtifactSet::CopyFrom(const ArtifactsDB_ActiveArtifactSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsDB.ActiveArtifactSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsDB_ActiveArtifactSet::IsInitialized() const {
  return true;
}

void ArtifactsDB_ActiveArtifactSet::InternalSwap(ArtifactsDB_ActiveArtifactSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsDB_ActiveArtifactSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsDB_CraftableArtifact::InitAsDefaultInstance() {
  ::ei::_ArtifactsDB_CraftableArtifact_default_instance_._instance.get_mutable()->spec_ = const_cast< ::ei::ArtifactSpec*>(
      ::ei::ArtifactSpec::internal_default_instance());
}
class ArtifactsDB_CraftableArtifact::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsDB_CraftableArtifact>()._has_bits_);
  static const ::ei::ArtifactSpec& spec(const ArtifactsDB_CraftableArtifact* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_discovered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_craftable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_recipe_discovered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::ArtifactSpec&
ArtifactsDB_CraftableArtifact::_Internal::spec(const ArtifactsDB_CraftableArtifact* msg) {
  return *msg->spec_;
}
ArtifactsDB_CraftableArtifact::ArtifactsDB_CraftableArtifact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsDB.CraftableArtifact)
}
ArtifactsDB_CraftableArtifact::ArtifactsDB_CraftableArtifact(const ArtifactsDB_CraftableArtifact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::ei::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&seen_) -
    reinterpret_cast<char*>(&count_)) + sizeof(seen_));
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsDB.CraftableArtifact)
}

void ArtifactsDB_CraftableArtifact::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto.base);
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seen_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(seen_));
}

ArtifactsDB_CraftableArtifact::~ArtifactsDB_CraftableArtifact() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsDB.CraftableArtifact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsDB_CraftableArtifact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spec_;
}

void ArtifactsDB_CraftableArtifact::ArenaDtor(void* object) {
  ArtifactsDB_CraftableArtifact* _this = reinterpret_cast< ArtifactsDB_CraftableArtifact* >(object);
  (void)_this;
}
void ArtifactsDB_CraftableArtifact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsDB_CraftableArtifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsDB_CraftableArtifact& ArtifactsDB_CraftableArtifact::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsDB_CraftableArtifact_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsDB_CraftableArtifact::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsDB.CraftableArtifact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(spec_ != nullptr);
    spec_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seen_) -
        reinterpret_cast<char*>(&count_)) + sizeof(seen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsDB_CraftableArtifact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ArtifactSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool seen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seen(&has_bits);
          seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool craftable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_craftable(&has_bits);
          craftable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool recipe_discovered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_recipe_discovered(&has_bits);
          recipe_discovered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool discovered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_discovered(&has_bits);
          discovered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsDB_CraftableArtifact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsDB.CraftableArtifact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ArtifactSpec spec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // optional bool seen = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_seen(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional bool craftable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_craftable(), target);
  }

  // optional bool recipe_discovered = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_recipe_discovered(), target);
  }

  // optional bool discovered = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_discovered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsDB.CraftableArtifact)
  return target;
}

size_t ArtifactsDB_CraftableArtifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsDB.CraftableArtifact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ei.ArtifactSpec spec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spec_);
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional bool discovered = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool craftable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool recipe_discovered = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool seen = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsDB_CraftableArtifact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsDB.CraftableArtifact)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsDB_CraftableArtifact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsDB_CraftableArtifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsDB.CraftableArtifact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsDB.CraftableArtifact)
    MergeFrom(*source);
  }
}

void ArtifactsDB_CraftableArtifact::MergeFrom(const ArtifactsDB_CraftableArtifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsDB.CraftableArtifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_spec()->::ei::ArtifactSpec::MergeFrom(from._internal_spec());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      discovered_ = from.discovered_;
    }
    if (cached_has_bits & 0x00000008u) {
      craftable_ = from.craftable_;
    }
    if (cached_has_bits & 0x00000010u) {
      recipe_discovered_ = from.recipe_discovered_;
    }
    if (cached_has_bits & 0x00000020u) {
      seen_ = from.seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArtifactsDB_CraftableArtifact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsDB.CraftableArtifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsDB_CraftableArtifact::CopyFrom(const ArtifactsDB_CraftableArtifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsDB.CraftableArtifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsDB_CraftableArtifact::IsInitialized() const {
  return true;
}

void ArtifactsDB_CraftableArtifact::InternalSwap(ArtifactsDB_CraftableArtifact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArtifactsDB_CraftableArtifact, seen_)
      + sizeof(ArtifactsDB_CraftableArtifact::seen_)
      - PROTOBUF_FIELD_OFFSET(ArtifactsDB_CraftableArtifact, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsDB_CraftableArtifact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtifactsDB::InitAsDefaultInstance() {
}
class ArtifactsDB::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtifactsDB>()._has_bits_);
  static void set_has_item_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArtifactsDB::ArtifactsDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inventory_items_(arena),
  inventory_slots_(arena),
  mission_infos_(arena),
  mission_archive_(arena),
  active_artifacts_deprecated_(arena),
  discovered_artifacts_deprecated_(arena),
  craftable_artifacts_deprecated_(arena),
  crafting_counts_deprecated_(arena),
  active_artifact_sets_(arena),
  artifact_status_(arena),
  saved_artifact_sets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ArtifactsDB)
}
ArtifactsDB::ArtifactsDB(const ArtifactsDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inventory_items_(from.inventory_items_),
      inventory_slots_(from.inventory_slots_),
      mission_infos_(from.mission_infos_),
      mission_archive_(from.mission_archive_),
      active_artifacts_deprecated_(from.active_artifacts_deprecated_),
      discovered_artifacts_deprecated_(from.discovered_artifacts_deprecated_),
      craftable_artifacts_deprecated_(from.craftable_artifacts_deprecated_),
      crafting_counts_deprecated_(from.crafting_counts_deprecated_),
      active_artifact_sets_(from.active_artifact_sets_),
      artifact_status_(from.artifact_status_),
      saved_artifact_sets_(from.saved_artifact_sets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_sequence_ = from.item_sequence_;
  // @@protoc_insertion_point(copy_constructor:ei.ArtifactsDB)
}

void ArtifactsDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtifactsDB_ei_2eproto.base);
  item_sequence_ = PROTOBUF_ULONGLONG(0);
}

ArtifactsDB::~ArtifactsDB() {
  // @@protoc_insertion_point(destructor:ei.ArtifactsDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtifactsDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArtifactsDB::ArenaDtor(void* object) {
  ArtifactsDB* _this = reinterpret_cast< ArtifactsDB* >(object);
  (void)_this;
}
void ArtifactsDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactsDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactsDB& ArtifactsDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtifactsDB_ei_2eproto.base);
  return *internal_default_instance();
}


void ArtifactsDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ArtifactsDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inventory_items_.Clear();
  inventory_slots_.Clear();
  mission_infos_.Clear();
  mission_archive_.Clear();
  active_artifacts_deprecated_.Clear();
  discovered_artifacts_deprecated_.Clear();
  craftable_artifacts_deprecated_.Clear();
  crafting_counts_deprecated_.Clear();
  active_artifact_sets_.Clear();
  artifact_status_.Clear();
  saved_artifact_sets_.Clear();
  item_sequence_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtifactsDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ArtifactInventoryItem inventory_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inventory_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 item_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_sequence(&has_bits);
          item_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.InventorySlot inventory_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inventory_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.MissionInfo mission_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.MissionInfo mission_archive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_archive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.ActiveArtifactSlot active_artifacts_DEPRECATED = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_artifacts_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactSpec discovered_artifacts_DEPRECATED = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discovered_artifacts_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.CraftableArtifact craftable_artifacts_DEPRECATED = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_craftable_artifacts_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.CraftableArtifact crafting_counts_DEPRECATED = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crafting_counts_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.ActiveArtifactSet active_artifact_sets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_artifact_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.CraftableArtifact artifact_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artifact_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ArtifactsDB.ActiveArtifactSet saved_artifact_sets = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved_artifact_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtifactsDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ArtifactsDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ArtifactInventoryItem inventory_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inventory_items(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_sequence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_sequence(), target);
  }

  // repeated .ei.InventorySlot inventory_slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inventory_slots(i), target, stream);
  }

  // repeated .ei.MissionInfo mission_infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mission_infos(i), target, stream);
  }

  // repeated .ei.MissionInfo mission_archive = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_archive_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mission_archive(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSlot active_artifacts_DEPRECATED = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_artifacts_deprecated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_active_artifacts_deprecated(i), target, stream);
  }

  // repeated .ei.ArtifactSpec discovered_artifacts_DEPRECATED = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_discovered_artifacts_deprecated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_discovered_artifacts_deprecated(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact craftable_artifacts_DEPRECATED = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_craftable_artifacts_deprecated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_craftable_artifacts_deprecated(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact crafting_counts_DEPRECATED = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crafting_counts_deprecated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_crafting_counts_deprecated(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSet active_artifact_sets = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_artifact_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_active_artifact_sets(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact artifact_status = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artifact_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_artifact_status(i), target, stream);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSet saved_artifact_sets = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_saved_artifact_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_saved_artifact_sets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ArtifactsDB)
  return target;
}

size_t ArtifactsDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ArtifactsDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ArtifactInventoryItem inventory_items = 1;
  total_size += 1UL * this->_internal_inventory_items_size();
  for (const auto& msg : this->inventory_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.InventorySlot inventory_slots = 3;
  total_size += 1UL * this->_internal_inventory_slots_size();
  for (const auto& msg : this->inventory_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.MissionInfo mission_infos = 4;
  total_size += 1UL * this->_internal_mission_infos_size();
  for (const auto& msg : this->mission_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.MissionInfo mission_archive = 5;
  total_size += 1UL * this->_internal_mission_archive_size();
  for (const auto& msg : this->mission_archive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSlot active_artifacts_DEPRECATED = 7;
  total_size += 1UL * this->_internal_active_artifacts_deprecated_size();
  for (const auto& msg : this->active_artifacts_deprecated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactSpec discovered_artifacts_DEPRECATED = 8;
  total_size += 1UL * this->_internal_discovered_artifacts_deprecated_size();
  for (const auto& msg : this->discovered_artifacts_deprecated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact craftable_artifacts_DEPRECATED = 9;
  total_size += 1UL * this->_internal_craftable_artifacts_deprecated_size();
  for (const auto& msg : this->craftable_artifacts_deprecated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact crafting_counts_DEPRECATED = 10;
  total_size += 1UL * this->_internal_crafting_counts_deprecated_size();
  for (const auto& msg : this->crafting_counts_deprecated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSet active_artifact_sets = 11;
  total_size += 1UL * this->_internal_active_artifact_sets_size();
  for (const auto& msg : this->active_artifact_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.CraftableArtifact artifact_status = 12;
  total_size += 1UL * this->_internal_artifact_status_size();
  for (const auto& msg : this->artifact_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ArtifactsDB.ActiveArtifactSet saved_artifact_sets = 13;
  total_size += 1UL * this->_internal_saved_artifact_sets_size();
  for (const auto& msg : this->saved_artifact_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 item_sequence = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactsDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ArtifactsDB)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactsDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtifactsDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ArtifactsDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ArtifactsDB)
    MergeFrom(*source);
  }
}

void ArtifactsDB::MergeFrom(const ArtifactsDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ArtifactsDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inventory_items_.MergeFrom(from.inventory_items_);
  inventory_slots_.MergeFrom(from.inventory_slots_);
  mission_infos_.MergeFrom(from.mission_infos_);
  mission_archive_.MergeFrom(from.mission_archive_);
  active_artifacts_deprecated_.MergeFrom(from.active_artifacts_deprecated_);
  discovered_artifacts_deprecated_.MergeFrom(from.discovered_artifacts_deprecated_);
  craftable_artifacts_deprecated_.MergeFrom(from.craftable_artifacts_deprecated_);
  crafting_counts_deprecated_.MergeFrom(from.crafting_counts_deprecated_);
  active_artifact_sets_.MergeFrom(from.active_artifact_sets_);
  artifact_status_.MergeFrom(from.artifact_status_);
  saved_artifact_sets_.MergeFrom(from.saved_artifact_sets_);
  if (from._internal_has_item_sequence()) {
    _internal_set_item_sequence(from._internal_item_sequence());
  }
}

void ArtifactsDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ArtifactsDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactsDB::CopyFrom(const ArtifactsDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ArtifactsDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactsDB::IsInitialized() const {
  return true;
}

void ArtifactsDB::InternalSwap(ArtifactsDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inventory_items_.InternalSwap(&other->inventory_items_);
  inventory_slots_.InternalSwap(&other->inventory_slots_);
  mission_infos_.InternalSwap(&other->mission_infos_);
  mission_archive_.InternalSwap(&other->mission_archive_);
  active_artifacts_deprecated_.InternalSwap(&other->active_artifacts_deprecated_);
  discovered_artifacts_deprecated_.InternalSwap(&other->discovered_artifacts_deprecated_);
  craftable_artifacts_deprecated_.InternalSwap(&other->craftable_artifacts_deprecated_);
  crafting_counts_deprecated_.InternalSwap(&other->crafting_counts_deprecated_);
  active_artifact_sets_.InternalSwap(&other->active_artifact_sets_);
  artifact_status_.InternalSwap(&other->artifact_status_);
  saved_artifact_sets_.InternalSwap(&other->saved_artifact_sets_);
  swap(item_sequence_, other->item_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactsDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthenticatedMessage::InitAsDefaultInstance() {
}
class AuthenticatedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticatedMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AuthenticatedMessage::AuthenticatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AuthenticatedMessage)
}
AuthenticatedMessage::AuthenticatedMessage(const AuthenticatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(original_size_));
  // @@protoc_insertion_point(copy_constructor:ei.AuthenticatedMessage)
}

void AuthenticatedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticatedMessage_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(original_size_));
}

AuthenticatedMessage::~AuthenticatedMessage() {
  // @@protoc_insertion_point(destructor:ei.AuthenticatedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticatedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticatedMessage::ArenaDtor(void* object) {
  AuthenticatedMessage* _this = reinterpret_cast< AuthenticatedMessage* >(object);
  (void)_this;
}
void AuthenticatedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthenticatedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticatedMessage& AuthenticatedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticatedMessage_ei_2eproto.base);
  return *internal_default_instance();
}


void AuthenticatedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AuthenticatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&original_size_) -
        reinterpret_cast<char*>(&version_)) + sizeof(original_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticatedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AuthenticatedMessage.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compressed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compressed(&has_bits);
          compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_original_size(&has_bits);
          original_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AuthenticatedMessage.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticatedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AuthenticatedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AuthenticatedMessage.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // optional uint32 version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // optional bool compressed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_compressed(), target);
  }

  // optional uint32 original_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_original_size(), target);
  }

  // optional string user_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AuthenticatedMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AuthenticatedMessage)
  return target;
}

size_t AuthenticatedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AuthenticatedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional string code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string user_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional uint32 version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional bool compressed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 original_size = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticatedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AuthenticatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticatedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticatedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AuthenticatedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AuthenticatedMessage)
    MergeFrom(*source);
  }
}

void AuthenticatedMessage::MergeFrom(const AuthenticatedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AuthenticatedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      compressed_ = from.compressed_;
    }
    if (cached_has_bits & 0x00000020u) {
      original_size_ = from.original_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthenticatedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AuthenticatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticatedMessage::CopyFrom(const AuthenticatedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AuthenticatedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticatedMessage::IsInitialized() const {
  return true;
}

void AuthenticatedMessage::InternalSwap(AuthenticatedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticatedMessage, original_size_)
      + sizeof(AuthenticatedMessage::original_size_)
      - PROTOBUF_FIELD_OFFSET(AuthenticatedMessage, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticatedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogCompleteMissionPayload::InitAsDefaultInstance() {
  ::ei::_LogCompleteMissionPayload_default_instance_._instance.get_mutable()->req_ = const_cast< ::ei::MissionRequest*>(
      ::ei::MissionRequest::internal_default_instance());
  ::ei::_LogCompleteMissionPayload_default_instance_._instance.get_mutable()->res_ = const_cast< ::ei::CompleteMissionResponse*>(
      ::ei::CompleteMissionResponse::internal_default_instance());
}
class LogCompleteMissionPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<LogCompleteMissionPayload>()._has_bits_);
  static const ::ei::MissionRequest& req(const LogCompleteMissionPayload* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::CompleteMissionResponse& res(const LogCompleteMissionPayload* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::MissionRequest&
LogCompleteMissionPayload::_Internal::req(const LogCompleteMissionPayload* msg) {
  return *msg->req_;
}
const ::ei::CompleteMissionResponse&
LogCompleteMissionPayload::_Internal::res(const LogCompleteMissionPayload* msg) {
  return *msg->res_;
}
LogCompleteMissionPayload::LogCompleteMissionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LogCompleteMissionPayload)
}
LogCompleteMissionPayload::LogCompleteMissionPayload(const LogCompleteMissionPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::ei::MissionRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_res()) {
    res_ = new ::ei::CompleteMissionResponse(*from.res_);
  } else {
    res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.LogCompleteMissionPayload)
}

void LogCompleteMissionPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogCompleteMissionPayload_ei_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&req_)) + sizeof(res_));
}

LogCompleteMissionPayload::~LogCompleteMissionPayload() {
  // @@protoc_insertion_point(destructor:ei.LogCompleteMissionPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogCompleteMissionPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete res_;
}

void LogCompleteMissionPayload::ArenaDtor(void* object) {
  LogCompleteMissionPayload* _this = reinterpret_cast< LogCompleteMissionPayload* >(object);
  (void)_this;
}
void LogCompleteMissionPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogCompleteMissionPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogCompleteMissionPayload& LogCompleteMissionPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogCompleteMissionPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void LogCompleteMissionPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LogCompleteMissionPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogCompleteMissionPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.MissionRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.CompleteMissionResponse res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogCompleteMissionPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LogCompleteMissionPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.MissionRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // optional .ei.CompleteMissionResponse res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LogCompleteMissionPayload)
  return target;
}

size_t LogCompleteMissionPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LogCompleteMissionPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.MissionRequest req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .ei.CompleteMissionResponse res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogCompleteMissionPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LogCompleteMissionPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const LogCompleteMissionPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogCompleteMissionPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LogCompleteMissionPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LogCompleteMissionPayload)
    MergeFrom(*source);
  }
}

void LogCompleteMissionPayload::MergeFrom(const LogCompleteMissionPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LogCompleteMissionPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::ei::MissionRequest::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::ei::CompleteMissionResponse::MergeFrom(from._internal_res());
    }
  }
}

void LogCompleteMissionPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LogCompleteMissionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogCompleteMissionPayload::CopyFrom(const LogCompleteMissionPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LogCompleteMissionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogCompleteMissionPayload::IsInitialized() const {
  return true;
}

void LogCompleteMissionPayload::InternalSwap(LogCompleteMissionPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogCompleteMissionPayload, res_)
      + sizeof(LogCompleteMissionPayload::res_)
      - PROTOBUF_FIELD_OFFSET(LogCompleteMissionPayload, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogCompleteMissionPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogCraftArtifactPayload::InitAsDefaultInstance() {
  ::ei::_LogCraftArtifactPayload_default_instance_._instance.get_mutable()->req_ = const_cast< ::ei::CraftArtifactRequest*>(
      ::ei::CraftArtifactRequest::internal_default_instance());
  ::ei::_LogCraftArtifactPayload_default_instance_._instance.get_mutable()->res_ = const_cast< ::ei::CraftArtifactResponse*>(
      ::ei::CraftArtifactResponse::internal_default_instance());
}
class LogCraftArtifactPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<LogCraftArtifactPayload>()._has_bits_);
  static const ::ei::CraftArtifactRequest& req(const LogCraftArtifactPayload* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::CraftArtifactResponse& res(const LogCraftArtifactPayload* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::CraftArtifactRequest&
LogCraftArtifactPayload::_Internal::req(const LogCraftArtifactPayload* msg) {
  return *msg->req_;
}
const ::ei::CraftArtifactResponse&
LogCraftArtifactPayload::_Internal::res(const LogCraftArtifactPayload* msg) {
  return *msg->res_;
}
LogCraftArtifactPayload::LogCraftArtifactPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LogCraftArtifactPayload)
}
LogCraftArtifactPayload::LogCraftArtifactPayload(const LogCraftArtifactPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::ei::CraftArtifactRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_res()) {
    res_ = new ::ei::CraftArtifactResponse(*from.res_);
  } else {
    res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.LogCraftArtifactPayload)
}

void LogCraftArtifactPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogCraftArtifactPayload_ei_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&req_)) + sizeof(res_));
}

LogCraftArtifactPayload::~LogCraftArtifactPayload() {
  // @@protoc_insertion_point(destructor:ei.LogCraftArtifactPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogCraftArtifactPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete res_;
}

void LogCraftArtifactPayload::ArenaDtor(void* object) {
  LogCraftArtifactPayload* _this = reinterpret_cast< LogCraftArtifactPayload* >(object);
  (void)_this;
}
void LogCraftArtifactPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogCraftArtifactPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogCraftArtifactPayload& LogCraftArtifactPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogCraftArtifactPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void LogCraftArtifactPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LogCraftArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogCraftArtifactPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.CraftArtifactRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.CraftArtifactResponse res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogCraftArtifactPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LogCraftArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.CraftArtifactRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // optional .ei.CraftArtifactResponse res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LogCraftArtifactPayload)
  return target;
}

size_t LogCraftArtifactPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LogCraftArtifactPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.CraftArtifactRequest req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .ei.CraftArtifactResponse res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogCraftArtifactPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LogCraftArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const LogCraftArtifactPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogCraftArtifactPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LogCraftArtifactPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LogCraftArtifactPayload)
    MergeFrom(*source);
  }
}

void LogCraftArtifactPayload::MergeFrom(const LogCraftArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LogCraftArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::ei::CraftArtifactRequest::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::ei::CraftArtifactResponse::MergeFrom(from._internal_res());
    }
  }
}

void LogCraftArtifactPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LogCraftArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogCraftArtifactPayload::CopyFrom(const LogCraftArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LogCraftArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogCraftArtifactPayload::IsInitialized() const {
  return true;
}

void LogCraftArtifactPayload::InternalSwap(LogCraftArtifactPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogCraftArtifactPayload, res_)
      + sizeof(LogCraftArtifactPayload::res_)
      - PROTOBUF_FIELD_OFFSET(LogCraftArtifactPayload, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogCraftArtifactPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogConsumeArtifactPayload::InitAsDefaultInstance() {
  ::ei::_LogConsumeArtifactPayload_default_instance_._instance.get_mutable()->req_ = const_cast< ::ei::ConsumeArtifactRequest*>(
      ::ei::ConsumeArtifactRequest::internal_default_instance());
  ::ei::_LogConsumeArtifactPayload_default_instance_._instance.get_mutable()->res_ = const_cast< ::ei::ConsumeArtifactResponse*>(
      ::ei::ConsumeArtifactResponse::internal_default_instance());
}
class LogConsumeArtifactPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<LogConsumeArtifactPayload>()._has_bits_);
  static const ::ei::ConsumeArtifactRequest& req(const LogConsumeArtifactPayload* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ConsumeArtifactResponse& res(const LogConsumeArtifactPayload* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::ConsumeArtifactRequest&
LogConsumeArtifactPayload::_Internal::req(const LogConsumeArtifactPayload* msg) {
  return *msg->req_;
}
const ::ei::ConsumeArtifactResponse&
LogConsumeArtifactPayload::_Internal::res(const LogConsumeArtifactPayload* msg) {
  return *msg->res_;
}
LogConsumeArtifactPayload::LogConsumeArtifactPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LogConsumeArtifactPayload)
}
LogConsumeArtifactPayload::LogConsumeArtifactPayload(const LogConsumeArtifactPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::ei::ConsumeArtifactRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_res()) {
    res_ = new ::ei::ConsumeArtifactResponse(*from.res_);
  } else {
    res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.LogConsumeArtifactPayload)
}

void LogConsumeArtifactPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogConsumeArtifactPayload_ei_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&req_)) + sizeof(res_));
}

LogConsumeArtifactPayload::~LogConsumeArtifactPayload() {
  // @@protoc_insertion_point(destructor:ei.LogConsumeArtifactPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogConsumeArtifactPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete res_;
}

void LogConsumeArtifactPayload::ArenaDtor(void* object) {
  LogConsumeArtifactPayload* _this = reinterpret_cast< LogConsumeArtifactPayload* >(object);
  (void)_this;
}
void LogConsumeArtifactPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogConsumeArtifactPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogConsumeArtifactPayload& LogConsumeArtifactPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogConsumeArtifactPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void LogConsumeArtifactPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LogConsumeArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogConsumeArtifactPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ConsumeArtifactRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ConsumeArtifactResponse res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogConsumeArtifactPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LogConsumeArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ConsumeArtifactRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // optional .ei.ConsumeArtifactResponse res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LogConsumeArtifactPayload)
  return target;
}

size_t LogConsumeArtifactPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LogConsumeArtifactPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.ConsumeArtifactRequest req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .ei.ConsumeArtifactResponse res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogConsumeArtifactPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LogConsumeArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const LogConsumeArtifactPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogConsumeArtifactPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LogConsumeArtifactPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LogConsumeArtifactPayload)
    MergeFrom(*source);
  }
}

void LogConsumeArtifactPayload::MergeFrom(const LogConsumeArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LogConsumeArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::ei::ConsumeArtifactRequest::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::ei::ConsumeArtifactResponse::MergeFrom(from._internal_res());
    }
  }
}

void LogConsumeArtifactPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LogConsumeArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogConsumeArtifactPayload::CopyFrom(const LogConsumeArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LogConsumeArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConsumeArtifactPayload::IsInitialized() const {
  return true;
}

void LogConsumeArtifactPayload::InternalSwap(LogConsumeArtifactPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogConsumeArtifactPayload, res_)
      + sizeof(LogConsumeArtifactPayload::res_)
      - PROTOBUF_FIELD_OFFSET(LogConsumeArtifactPayload, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogConsumeArtifactPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogSetArtifactPayload::InitAsDefaultInstance() {
  ::ei::_LogSetArtifactPayload_default_instance_._instance.get_mutable()->req_ = const_cast< ::ei::SetArtifactRequest*>(
      ::ei::SetArtifactRequest::internal_default_instance());
  ::ei::_LogSetArtifactPayload_default_instance_._instance.get_mutable()->res_ = const_cast< ::ei::SetArtifactResponse*>(
      ::ei::SetArtifactResponse::internal_default_instance());
}
class LogSetArtifactPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<LogSetArtifactPayload>()._has_bits_);
  static const ::ei::SetArtifactRequest& req(const LogSetArtifactPayload* msg);
  static void set_has_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::SetArtifactResponse& res(const LogSetArtifactPayload* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::SetArtifactRequest&
LogSetArtifactPayload::_Internal::req(const LogSetArtifactPayload* msg) {
  return *msg->req_;
}
const ::ei::SetArtifactResponse&
LogSetArtifactPayload::_Internal::res(const LogSetArtifactPayload* msg) {
  return *msg->res_;
}
LogSetArtifactPayload::LogSetArtifactPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.LogSetArtifactPayload)
}
LogSetArtifactPayload::LogSetArtifactPayload(const LogSetArtifactPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::ei::SetArtifactRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from._internal_has_res()) {
    res_ = new ::ei::SetArtifactResponse(*from.res_);
  } else {
    res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.LogSetArtifactPayload)
}

void LogSetArtifactPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogSetArtifactPayload_ei_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&req_)) + sizeof(res_));
}

LogSetArtifactPayload::~LogSetArtifactPayload() {
  // @@protoc_insertion_point(destructor:ei.LogSetArtifactPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSetArtifactPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete res_;
}

void LogSetArtifactPayload::ArenaDtor(void* object) {
  LogSetArtifactPayload* _this = reinterpret_cast< LogSetArtifactPayload* >(object);
  (void)_this;
}
void LogSetArtifactPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSetArtifactPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogSetArtifactPayload& LogSetArtifactPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogSetArtifactPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void LogSetArtifactPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.LogSetArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(req_ != nullptr);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(res_ != nullptr);
      res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSetArtifactPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.SetArtifactRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.SetArtifactResponse res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSetArtifactPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.LogSetArtifactPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.SetArtifactRequest req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // optional .ei.SetArtifactResponse res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.LogSetArtifactPayload)
  return target;
}

size_t LogSetArtifactPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.LogSetArtifactPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.SetArtifactRequest req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_);
    }

    // optional .ei.SetArtifactResponse res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *res_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSetArtifactPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.LogSetArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSetArtifactPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSetArtifactPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.LogSetArtifactPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.LogSetArtifactPayload)
    MergeFrom(*source);
  }
}

void LogSetArtifactPayload::MergeFrom(const LogSetArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.LogSetArtifactPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_req()->::ei::SetArtifactRequest::MergeFrom(from._internal_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_res()->::ei::SetArtifactResponse::MergeFrom(from._internal_res());
    }
  }
}

void LogSetArtifactPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.LogSetArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSetArtifactPayload::CopyFrom(const LogSetArtifactPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.LogSetArtifactPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSetArtifactPayload::IsInitialized() const {
  return true;
}

void LogSetArtifactPayload::InternalSwap(LogSetArtifactPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogSetArtifactPayload, res_)
      + sizeof(LogSetArtifactPayload::res_)
      - PROTOBUF_FIELD_OFFSET(LogSetArtifactPayload, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSetArtifactPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountTransferPayload::InitAsDefaultInstance() {
}
class AccountTransferPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountTransferPayload>()._has_bits_);
  static void set_has_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AccountTransferPayload::AccountTransferPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.AccountTransferPayload)
}
AccountTransferPayload::AccountTransferPayload(const AccountTransferPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_from_id()) {
    from_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_id(),
      GetArena());
  }
  to_ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_to_ei_user_id()) {
    to_ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_ei_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.AccountTransferPayload)
}

void AccountTransferPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountTransferPayload_ei_2eproto.base);
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountTransferPayload::~AccountTransferPayload() {
  // @@protoc_insertion_point(destructor:ei.AccountTransferPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountTransferPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountTransferPayload::ArenaDtor(void* object) {
  AccountTransferPayload* _this = reinterpret_cast< AccountTransferPayload* >(object);
  (void)_this;
}
void AccountTransferPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountTransferPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountTransferPayload& AccountTransferPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountTransferPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void AccountTransferPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.AccountTransferPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      to_ei_user_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountTransferPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string from_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AccountTransferPayload.from_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string to_ei_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.AccountTransferPayload.to_ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountTransferPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.AccountTransferPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_id().data(), static_cast<int>(this->_internal_from_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AccountTransferPayload.from_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_id(), target);
  }

  // optional string to_ei_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_to_ei_user_id().data(), static_cast<int>(this->_internal_to_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.AccountTransferPayload.to_ei_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.AccountTransferPayload)
  return target;
}

size_t AccountTransferPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.AccountTransferPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string from_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_id());
    }

    // optional string to_ei_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to_ei_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountTransferPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.AccountTransferPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountTransferPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountTransferPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.AccountTransferPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.AccountTransferPayload)
    MergeFrom(*source);
  }
}

void AccountTransferPayload::MergeFrom(const AccountTransferPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.AccountTransferPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_from_id(from._internal_from_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_to_ei_user_id(from._internal_to_ei_user_id());
    }
  }
}

void AccountTransferPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.AccountTransferPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountTransferPayload::CopyFrom(const AccountTransferPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.AccountTransferPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountTransferPayload::IsInitialized() const {
  return true;
}

void AccountTransferPayload::InternalSwap(AccountTransferPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_id_.Swap(&other->from_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_ei_user_id_.Swap(&other->to_ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountTransferPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveBackupResponse::InitAsDefaultInstance() {
  ::ei::_SaveBackupResponse_default_instance_._instance.get_mutable()->existing_backup_ = const_cast< ::ei::Backup*>(
      ::ei::Backup::internal_default_instance());
}
class SaveBackupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveBackupResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::Backup& existing_backup(const SaveBackupResponse* msg);
  static void set_has_existing_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::Backup&
SaveBackupResponse::_Internal::existing_backup(const SaveBackupResponse* msg) {
  return *msg->existing_backup_;
}
SaveBackupResponse::SaveBackupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SaveBackupResponse)
}
SaveBackupResponse::SaveBackupResponse(const SaveBackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_existing_backup()) {
    existing_backup_ = new ::ei::Backup(*from.existing_backup_);
  } else {
    existing_backup_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&success_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:ei.SaveBackupResponse)
}

void SaveBackupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveBackupResponse_ei_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&existing_backup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&existing_backup_)) + sizeof(error_code_));
}

SaveBackupResponse::~SaveBackupResponse() {
  // @@protoc_insertion_point(destructor:ei.SaveBackupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveBackupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete existing_backup_;
}

void SaveBackupResponse::ArenaDtor(void* object) {
  SaveBackupResponse* _this = reinterpret_cast< SaveBackupResponse* >(object);
  (void)_this;
}
void SaveBackupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveBackupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveBackupResponse& SaveBackupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveBackupResponse_ei_2eproto.base);
  return *internal_default_instance();
}


void SaveBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SaveBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(existing_backup_ != nullptr);
      existing_backup_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&success_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveBackupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SaveBackupResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Backup existing_backup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_existing_backup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveBackupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SaveBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint32 error_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SaveBackupResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional .ei.Backup existing_backup = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::existing_backup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SaveBackupResponse)
  return target;
}

size_t SaveBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SaveBackupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .ei.Backup existing_backup = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *existing_backup_);
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 error_code = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveBackupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SaveBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveBackupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveBackupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SaveBackupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SaveBackupResponse)
    MergeFrom(*source);
  }
}

void SaveBackupResponse::MergeFrom(const SaveBackupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SaveBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_existing_backup()->::ei::Backup::MergeFrom(from._internal_existing_backup());
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveBackupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SaveBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveBackupResponse::CopyFrom(const SaveBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SaveBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBackupResponse::IsInitialized() const {
  return true;
}

void SaveBackupResponse::InternalSwap(SaveBackupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveBackupResponse, error_code_)
      + sizeof(SaveBackupResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(SaveBackupResponse, existing_backup_)>(
          reinterpret_cast<char*>(&existing_backup_),
          reinterpret_cast<char*>(&other->existing_backup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveBackupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanAccountRequest::InitAsDefaultInstance() {
}
class CleanAccountRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanAccountRequest>()._has_bits_);
  static void set_has_ei_user_id_to_keep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_services_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CleanAccountRequest::CleanAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CleanAccountRequest)
}
CleanAccountRequest::CleanAccountRequest(const CleanAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_to_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id_to_keep()) {
    ei_user_id_to_keep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id_to_keep(),
      GetArena());
  }
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_services_id()) {
    game_services_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_services_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.CleanAccountRequest)
}

void CleanAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleanAccountRequest_ei_2eproto.base);
  ei_user_id_to_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CleanAccountRequest::~CleanAccountRequest() {
  // @@protoc_insertion_point(destructor:ei.CleanAccountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CleanAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_to_keep_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_services_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanAccountRequest::ArenaDtor(void* object) {
  CleanAccountRequest* _this = reinterpret_cast< CleanAccountRequest* >(object);
  (void)_this;
}
void CleanAccountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanAccountRequest& CleanAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanAccountRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void CleanAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CleanAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ei_user_id_to_keep_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_services_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ei_user_id_to_keep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ei_user_id_to_keep();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CleanAccountRequest.ei_user_id_to_keep");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_services_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_services_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CleanAccountRequest.game_services_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CleanAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ei_user_id_to_keep = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id_to_keep().data(), static_cast<int>(this->_internal_ei_user_id_to_keep().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CleanAccountRequest.ei_user_id_to_keep");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_user_id_to_keep(), target);
  }

  // optional string game_services_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_services_id().data(), static_cast<int>(this->_internal_game_services_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CleanAccountRequest.game_services_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_services_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CleanAccountRequest)
  return target;
}

size_t CleanAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CleanAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ei_user_id_to_keep = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ei_user_id_to_keep());
    }

    // optional string game_services_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_services_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CleanAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CleanAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CleanAccountRequest)
    MergeFrom(*source);
  }
}

void CleanAccountRequest::MergeFrom(const CleanAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CleanAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ei_user_id_to_keep(from._internal_ei_user_id_to_keep());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_services_id(from._internal_game_services_id());
    }
  }
}

void CleanAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CleanAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanAccountRequest::CopyFrom(const CleanAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CleanAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanAccountRequest::IsInitialized() const {
  return true;
}

void CleanAccountRequest::InternalSwap(CleanAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_to_keep_.Swap(&other->ei_user_id_to_keep_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_services_id_.Swap(&other->game_services_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReturnEDTPayload::InitAsDefaultInstance() {
}
class ReturnEDTPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<ReturnEDTPayload>()._has_bits_);
  static void set_has_ei_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReturnEDTPayload::ReturnEDTPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ReturnEDTPayload)
}
ReturnEDTPayload::ReturnEDTPayload(const ReturnEDTPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ei_user_id()) {
    ei_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ei_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.ReturnEDTPayload)
}

void ReturnEDTPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReturnEDTPayload_ei_2eproto.base);
  ei_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReturnEDTPayload::~ReturnEDTPayload() {
  // @@protoc_insertion_point(destructor:ei.ReturnEDTPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReturnEDTPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ei_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReturnEDTPayload::ArenaDtor(void* object) {
  ReturnEDTPayload* _this = reinterpret_cast< ReturnEDTPayload* >(object);
  (void)_this;
}
void ReturnEDTPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReturnEDTPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReturnEDTPayload& ReturnEDTPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReturnEDTPayload_ei_2eproto.base);
  return *internal_default_instance();
}


void ReturnEDTPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ReturnEDTPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ei_user_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnEDTPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ei_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ei_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ReturnEDTPayload.ei_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReturnEDTPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ReturnEDTPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ei_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ei_user_id().data(), static_cast<int>(this->_internal_ei_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ReturnEDTPayload.ei_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ReturnEDTPayload)
  return target;
}

size_t ReturnEDTPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ReturnEDTPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ei_user_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ei_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnEDTPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ReturnEDTPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnEDTPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReturnEDTPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ReturnEDTPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ReturnEDTPayload)
    MergeFrom(*source);
  }
}

void ReturnEDTPayload::MergeFrom(const ReturnEDTPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ReturnEDTPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ei_user_id()) {
    _internal_set_ei_user_id(from._internal_ei_user_id());
  }
}

void ReturnEDTPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ReturnEDTPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnEDTPayload::CopyFrom(const ReturnEDTPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ReturnEDTPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnEDTPayload::IsInitialized() const {
  return true;
}

void ReturnEDTPayload::InternalSwap(ReturnEDTPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ei_user_id_.Swap(&other->ei_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnEDTPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DLCItem::InitAsDefaultInstance() {
}
class DLCItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DLCItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ext(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DLCItem::DLCItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.DLCItem)
}
DLCItem::DLCItem(const DLCItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_directory()) {
    directory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_directory(),
      GetArena());
  }
  ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext()) {
    ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext(),
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_checksum()) {
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checksum(),
      GetArena());
  }
  ::memcpy(&original_size_, &from.original_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&original_size_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:ei.DLCItem)
}

void DLCItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DLCItem_ei_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&original_size_)) + sizeof(compressed_));
}

DLCItem::~DLCItem() {
  // @@protoc_insertion_point(destructor:ei.DLCItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DLCItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DLCItem::ArenaDtor(void* object) {
  DLCItem* _this = reinterpret_cast< DLCItem* >(object);
  (void)_this;
}
void DLCItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DLCItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DLCItem& DLCItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DLCItem_ei_2eproto.base);
  return *internal_default_instance();
}


void DLCItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.DLCItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      directory_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      checksum_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&original_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&original_size_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLCItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DLCItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DLCItem.directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DLCItem.ext");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DLCItem.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string checksum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.DLCItem.checksum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compressed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_compressed(&has_bits);
          compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_original_size(&has_bits);
          original_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DLCItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.DLCItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DLCItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string directory = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DLCItem.directory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_directory(), target);
  }

  // optional string ext = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext().data(), static_cast<int>(this->_internal_ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DLCItem.ext");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ext(), target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DLCItem.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // optional string checksum = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.DLCItem.checksum");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_checksum(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_compressed(), target);
  }

  // optional uint64 original_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_original_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.DLCItem)
  return target;
}

size_t DLCItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.DLCItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string directory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_directory());
    }

    // optional string ext = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext());
    }

    // optional string url = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string checksum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_checksum());
    }

    // optional uint64 original_size = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_size());
    }

    // optional bool compressed = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DLCItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.DLCItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DLCItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DLCItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.DLCItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.DLCItem)
    MergeFrom(*source);
  }
}

void DLCItem::MergeFrom(const DLCItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.DLCItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_directory(from._internal_directory());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ext(from._internal_ext());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_checksum(from._internal_checksum());
    }
    if (cached_has_bits & 0x00000020u) {
      original_size_ = from.original_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DLCItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.DLCItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLCItem::CopyFrom(const DLCItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.DLCItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLCItem::IsInitialized() const {
  return true;
}

void DLCItem::InternalSwap(DLCItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  directory_.Swap(&other->directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_.Swap(&other->ext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.Swap(&other->checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DLCItem, compressed_)
      + sizeof(DLCItem::compressed_)
      - PROTOBUF_FIELD_OFFSET(DLCItem, original_size_)>(
          reinterpret_cast<char*>(&original_size_),
          reinterpret_cast<char*>(&other->original_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DLCItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellSpec_ShellPiece::InitAsDefaultInstance() {
  ::ei::_ShellSpec_ShellPiece_default_instance_._instance.get_mutable()->dlc_ = const_cast< ::ei::DLCItem*>(
      ::ei::DLCItem::internal_default_instance());
}
class ShellSpec_ShellPiece::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellSpec_ShellPiece>()._has_bits_);
  static void set_has_asset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ei::DLCItem& dlc(const ShellSpec_ShellPiece* msg);
  static void set_has_dlc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::DLCItem&
ShellSpec_ShellPiece::_Internal::dlc(const ShellSpec_ShellPiece* msg) {
  return *msg->dlc_;
}
ShellSpec_ShellPiece::ShellSpec_ShellPiece(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellSpec.ShellPiece)
}
ShellSpec_ShellPiece::ShellSpec_ShellPiece(const ShellSpec_ShellPiece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dlc()) {
    dlc_ = new ::ei::DLCItem(*from.dlc_);
  } else {
    dlc_ = nullptr;
  }
  asset_type_ = from.asset_type_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellSpec.ShellPiece)
}

void ShellSpec_ShellPiece::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellSpec_ShellPiece_ei_2eproto.base);
  dlc_ = nullptr;
  asset_type_ = 1;
}

ShellSpec_ShellPiece::~ShellSpec_ShellPiece() {
  // @@protoc_insertion_point(destructor:ei.ShellSpec.ShellPiece)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellSpec_ShellPiece::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dlc_;
}

void ShellSpec_ShellPiece::ArenaDtor(void* object) {
  ShellSpec_ShellPiece* _this = reinterpret_cast< ShellSpec_ShellPiece* >(object);
  (void)_this;
}
void ShellSpec_ShellPiece::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellSpec_ShellPiece::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellSpec_ShellPiece& ShellSpec_ShellPiece::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellSpec_ShellPiece_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellSpec_ShellPiece::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellSpec.ShellPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dlc_ != nullptr);
      dlc_->Clear();
    }
    asset_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellSpec_ShellPiece::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ShellSpec.AssetType asset_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellSpec_AssetType_IsValid(val))) {
            _internal_set_asset_type(static_cast<::ei::ShellSpec_AssetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.DLCItem dlc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellSpec_ShellPiece::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellSpec.ShellPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ShellSpec.AssetType asset_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_asset_type(), target);
  }

  // optional .ei.DLCItem dlc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dlc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellSpec.ShellPiece)
  return target;
}

size_t ShellSpec_ShellPiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellSpec.ShellPiece)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.DLCItem dlc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dlc_);
    }

    // optional .ei.ShellSpec.AssetType asset_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellSpec_ShellPiece::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellSpec.ShellPiece)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellSpec_ShellPiece* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellSpec_ShellPiece>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellSpec.ShellPiece)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellSpec.ShellPiece)
    MergeFrom(*source);
  }
}

void ShellSpec_ShellPiece::MergeFrom(const ShellSpec_ShellPiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellSpec.ShellPiece)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dlc()->::ei::DLCItem::MergeFrom(from._internal_dlc());
    }
    if (cached_has_bits & 0x00000002u) {
      asset_type_ = from.asset_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellSpec_ShellPiece::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellSpec.ShellPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellSpec_ShellPiece::CopyFrom(const ShellSpec_ShellPiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellSpec.ShellPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellSpec_ShellPiece::IsInitialized() const {
  return true;
}

void ShellSpec_ShellPiece::InternalSwap(ShellSpec_ShellPiece* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dlc_, other->dlc_);
  swap(asset_type_, other->asset_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellSpec_ShellPiece::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellSpec::InitAsDefaultInstance() {
  ::ei::_ShellSpec_default_instance_._instance.get_mutable()->primary_piece_ = const_cast< ::ei::ShellSpec_ShellPiece*>(
      ::ei::ShellSpec_ShellPiece::internal_default_instance());
}
class ShellSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellSpec>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ShellSpec_ShellPiece& primary_piece(const ShellSpec* msg);
  static void set_has_primary_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_set_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modified_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_required_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_required_parent_shell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_new(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_seconds_until_available(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_popularity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_default_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::ei::ShellSpec_ShellPiece&
ShellSpec::_Internal::primary_piece(const ShellSpec* msg) {
  return *msg->primary_piece_;
}
ShellSpec::ShellSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pieces_(arena),
  alt_assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellSpec)
}
ShellSpec::ShellSpec(const ShellSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pieces_(from.pieces_),
      alt_assets_(from.alt_assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_set_identifier()) {
    set_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_set_identifier(),
      GetArena());
  }
  required_parent_shell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_parent_shell()) {
    required_parent_shell_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_required_parent_shell(),
      GetArena());
  }
  if (from._internal_has_primary_piece()) {
    primary_piece_ = new ::ei::ShellSpec_ShellPiece(*from.primary_piece_);
  } else {
    primary_piece_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&popularity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(popularity_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellSpec)
}

void ShellSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellSpec_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_parent_shell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&primary_piece_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&popularity_) -
      reinterpret_cast<char*>(&primary_piece_)) + sizeof(popularity_));
}

ShellSpec::~ShellSpec() {
  // @@protoc_insertion_point(destructor:ei.ShellSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_parent_shell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primary_piece_;
}

void ShellSpec::ArenaDtor(void* object) {
  ShellSpec* _this = reinterpret_cast< ShellSpec* >(object);
  (void)_this;
}
void ShellSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellSpec& ShellSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pieces_.Clear();
  alt_assets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      set_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      required_parent_shell_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(primary_piece_ != nullptr);
      primary_piece_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_soul_eggs_) -
        reinterpret_cast<char*>(&price_)) + sizeof(required_soul_eggs_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&seconds_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&popularity_) -
        reinterpret_cast<char*>(&seconds_remaining_)) + sizeof(popularity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSpec.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSpec.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_eop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_required_eop(&has_bits);
          required_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double required_soul_eggs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_required_soul_eggs(&has_bits);
          required_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool default_appearance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_default_appearance(&has_bits);
          default_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellSpec.ShellPiece pieces = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellSpec.ShellPiece primary_piece = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_piece(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string set_identifier = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_set_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSpec.set_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_new = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_new(&has_bits);
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expires = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_until_available = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_seconds_until_available(&has_bits);
          seconds_until_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.DLCItem alt_assets = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_alt_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool modified_geometry = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_modified_geometry(&has_bits);
          modified_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_parent_shell = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_required_parent_shell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSpec.required_parent_shell");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 popularity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_popularity(&has_bits);
          popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSpec.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSpec.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 price = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price(), target);
  }

  // optional uint32 required_eop = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_required_eop(), target);
  }

  // optional double required_soul_eggs = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_required_soul_eggs(), target);
  }

  // optional bool default_appearance = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_default_appearance(), target);
  }

  // repeated .ei.ShellSpec.ShellPiece pieces = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pieces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_pieces(i), target, stream);
  }

  // optional .ei.ShellSpec.ShellPiece primary_piece = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::primary_piece(this), target, stream);
  }

  // optional string set_identifier = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_set_identifier().data(), static_cast<int>(this->_internal_set_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSpec.set_identifier");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_set_identifier(), target);
  }

  // optional bool is_new = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_new(), target);
  }

  // optional bool expires = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_expires(), target);
  }

  // optional double seconds_remaining = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_seconds_remaining(), target);
  }

  // optional double seconds_until_available = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_seconds_until_available(), target);
  }

  // repeated .ei.DLCItem alt_assets = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alt_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_alt_assets(i), target, stream);
  }

  // optional bool modified_geometry = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_modified_geometry(), target);
  }

  // optional string required_parent_shell = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_parent_shell().data(), static_cast<int>(this->_internal_required_parent_shell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSpec.required_parent_shell");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_required_parent_shell(), target);
  }

  // optional uint64 popularity = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_popularity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellSpec)
  return target;
}

size_t ShellSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellSpec.ShellPiece pieces = 11;
  total_size += 1UL * this->_internal_pieces_size();
  for (const auto& msg : this->pieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.DLCItem alt_assets = 18;
  total_size += 2UL * this->_internal_alt_assets_size();
  for (const auto& msg : this->alt_assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string set_identifier = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_set_identifier());
    }

    // optional string required_parent_shell = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_parent_shell());
    }

    // optional .ei.ShellSpec.ShellPiece primary_piece = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *primary_piece_);
    }

    // optional uint32 price = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 required_eop = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_eop());
    }

    // optional double required_soul_eggs = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double seconds_remaining = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double seconds_until_available = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional bool modified_geometry = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_new = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool expires = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool default_appearance = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint64 popularity = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_popularity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellSpec)
    MergeFrom(*source);
  }
}

void ShellSpec::MergeFrom(const ShellSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pieces_.MergeFrom(from.pieces_);
  alt_assets_.MergeFrom(from.alt_assets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_set_identifier(from._internal_set_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_required_parent_shell(from._internal_required_parent_shell());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_primary_piece()->::ei::ShellSpec_ShellPiece::MergeFrom(from._internal_primary_piece());
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      required_eop_ = from.required_eop_;
    }
    if (cached_has_bits & 0x00000080u) {
      required_soul_eggs_ = from.required_soul_eggs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00000200u) {
      seconds_until_available_ = from.seconds_until_available_;
    }
    if (cached_has_bits & 0x00000400u) {
      modified_geometry_ = from.modified_geometry_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00001000u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_appearance_ = from.default_appearance_;
    }
    if (cached_has_bits & 0x00004000u) {
      popularity_ = from.popularity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellSpec::CopyFrom(const ShellSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellSpec::IsInitialized() const {
  return true;
}

void ShellSpec::InternalSwap(ShellSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pieces_.InternalSwap(&other->pieces_);
  alt_assets_.InternalSwap(&other->alt_assets_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  set_identifier_.Swap(&other->set_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  required_parent_shell_.Swap(&other->required_parent_shell_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellSpec, popularity_)
      + sizeof(ShellSpec::popularity_)
      - PROTOBUF_FIELD_OFFSET(ShellSpec, primary_piece_)>(
          reinterpret_cast<char*>(&primary_piece_),
          reinterpret_cast<char*>(&other->primary_piece_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellSetSpec_VariationSpec::InitAsDefaultInstance() {
}
class ShellSetSpec_VariationSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellSetSpec_VariationSpec>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hex_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sort_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShellSetSpec_VariationSpec::ShellSetSpec_VariationSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellSetSpec.VariationSpec)
}
ShellSetSpec_VariationSpec::ShellSetSpec_VariationSpec(const ShellSetSpec_VariationSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  hex_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hex_color()) {
    hex_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hex_color(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_priority_) -
    reinterpret_cast<char*>(&price_)) + sizeof(sort_priority_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellSetSpec.VariationSpec)
}

void ShellSetSpec_VariationSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellSetSpec_VariationSpec_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_priority_) -
      reinterpret_cast<char*>(&price_)) + sizeof(sort_priority_));
}

ShellSetSpec_VariationSpec::~ShellSetSpec_VariationSpec() {
  // @@protoc_insertion_point(destructor:ei.ShellSetSpec.VariationSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellSetSpec_VariationSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellSetSpec_VariationSpec::ArenaDtor(void* object) {
  ShellSetSpec_VariationSpec* _this = reinterpret_cast< ShellSetSpec_VariationSpec* >(object);
  (void)_this;
}
void ShellSetSpec_VariationSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellSetSpec_VariationSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellSetSpec_VariationSpec& ShellSetSpec_VariationSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellSetSpec_VariationSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellSetSpec_VariationSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellSetSpec.VariationSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hex_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_priority_) -
        reinterpret_cast<char*>(&price_)) + sizeof(sort_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellSetSpec_VariationSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.VariationSpec.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hex_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hex_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.VariationSpec.hex_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default_appearance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_default_appearance(&has_bits);
          default_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_appearance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_custom_appearance(&has_bits);
          custom_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sort_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sort_priority(&has_bits);
          sort_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellSetSpec_VariationSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellSetSpec.VariationSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.VariationSpec.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string hex_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hex_color().data(), static_cast<int>(this->_internal_hex_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.VariationSpec.hex_color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hex_color(), target);
  }

  // optional uint32 price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_price(), target);
  }

  // optional bool default_appearance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_default_appearance(), target);
  }

  // optional bool custom_appearance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_custom_appearance(), target);
  }

  // optional int32 sort_priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sort_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellSetSpec.VariationSpec)
  return target;
}

size_t ShellSetSpec_VariationSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellSetSpec.VariationSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string hex_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hex_color());
    }

    // optional uint32 price = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional bool default_appearance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool custom_appearance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 sort_priority = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sort_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellSetSpec_VariationSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellSetSpec.VariationSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellSetSpec_VariationSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellSetSpec_VariationSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellSetSpec.VariationSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellSetSpec.VariationSpec)
    MergeFrom(*source);
  }
}

void ShellSetSpec_VariationSpec::MergeFrom(const ShellSetSpec_VariationSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellSetSpec.VariationSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hex_color(from._internal_hex_color());
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_appearance_ = from.default_appearance_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_appearance_ = from.custom_appearance_;
    }
    if (cached_has_bits & 0x00000020u) {
      sort_priority_ = from.sort_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellSetSpec_VariationSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellSetSpec.VariationSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellSetSpec_VariationSpec::CopyFrom(const ShellSetSpec_VariationSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellSetSpec.VariationSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellSetSpec_VariationSpec::IsInitialized() const {
  return true;
}

void ShellSetSpec_VariationSpec::InternalSwap(ShellSetSpec_VariationSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hex_color_.Swap(&other->hex_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellSetSpec_VariationSpec, sort_priority_)
      + sizeof(ShellSetSpec_VariationSpec::sort_priority_)
      - PROTOBUF_FIELD_OFFSET(ShellSetSpec_VariationSpec, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellSetSpec_VariationSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellSetSpec::InitAsDefaultInstance() {
  ::ei::_ShellSetSpec_default_instance_._instance.get_mutable()->icon_ = const_cast< ::ei::DLCItem*>(
      ::ei::DLCItem::internal_default_instance());
}
class ShellSetSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellSetSpec>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_price_mult_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_discount(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_required_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_required_parent_set(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_new(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_seconds_until_available(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_popularity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_decorator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_modified_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_element_set(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hex_base_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::DLCItem& icon(const ShellSetSpec* msg);
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_custom_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::ei::DLCItem&
ShellSetSpec::_Internal::icon(const ShellSetSpec* msg) {
  return *msg->icon_;
}
ShellSetSpec::ShellSetSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellSetSpec)
}
ShellSetSpec::ShellSetSpec(const ShellSetSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      variations_(from.variations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  hex_base_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hex_base_color()) {
    hex_base_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hex_base_color(),
      GetArena());
  }
  required_parent_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_parent_set()) {
    required_parent_set_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_required_parent_set(),
      GetArena());
  }
  if (from._internal_has_icon()) {
    icon_ = new ::ei::DLCItem(*from.icon_);
  } else {
    icon_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_mult_deprecated_) -
    reinterpret_cast<char*>(&price_)) + sizeof(price_mult_deprecated_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellSetSpec)
}

void ShellSetSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellSetSpec_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_base_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_parent_set_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&icon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&popularity_) -
      reinterpret_cast<char*>(&icon_)) + sizeof(popularity_));
  price_mult_deprecated_ = 1;
}

ShellSetSpec::~ShellSetSpec() {
  // @@protoc_insertion_point(destructor:ei.ShellSetSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellSetSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hex_base_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_parent_set_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete icon_;
}

void ShellSetSpec::ArenaDtor(void* object) {
  ShellSetSpec* _this = reinterpret_cast< ShellSetSpec* >(object);
  (void)_this;
}
void ShellSetSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellSetSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellSetSpec& ShellSetSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellSetSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellSetSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellSetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hex_base_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      required_parent_set_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(icon_ != nullptr);
      icon_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_soul_eggs_) -
        reinterpret_cast<char*>(&price_)) + sizeof(required_soul_eggs_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&element_set_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_remaining_) -
        reinterpret_cast<char*>(&element_set_)) + sizeof(seconds_remaining_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&discount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&popularity_) -
        reinterpret_cast<char*>(&discount_)) + sizeof(popularity_));
    price_mult_deprecated_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellSetSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_eop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_eop(&has_bits);
          required_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double required_soul_eggs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_required_soul_eggs(&has_bits);
          required_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool default_appearance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_default_appearance(&has_bits);
          default_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool element_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_element_set(&has_bits);
          element_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double price_mult_DEPRECATED = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_price_mult_deprecated(&has_bits);
          price_mult_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_new = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_new(&has_bits);
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expires = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool custom_appearance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_custom_appearance(&has_bits);
          custom_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool modified_geometry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_modified_geometry(&has_bits);
          modified_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool decorator = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_decorator(&has_bits);
          decorator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellSetSpec.VariationSpec variations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string hex_base_color = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_hex_base_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.hex_base_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double discount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_discount(&has_bits);
          discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double seconds_until_available = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_seconds_until_available(&has_bits);
          seconds_until_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.DLCItem icon = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_icon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_parent_set = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_required_parent_set();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellSetSpec.required_parent_set");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 popularity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_popularity(&has_bits);
          popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellSetSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellSetSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 price = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_price(), target);
  }

  // optional uint32 required_eop = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_required_eop(), target);
  }

  // optional double required_soul_eggs = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_required_soul_eggs(), target);
  }

  // optional bool default_appearance = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_default_appearance(), target);
  }

  // optional bool element_set = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_element_set(), target);
  }

  // optional double price_mult_DEPRECATED = 8 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_price_mult_deprecated(), target);
  }

  // optional bool is_new = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_new(), target);
  }

  // optional bool expires = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_expires(), target);
  }

  // optional double seconds_remaining = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_seconds_remaining(), target);
  }

  // optional bool custom_appearance = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_custom_appearance(), target);
  }

  // optional bool modified_geometry = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_modified_geometry(), target);
  }

  // optional bool decorator = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_decorator(), target);
  }

  // repeated .ei.ShellSetSpec.VariationSpec variations = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_variations(i), target, stream);
  }

  // optional string hex_base_color = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hex_base_color().data(), static_cast<int>(this->_internal_hex_base_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.hex_base_color");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_hex_base_color(), target);
  }

  // optional double discount = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_discount(), target);
  }

  // optional double seconds_until_available = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_seconds_until_available(), target);
  }

  // optional .ei.DLCItem icon = 19;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::icon(this), target, stream);
  }

  // optional string required_parent_set = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_parent_set().data(), static_cast<int>(this->_internal_required_parent_set().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellSetSpec.required_parent_set");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_required_parent_set(), target);
  }

  // optional uint64 popularity = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_popularity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellSetSpec)
  return target;
}

size_t ShellSetSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellSetSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellSetSpec.VariationSpec variations = 15;
  total_size += 1UL * this->_internal_variations_size();
  for (const auto& msg : this->variations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string hex_base_color = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hex_base_color());
    }

    // optional string required_parent_set = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_parent_set());
    }

    // optional .ei.DLCItem icon = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_);
    }

    // optional uint32 price = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 required_eop = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_eop());
    }

    // optional double required_soul_eggs = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool element_set = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool default_appearance = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool custom_appearance = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_new = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool expires = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool decorator = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool modified_geometry = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional double seconds_remaining = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double discount = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double seconds_until_available = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional uint64 popularity = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_popularity());
    }

    // optional double price_mult_DEPRECATED = 8 [default = 1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellSetSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellSetSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellSetSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellSetSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellSetSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellSetSpec)
    MergeFrom(*source);
  }
}

void ShellSetSpec::MergeFrom(const ShellSetSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellSetSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variations_.MergeFrom(from.variations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hex_base_color(from._internal_hex_base_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_required_parent_set(from._internal_required_parent_set());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_icon()->::ei::DLCItem::MergeFrom(from._internal_icon());
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000040u) {
      required_eop_ = from.required_eop_;
    }
    if (cached_has_bits & 0x00000080u) {
      required_soul_eggs_ = from.required_soul_eggs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      element_set_ = from.element_set_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_appearance_ = from.default_appearance_;
    }
    if (cached_has_bits & 0x00000400u) {
      custom_appearance_ = from.custom_appearance_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00001000u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00002000u) {
      decorator_ = from.decorator_;
    }
    if (cached_has_bits & 0x00004000u) {
      modified_geometry_ = from.modified_geometry_;
    }
    if (cached_has_bits & 0x00008000u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      discount_ = from.discount_;
    }
    if (cached_has_bits & 0x00020000u) {
      seconds_until_available_ = from.seconds_until_available_;
    }
    if (cached_has_bits & 0x00040000u) {
      popularity_ = from.popularity_;
    }
    if (cached_has_bits & 0x00080000u) {
      price_mult_deprecated_ = from.price_mult_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellSetSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellSetSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellSetSpec::CopyFrom(const ShellSetSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellSetSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellSetSpec::IsInitialized() const {
  return true;
}

void ShellSetSpec::InternalSwap(ShellSetSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  variations_.InternalSwap(&other->variations_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hex_base_color_.Swap(&other->hex_base_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  required_parent_set_.Swap(&other->required_parent_set_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellSetSpec, popularity_)
      + sizeof(ShellSetSpec::popularity_)
      - PROTOBUF_FIELD_OFFSET(ShellSetSpec, icon_)>(
          reinterpret_cast<char*>(&icon_),
          reinterpret_cast<char*>(&other->icon_));
  swap(price_mult_deprecated_, other->price_mult_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellSetSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellObjectSpec_LODPiece::InitAsDefaultInstance() {
  ::ei::_ShellObjectSpec_LODPiece_default_instance_._instance.get_mutable()->dlc_ = const_cast< ::ei::DLCItem*>(
      ::ei::DLCItem::internal_default_instance());
}
class ShellObjectSpec_LODPiece::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellObjectSpec_LODPiece>()._has_bits_);
  static const ::ei::DLCItem& dlc(const ShellObjectSpec_LODPiece* msg);
  static void set_has_dlc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lod(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::DLCItem&
ShellObjectSpec_LODPiece::_Internal::dlc(const ShellObjectSpec_LODPiece* msg) {
  return *msg->dlc_;
}
ShellObjectSpec_LODPiece::ShellObjectSpec_LODPiece(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellObjectSpec.LODPiece)
}
ShellObjectSpec_LODPiece::ShellObjectSpec_LODPiece(const ShellObjectSpec_LODPiece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dlc()) {
    dlc_ = new ::ei::DLCItem(*from.dlc_);
  } else {
    dlc_ = nullptr;
  }
  lod_ = from.lod_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellObjectSpec.LODPiece)
}

void ShellObjectSpec_LODPiece::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellObjectSpec_LODPiece_ei_2eproto.base);
  ::memset(&dlc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lod_) -
      reinterpret_cast<char*>(&dlc_)) + sizeof(lod_));
}

ShellObjectSpec_LODPiece::~ShellObjectSpec_LODPiece() {
  // @@protoc_insertion_point(destructor:ei.ShellObjectSpec.LODPiece)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellObjectSpec_LODPiece::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dlc_;
}

void ShellObjectSpec_LODPiece::ArenaDtor(void* object) {
  ShellObjectSpec_LODPiece* _this = reinterpret_cast< ShellObjectSpec_LODPiece* >(object);
  (void)_this;
}
void ShellObjectSpec_LODPiece::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellObjectSpec_LODPiece::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellObjectSpec_LODPiece& ShellObjectSpec_LODPiece::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellObjectSpec_LODPiece_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellObjectSpec_LODPiece::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellObjectSpec.LODPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dlc_ != nullptr);
    dlc_->Clear();
  }
  lod_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellObjectSpec_LODPiece::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.DLCItem dlc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lod(&has_bits);
          lod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellObjectSpec_LODPiece::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellObjectSpec.LODPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.DLCItem dlc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dlc(this), target, stream);
  }

  // optional uint32 lod = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lod(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellObjectSpec.LODPiece)
  return target;
}

size_t ShellObjectSpec_LODPiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellObjectSpec.LODPiece)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.DLCItem dlc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dlc_);
    }

    // optional uint32 lod = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lod());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellObjectSpec_LODPiece::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellObjectSpec.LODPiece)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellObjectSpec_LODPiece* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellObjectSpec_LODPiece>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellObjectSpec.LODPiece)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellObjectSpec.LODPiece)
    MergeFrom(*source);
  }
}

void ShellObjectSpec_LODPiece::MergeFrom(const ShellObjectSpec_LODPiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellObjectSpec.LODPiece)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dlc()->::ei::DLCItem::MergeFrom(from._internal_dlc());
    }
    if (cached_has_bits & 0x00000002u) {
      lod_ = from.lod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellObjectSpec_LODPiece::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellObjectSpec.LODPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellObjectSpec_LODPiece::CopyFrom(const ShellObjectSpec_LODPiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellObjectSpec.LODPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellObjectSpec_LODPiece::IsInitialized() const {
  return true;
}

void ShellObjectSpec_LODPiece::InternalSwap(ShellObjectSpec_LODPiece* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellObjectSpec_LODPiece, lod_)
      + sizeof(ShellObjectSpec_LODPiece::lod_)
      - PROTOBUF_FIELD_OFFSET(ShellObjectSpec_LODPiece, dlc_)>(
          reinterpret_cast<char*>(&dlc_),
          reinterpret_cast<char*>(&other->dlc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellObjectSpec_LODPiece::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellObjectSpec::InitAsDefaultInstance() {
}
class ShellObjectSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellObjectSpec>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_asset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_object_class(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_required_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_required_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_new(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_seconds_until_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_popularity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_no_hats(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_chicken_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sort_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_default_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

ShellObjectSpec::ShellObjectSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena),
  pieces_(arena),
  icon_colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellObjectSpec)
}
ShellObjectSpec::ShellObjectSpec(const ShellObjectSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      metadata_(from.metadata_),
      pieces_(from.pieces_),
      icon_colors_(from.icon_colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  object_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object_class()) {
    object_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_class(),
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_type_) -
    reinterpret_cast<char*>(&price_)) + sizeof(asset_type_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellObjectSpec)
}

void ShellObjectSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellObjectSpec_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_priority_) -
      reinterpret_cast<char*>(&price_)) + sizeof(sort_priority_));
  asset_type_ = 1;
}

ShellObjectSpec::~ShellObjectSpec() {
  // @@protoc_insertion_point(destructor:ei.ShellObjectSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellObjectSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellObjectSpec::ArenaDtor(void* object) {
  ShellObjectSpec* _this = reinterpret_cast< ShellObjectSpec* >(object);
  (void)_this;
}
void ShellObjectSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellObjectSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellObjectSpec& ShellObjectSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellObjectSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellObjectSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellObjectSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  pieces_.Clear();
  icon_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      object_class_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expires_) -
        reinterpret_cast<char*>(&price_)) + sizeof(expires_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&no_hats_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_priority_) -
        reinterpret_cast<char*>(&no_hats_)) + sizeof(sort_priority_));
    asset_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellObjectSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellObjectSpec.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellObjectSpec.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellSpec.AssetType asset_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellSpec_AssetType_IsValid(val))) {
            _internal_set_asset_type(static_cast<::ei::ShellSpec_AssetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_eop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_required_eop(&has_bits);
          required_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double required_soul_eggs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_required_soul_eggs(&has_bits);
          required_soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_metadata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellObjectSpec.LODPiece pieces = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool default_appearance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_default_appearance(&has_bits);
          default_appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_new = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_new(&has_bits);
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expires = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_expires(&has_bits);
          expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_remaining = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool no_hats = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_no_hats(&has_bits);
          no_hats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string object_class = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_object_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellObjectSpec.object_class");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string icon_colors = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_icon_colors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellObjectSpec.icon_colors");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellObjectSpec.ChickenAnimation chicken_animation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellObjectSpec_ChickenAnimation_IsValid(val))) {
            _internal_set_chicken_animation(static_cast<::ei::ShellObjectSpec_ChickenAnimation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 sort_priority = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_sort_priority(&has_bits);
          sort_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double seconds_until_available = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_seconds_until_available(&has_bits);
          seconds_until_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 popularity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_popularity(&has_bits);
          popularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellObjectSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellObjectSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellObjectSpec.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellObjectSpec.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .ei.ShellSpec.AssetType asset_type = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_asset_type(), target);
  }

  // optional uint32 price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price(), target);
  }

  // optional uint32 required_eop = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_required_eop(), target);
  }

  // optional double required_soul_eggs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_required_soul_eggs(), target);
  }

  // repeated double metadata = 7;
  for (int i = 0, n = this->_internal_metadata_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_metadata(i), target);
  }

  // repeated .ei.ShellObjectSpec.LODPiece pieces = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pieces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pieces(i), target, stream);
  }

  // optional bool default_appearance = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_default_appearance(), target);
  }

  // optional bool is_new = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_new(), target);
  }

  // optional bool expires = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_expires(), target);
  }

  // optional double seconds_remaining = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_seconds_remaining(), target);
  }

  // optional bool no_hats = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_no_hats(), target);
  }

  // optional string object_class = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_object_class().data(), static_cast<int>(this->_internal_object_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellObjectSpec.object_class");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_object_class(), target);
  }

  // repeated string icon_colors = 15;
  for (int i = 0, n = this->_internal_icon_colors_size(); i < n; i++) {
    const auto& s = this->_internal_icon_colors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellObjectSpec.icon_colors");
    target = stream->WriteString(15, s, target);
  }

  // optional .ei.ShellObjectSpec.ChickenAnimation chicken_animation = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_chicken_animation(), target);
  }

  // optional int32 sort_priority = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_sort_priority(), target);
  }

  // optional double seconds_until_available = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_seconds_until_available(), target);
  }

  // optional uint64 popularity = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_popularity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellObjectSpec)
  return target;
}

size_t ShellObjectSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellObjectSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double metadata = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_metadata_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
    total_size += data_size;
  }

  // repeated .ei.ShellObjectSpec.LODPiece pieces = 8;
  total_size += 1UL * this->_internal_pieces_size();
  for (const auto& msg : this->pieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string icon_colors = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(icon_colors_.size());
  for (int i = 0, n = icon_colors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      icon_colors_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string object_class = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_object_class());
    }

    // optional uint32 price = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 required_eop = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_eop());
    }

    // optional double required_soul_eggs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool is_new = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool expires = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool no_hats = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool default_appearance = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional .ei.ShellObjectSpec.ChickenAnimation chicken_animation = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chicken_animation());
    }

    // optional double seconds_remaining = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double seconds_until_available = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional uint64 popularity = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_popularity());
    }

    // optional int32 sort_priority = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sort_priority());
    }

    // optional .ei.ShellSpec.AssetType asset_type = 3;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellObjectSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellObjectSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellObjectSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellObjectSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellObjectSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellObjectSpec)
    MergeFrom(*source);
  }
}

void ShellObjectSpec::MergeFrom(const ShellObjectSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellObjectSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  pieces_.MergeFrom(from.pieces_);
  icon_colors_.MergeFrom(from.icon_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_object_class(from._internal_object_class());
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      required_eop_ = from.required_eop_;
    }
    if (cached_has_bits & 0x00000020u) {
      required_soul_eggs_ = from.required_soul_eggs_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00000080u) {
      expires_ = from.expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      no_hats_ = from.no_hats_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_appearance_ = from.default_appearance_;
    }
    if (cached_has_bits & 0x00000400u) {
      chicken_animation_ = from.chicken_animation_;
    }
    if (cached_has_bits & 0x00000800u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    if (cached_has_bits & 0x00001000u) {
      seconds_until_available_ = from.seconds_until_available_;
    }
    if (cached_has_bits & 0x00002000u) {
      popularity_ = from.popularity_;
    }
    if (cached_has_bits & 0x00004000u) {
      sort_priority_ = from.sort_priority_;
    }
    if (cached_has_bits & 0x00008000u) {
      asset_type_ = from.asset_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellObjectSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellObjectSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellObjectSpec::CopyFrom(const ShellObjectSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellObjectSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellObjectSpec::IsInitialized() const {
  return true;
}

void ShellObjectSpec::InternalSwap(ShellObjectSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  metadata_.InternalSwap(&other->metadata_);
  pieces_.InternalSwap(&other->pieces_);
  icon_colors_.InternalSwap(&other->icon_colors_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  object_class_.Swap(&other->object_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellObjectSpec, sort_priority_)
      + sizeof(ShellObjectSpec::sort_priority_)
      - PROTOBUF_FIELD_OFFSET(ShellObjectSpec, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
  swap(asset_type_, other->asset_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellObjectSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellGroupSpec::InitAsDefaultInstance() {
}
class ShellGroupSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellGroupSpec>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_asset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_price_mult_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShellGroupSpec::ShellGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellGroupSpec)
}
ShellGroupSpec::ShellGroupSpec(const ShellGroupSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      member_ids_(from.member_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&price_mult_deprecated_, &from.price_mult_deprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_type_) -
    reinterpret_cast<char*>(&price_mult_deprecated_)) + sizeof(asset_type_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellGroupSpec)
}

void ShellGroupSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellGroupSpec_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_mult_deprecated_ = 0;
  asset_type_ = 1;
}

ShellGroupSpec::~ShellGroupSpec() {
  // @@protoc_insertion_point(destructor:ei.ShellGroupSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellGroupSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellGroupSpec::ArenaDtor(void* object) {
  ShellGroupSpec* _this = reinterpret_cast< ShellGroupSpec* >(object);
  (void)_this;
}
void ShellGroupSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellGroupSpec& ShellGroupSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellGroupSpec_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    price_mult_deprecated_ = 0;
    asset_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellGroupSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellGroupSpec.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellGroupSpec.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string member_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_member_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellGroupSpec.member_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double price_mult_DEPRECATED = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_price_mult_deprecated(&has_bits);
          price_mult_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellSpec.AssetType asset_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellSpec_AssetType_IsValid(val))) {
            _internal_set_asset_type(static_cast<::ei::ShellSpec_AssetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellGroupSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellGroupSpec.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellGroupSpec.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string member_ids = 3;
  for (int i = 0, n = this->_internal_member_ids_size(); i < n; i++) {
    const auto& s = this->_internal_member_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellGroupSpec.member_ids");
    target = stream->WriteString(3, s, target);
  }

  // optional double price_mult_DEPRECATED = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_price_mult_deprecated(), target);
  }

  // optional .ei.ShellSpec.AssetType asset_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_asset_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellGroupSpec)
  return target;
}

size_t ShellGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellGroupSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string member_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(member_ids_.size());
  for (int i = 0, n = member_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      member_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double price_mult_DEPRECATED = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .ei.ShellSpec.AssetType asset_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellGroupSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellGroupSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellGroupSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellGroupSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellGroupSpec)
    MergeFrom(*source);
  }
}

void ShellGroupSpec::MergeFrom(const ShellGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      price_mult_deprecated_ = from.price_mult_deprecated_;
    }
    if (cached_has_bits & 0x00000008u) {
      asset_type_ = from.asset_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellGroupSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellGroupSpec::CopyFrom(const ShellGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellGroupSpec::IsInitialized() const {
  return true;
}

void ShellGroupSpec::InternalSwap(ShellGroupSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_ids_.InternalSwap(&other->member_ids_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(price_mult_deprecated_, other->price_mult_deprecated_);
  swap(asset_type_, other->asset_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellGroupSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DLCCatalog::InitAsDefaultInstance() {
}
class DLCCatalog::_Internal {
 public:
};

DLCCatalog::DLCCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena),
  shells_(arena),
  shell_sets_(arena),
  shell_objects_(arena),
  shell_groups_(arena),
  decorators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.DLCCatalog)
}
DLCCatalog::DLCCatalog(const DLCCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_),
      shells_(from.shells_),
      shell_sets_(from.shell_sets_),
      shell_objects_(from.shell_objects_),
      shell_groups_(from.shell_groups_),
      decorators_(from.decorators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.DLCCatalog)
}

void DLCCatalog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DLCCatalog_ei_2eproto.base);
}

DLCCatalog::~DLCCatalog() {
  // @@protoc_insertion_point(destructor:ei.DLCCatalog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DLCCatalog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DLCCatalog::ArenaDtor(void* object) {
  DLCCatalog* _this = reinterpret_cast< DLCCatalog* >(object);
  (void)_this;
}
void DLCCatalog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DLCCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DLCCatalog& DLCCatalog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DLCCatalog_ei_2eproto.base);
  return *internal_default_instance();
}


void DLCCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.DLCCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  shells_.Clear();
  shell_sets_.Clear();
  shell_objects_.Clear();
  shell_groups_.Clear();
  decorators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DLCCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.DLCItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellSpec shells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellSetSpec shell_sets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellObjectSpec shell_objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellGroupSpec shell_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellSetSpec decorators = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decorators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DLCCatalog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.DLCCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.DLCItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // repeated .ei.ShellSpec shells = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shells(i), target, stream);
  }

  // repeated .ei.ShellSetSpec shell_sets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shell_sets(i), target, stream);
  }

  // repeated .ei.ShellObjectSpec shell_objects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shell_objects(i), target, stream);
  }

  // repeated .ei.ShellGroupSpec shell_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shell_groups(i), target, stream);
  }

  // repeated .ei.ShellSetSpec decorators = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decorators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_decorators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.DLCCatalog)
  return target;
}

size_t DLCCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.DLCCatalog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.DLCItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellSpec shells = 2;
  total_size += 1UL * this->_internal_shells_size();
  for (const auto& msg : this->shells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellSetSpec shell_sets = 3;
  total_size += 1UL * this->_internal_shell_sets_size();
  for (const auto& msg : this->shell_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellObjectSpec shell_objects = 4;
  total_size += 1UL * this->_internal_shell_objects_size();
  for (const auto& msg : this->shell_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellGroupSpec shell_groups = 5;
  total_size += 1UL * this->_internal_shell_groups_size();
  for (const auto& msg : this->shell_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellSetSpec decorators = 6;
  total_size += 1UL * this->_internal_decorators_size();
  for (const auto& msg : this->decorators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DLCCatalog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.DLCCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const DLCCatalog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DLCCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.DLCCatalog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.DLCCatalog)
    MergeFrom(*source);
  }
}

void DLCCatalog::MergeFrom(const DLCCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.DLCCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  shells_.MergeFrom(from.shells_);
  shell_sets_.MergeFrom(from.shell_sets_);
  shell_objects_.MergeFrom(from.shell_objects_);
  shell_groups_.MergeFrom(from.shell_groups_);
  decorators_.MergeFrom(from.decorators_);
}

void DLCCatalog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.DLCCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLCCatalog::CopyFrom(const DLCCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.DLCCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLCCatalog::IsInitialized() const {
  return true;
}

void DLCCatalog::InternalSwap(DLCCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  shells_.InternalSwap(&other->shells_);
  shell_sets_.InternalSwap(&other->shell_sets_);
  shell_objects_.InternalSwap(&other->shell_objects_);
  shell_groups_.InternalSwap(&other->shell_groups_);
  decorators_.InternalSwap(&other->decorators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DLCCatalog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellStatus::InitAsDefaultInstance() {
}
class ShellDB_ShellStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellStatus>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShellDB_ShellStatus::ShellDB_ShellStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellStatus)
}
ShellDB_ShellStatus::ShellDB_ShellStatus(const ShellDB_ShellStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  owned_ = from.owned_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellStatus)
}

void ShellDB_ShellStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellStatus_ei_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owned_ = false;
}

ShellDB_ShellStatus::~ShellDB_ShellStatus() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellStatus::ArenaDtor(void* object) {
  ShellDB_ShellStatus* _this = reinterpret_cast< ShellDB_ShellStatus* >(object);
  (void)_this;
}
void ShellDB_ShellStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellStatus& ShellDB_ShellStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellStatus_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  owned_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellStatus.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellStatus.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional bool owned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellStatus)
  return target;
}

size_t ShellDB_ShellStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional bool owned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellStatus)
    MergeFrom(*source);
  }
}

void ShellDB_ShellStatus::MergeFrom(const ShellDB_ShellStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_ShellStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellStatus::CopyFrom(const ShellDB_ShellStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellStatus::IsInitialized() const {
  return true;
}

void ShellDB_ShellStatus::InternalSwap(ShellDB_ShellStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(owned_, other->owned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellElementStatus::InitAsDefaultInstance() {
}
class ShellDB_ShellElementStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellElementStatus>()._has_bits_);
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_set_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellDB_ShellElementStatus::ShellDB_ShellElementStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellElementStatus)
}
ShellDB_ShellElementStatus::ShellDB_ShellElementStatus(const ShellDB_ShellElementStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_set_identifier()) {
    set_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_set_identifier(),
      GetArena());
  }
  element_ = from.element_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellElementStatus)
}

void ShellDB_ShellElementStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellElementStatus_ei_2eproto.base);
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  element_ = 1;
}

ShellDB_ShellElementStatus::~ShellDB_ShellElementStatus() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellElementStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellElementStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  set_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellElementStatus::ArenaDtor(void* object) {
  ShellDB_ShellElementStatus* _this = reinterpret_cast< ShellDB_ShellElementStatus* >(object);
  (void)_this;
}
void ShellDB_ShellElementStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellElementStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellElementStatus& ShellDB_ShellElementStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellElementStatus_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellElementStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellElementStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      set_identifier_.ClearNonDefaultToEmpty();
    }
    element_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellElementStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ShellDB.FarmElement element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellDB_FarmElement_IsValid(val))) {
            _internal_set_element(static_cast<::ei::ShellDB_FarmElement>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string set_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_set_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellElementStatus.set_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellElementStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellElementStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ShellDB.FarmElement element = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_element(), target);
  }

  // optional string set_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_set_identifier().data(), static_cast<int>(this->_internal_set_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellElementStatus.set_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_set_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellElementStatus)
  return target;
}

size_t ShellDB_ShellElementStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellElementStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string set_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_set_identifier());
    }

    // optional .ei.ShellDB.FarmElement element = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_element());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellElementStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellElementStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellElementStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellElementStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellElementStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellElementStatus)
    MergeFrom(*source);
  }
}

void ShellDB_ShellElementStatus::MergeFrom(const ShellDB_ShellElementStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellElementStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_set_identifier(from._internal_set_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      element_ = from.element_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_ShellElementStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellElementStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellElementStatus::CopyFrom(const ShellDB_ShellElementStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellElementStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellElementStatus::IsInitialized() const {
  return true;
}

void ShellDB_ShellElementStatus::InternalSwap(ShellDB_ShellElementStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  set_identifier_.Swap(&other->set_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(element_, other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellElementStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellSetVariationStatus::InitAsDefaultInstance() {
}
class ShellDB_ShellSetVariationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellSetVariationStatus>()._has_bits_);
  static void set_has_set_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellDB_ShellSetVariationStatus::ShellDB_ShellSetVariationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owned_variations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellSetVariationStatus)
}
ShellDB_ShellSetVariationStatus::ShellDB_ShellSetVariationStatus(const ShellDB_ShellSetVariationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      owned_variations_(from.owned_variations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_set_identifier()) {
    set_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_set_identifier(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellSetVariationStatus)
}

void ShellDB_ShellSetVariationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto.base);
  set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShellDB_ShellSetVariationStatus::~ShellDB_ShellSetVariationStatus() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellSetVariationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellSetVariationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  set_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellSetVariationStatus::ArenaDtor(void* object) {
  ShellDB_ShellSetVariationStatus* _this = reinterpret_cast< ShellDB_ShellSetVariationStatus* >(object);
  (void)_this;
}
void ShellDB_ShellSetVariationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellSetVariationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellSetVariationStatus& ShellDB_ShellSetVariationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellSetVariationStatus_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellSetVariationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellSetVariationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owned_variations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellSetVariationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string set_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_set_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellSetVariationStatus.set_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string owned_variations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_owned_variations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellSetVariationStatus.owned_variations");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellSetVariationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellSetVariationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string set_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_set_identifier().data(), static_cast<int>(this->_internal_set_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellSetVariationStatus.set_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_set_identifier(), target);
  }

  // repeated string owned_variations = 2;
  for (int i = 0, n = this->_internal_owned_variations_size(); i < n; i++) {
    const auto& s = this->_internal_owned_variations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellSetVariationStatus.owned_variations");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellSetVariationStatus)
  return target;
}

size_t ShellDB_ShellSetVariationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellSetVariationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string owned_variations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(owned_variations_.size());
  for (int i = 0, n = owned_variations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      owned_variations_.Get(i));
  }

  // optional string set_identifier = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellSetVariationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellSetVariationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellSetVariationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellSetVariationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellSetVariationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellSetVariationStatus)
    MergeFrom(*source);
  }
}

void ShellDB_ShellSetVariationStatus::MergeFrom(const ShellDB_ShellSetVariationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellSetVariationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owned_variations_.MergeFrom(from.owned_variations_);
  if (from._internal_has_set_identifier()) {
    _internal_set_set_identifier(from._internal_set_identifier());
  }
}

void ShellDB_ShellSetVariationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellSetVariationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellSetVariationStatus::CopyFrom(const ShellDB_ShellSetVariationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellSetVariationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellSetVariationStatus::IsInitialized() const {
  return true;
}

void ShellDB_ShellSetVariationStatus::InternalSwap(ShellDB_ShellSetVariationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  owned_variations_.InternalSwap(&other->owned_variations_);
  set_identifier_.Swap(&other->set_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellSetVariationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_FarmConfiguration::InitAsDefaultInstance() {
  ::ei::_ShellDB_FarmConfiguration_default_instance_._instance.get_mutable()->lighting_config_ = const_cast< ::ei::ShellDB_LightingConfig*>(
      ::ei::ShellDB_LightingConfig::internal_default_instance());
}
class ShellDB_FarmConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_FarmConfiguration>()._has_bits_);
  static void set_has_configure_chickens_by_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lighting_config_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ei::ShellDB_LightingConfig& lighting_config(const ShellDB_FarmConfiguration* msg);
  static void set_has_lighting_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::ShellDB_LightingConfig&
ShellDB_FarmConfiguration::_Internal::lighting_config(const ShellDB_FarmConfiguration* msg) {
  return *msg->lighting_config_;
}
ShellDB_FarmConfiguration::ShellDB_FarmConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shell_configs_(arena),
  shell_set_configs_(arena),
  group_configs_(arena),
  chicken_configs_(arena),
  locked_elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.FarmConfiguration)
}
ShellDB_FarmConfiguration::ShellDB_FarmConfiguration(const ShellDB_FarmConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      shell_configs_(from.shell_configs_),
      shell_set_configs_(from.shell_set_configs_),
      group_configs_(from.group_configs_),
      chicken_configs_(from.chicken_configs_),
      locked_elements_(from.locked_elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lighting_config()) {
    lighting_config_ = new ::ei::ShellDB_LightingConfig(*from.lighting_config_);
  } else {
    lighting_config_ = nullptr;
  }
  ::memcpy(&configure_chickens_by_group_, &from.configure_chickens_by_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&lighting_config_enabled_) -
    reinterpret_cast<char*>(&configure_chickens_by_group_)) + sizeof(lighting_config_enabled_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.FarmConfiguration)
}

void ShellDB_FarmConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_FarmConfiguration_ei_2eproto.base);
  ::memset(&lighting_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lighting_config_enabled_) -
      reinterpret_cast<char*>(&lighting_config_)) + sizeof(lighting_config_enabled_));
}

ShellDB_FarmConfiguration::~ShellDB_FarmConfiguration() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.FarmConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_FarmConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lighting_config_;
}

void ShellDB_FarmConfiguration::ArenaDtor(void* object) {
  ShellDB_FarmConfiguration* _this = reinterpret_cast< ShellDB_FarmConfiguration* >(object);
  (void)_this;
}
void ShellDB_FarmConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_FarmConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_FarmConfiguration& ShellDB_FarmConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_FarmConfiguration_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_FarmConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.FarmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shell_configs_.Clear();
  shell_set_configs_.Clear();
  group_configs_.Clear();
  chicken_configs_.Clear();
  locked_elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lighting_config_ != nullptr);
    lighting_config_->Clear();
  }
  ::memset(&configure_chickens_by_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lighting_config_enabled_) -
      reinterpret_cast<char*>(&configure_chickens_by_group_)) + sizeof(lighting_config_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_FarmConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ShellDB.ShellConfiguration shell_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellSetConfiguration shell_set_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_set_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool configure_chickens_by_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_configure_chickens_by_group(&has_bits);
          configure_chickens_by_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellGroupConfiguration group_configs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ChickenConfig chicken_configs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chicken_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.FarmElement locked_elements = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ei::ShellDB_FarmElement_IsValid(val))) {
              _internal_add_locked_elements(static_cast<::ei::ShellDB_FarmElement>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_locked_elements(), ptr, ctx, ::ei::ShellDB_FarmElement_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lighting_config_enabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lighting_config_enabled(&has_bits);
          lighting_config_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.LightingConfig lighting_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_lighting_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_FarmConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.FarmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ShellDB.ShellConfiguration shell_configs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shell_configs(i), target, stream);
  }

  // repeated .ei.ShellDB.ShellSetConfiguration shell_set_configs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_set_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shell_set_configs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool configure_chickens_by_group = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_configure_chickens_by_group(), target);
  }

  // repeated .ei.ShellDB.ShellGroupConfiguration group_configs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_group_configs(i), target, stream);
  }

  // repeated .ei.ShellDB.ChickenConfig chicken_configs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chicken_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_chicken_configs(i), target, stream);
  }

  // repeated .ei.ShellDB.FarmElement locked_elements = 10;
  for (int i = 0, n = this->_internal_locked_elements_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        10, this->_internal_locked_elements(i), target);
  }

  // optional bool lighting_config_enabled = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_lighting_config_enabled(), target);
  }

  // optional .ei.ShellDB.LightingConfig lighting_config = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::lighting_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.FarmConfiguration)
  return target;
}

size_t ShellDB_FarmConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.FarmConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellDB.ShellConfiguration shell_configs = 1;
  total_size += 1UL * this->_internal_shell_configs_size();
  for (const auto& msg : this->shell_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ShellSetConfiguration shell_set_configs = 2;
  total_size += 1UL * this->_internal_shell_set_configs_size();
  for (const auto& msg : this->shell_set_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ShellGroupConfiguration group_configs = 8;
  total_size += 1UL * this->_internal_group_configs_size();
  for (const auto& msg : this->group_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ChickenConfig chicken_configs = 9;
  total_size += 1UL * this->_internal_chicken_configs_size();
  for (const auto& msg : this->chicken_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.FarmElement locked_elements = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_locked_elements_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_locked_elements(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ei.ShellDB.LightingConfig lighting_config = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lighting_config_);
    }

    // optional bool configure_chickens_by_group = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool lighting_config_enabled = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_FarmConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.FarmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_FarmConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_FarmConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.FarmConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.FarmConfiguration)
    MergeFrom(*source);
  }
}

void ShellDB_FarmConfiguration::MergeFrom(const ShellDB_FarmConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.FarmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shell_configs_.MergeFrom(from.shell_configs_);
  shell_set_configs_.MergeFrom(from.shell_set_configs_);
  group_configs_.MergeFrom(from.group_configs_);
  chicken_configs_.MergeFrom(from.chicken_configs_);
  locked_elements_.MergeFrom(from.locked_elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lighting_config()->::ei::ShellDB_LightingConfig::MergeFrom(from._internal_lighting_config());
    }
    if (cached_has_bits & 0x00000002u) {
      configure_chickens_by_group_ = from.configure_chickens_by_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      lighting_config_enabled_ = from.lighting_config_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_FarmConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.FarmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_FarmConfiguration::CopyFrom(const ShellDB_FarmConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.FarmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_FarmConfiguration::IsInitialized() const {
  return true;
}

void ShellDB_FarmConfiguration::InternalSwap(ShellDB_FarmConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shell_configs_.InternalSwap(&other->shell_configs_);
  shell_set_configs_.InternalSwap(&other->shell_set_configs_);
  group_configs_.InternalSwap(&other->group_configs_);
  chicken_configs_.InternalSwap(&other->chicken_configs_);
  locked_elements_.InternalSwap(&other->locked_elements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellDB_FarmConfiguration, lighting_config_enabled_)
      + sizeof(ShellDB_FarmConfiguration::lighting_config_enabled_)
      - PROTOBUF_FIELD_OFFSET(ShellDB_FarmConfiguration, lighting_config_)>(
          reinterpret_cast<char*>(&lighting_config_),
          reinterpret_cast<char*>(&other->lighting_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_FarmConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_SavedFarmConfiguration::InitAsDefaultInstance() {
  ::ei::_ShellDB_SavedFarmConfiguration_default_instance_._instance.get_mutable()->config_ = const_cast< ::ei::ShellDB_FarmConfiguration*>(
      ::ei::ShellDB_FarmConfiguration::internal_default_instance());
}
class ShellDB_SavedFarmConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_SavedFarmConfiguration>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::ShellDB_FarmConfiguration& config(const ShellDB_SavedFarmConfiguration* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_save_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ei::ShellDB_FarmConfiguration&
ShellDB_SavedFarmConfiguration::_Internal::config(const ShellDB_SavedFarmConfiguration* msg) {
  return *msg->config_;
}
ShellDB_SavedFarmConfiguration::ShellDB_SavedFarmConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.SavedFarmConfiguration)
}
ShellDB_SavedFarmConfiguration::ShellDB_SavedFarmConfiguration(const ShellDB_SavedFarmConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_id()) {
    server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_name(),
      GetArena());
  }
  if (from._internal_has_config()) {
    config_ = new ::ei::ShellDB_FarmConfiguration(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&client_save_time_, &from.client_save_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchased_) -
    reinterpret_cast<char*>(&client_save_time_)) + sizeof(purchased_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.SavedFarmConfiguration)
}

void ShellDB_SavedFarmConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purchased_) -
      reinterpret_cast<char*>(&config_)) + sizeof(purchased_));
}

ShellDB_SavedFarmConfiguration::~ShellDB_SavedFarmConfiguration() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.SavedFarmConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_SavedFarmConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void ShellDB_SavedFarmConfiguration::ArenaDtor(void* object) {
  ShellDB_SavedFarmConfiguration* _this = reinterpret_cast< ShellDB_SavedFarmConfiguration* >(object);
  (void)_this;
}
void ShellDB_SavedFarmConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_SavedFarmConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_SavedFarmConfiguration& ShellDB_SavedFarmConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_SavedFarmConfiguration_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_SavedFarmConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.SavedFarmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      server_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&client_save_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchased_) -
        reinterpret_cast<char*>(&client_save_time_)) + sizeof(purchased_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_SavedFarmConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.SavedFarmConfiguration.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmConfiguration config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double client_save_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_client_save_time(&has_bits);
          client_save_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.SavedFarmConfiguration.server_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.SavedFarmConfiguration.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool purchased = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_purchased(&has_bits);
          purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_SavedFarmConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.SavedFarmConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.SavedFarmConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .ei.ShellDB.FarmConfiguration config = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // optional double client_save_time = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_client_save_time(), target);
  }

  // optional string server_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.SavedFarmConfiguration.server_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_id(), target);
  }

  // optional string display_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.SavedFarmConfiguration.display_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_display_name(), target);
  }

  // optional bool purchased = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.SavedFarmConfiguration)
  return target;
}

size_t ShellDB_SavedFarmConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.SavedFarmConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string server_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_id());
    }

    // optional string display_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional .ei.ShellDB.FarmConfiguration config = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional double client_save_time = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool purchased = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_SavedFarmConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.SavedFarmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_SavedFarmConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_SavedFarmConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.SavedFarmConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.SavedFarmConfiguration)
    MergeFrom(*source);
  }
}

void ShellDB_SavedFarmConfiguration::MergeFrom(const ShellDB_SavedFarmConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.SavedFarmConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_server_id(from._internal_server_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_config()->::ei::ShellDB_FarmConfiguration::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000010u) {
      client_save_time_ = from.client_save_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      purchased_ = from.purchased_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_SavedFarmConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.SavedFarmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_SavedFarmConfiguration::CopyFrom(const ShellDB_SavedFarmConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.SavedFarmConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_SavedFarmConfiguration::IsInitialized() const {
  return true;
}

void ShellDB_SavedFarmConfiguration::InternalSwap(ShellDB_SavedFarmConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellDB_SavedFarmConfiguration, purchased_)
      + sizeof(ShellDB_SavedFarmConfiguration::purchased_)
      - PROTOBUF_FIELD_OFFSET(ShellDB_SavedFarmConfiguration, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_SavedFarmConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellConfiguration::InitAsDefaultInstance() {
}
class ShellDB_ShellConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellConfiguration>()._has_bits_);
  static void set_has_asset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shell_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellDB_ShellConfiguration::ShellDB_ShellConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellConfiguration)
}
ShellDB_ShellConfiguration::ShellDB_ShellConfiguration(const ShellDB_ShellConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shell_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shell_identifier()) {
    shell_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shell_identifier(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(asset_type_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellConfiguration)
}

void ShellDB_ShellConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellConfiguration_ei_2eproto.base);
  shell_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  asset_type_ = 1;
}

ShellDB_ShellConfiguration::~ShellDB_ShellConfiguration() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shell_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellConfiguration::ArenaDtor(void* object) {
  ShellDB_ShellConfiguration* _this = reinterpret_cast< ShellDB_ShellConfiguration* >(object);
  (void)_this;
}
void ShellDB_ShellConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellConfiguration& ShellDB_ShellConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellConfiguration_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    shell_identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    index_ = 0u;
    asset_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ShellSpec.AssetType asset_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellSpec_AssetType_IsValid(val))) {
            _internal_set_asset_type(static_cast<::ei::ShellSpec_AssetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shell_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shell_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellConfiguration.shell_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ShellSpec.AssetType asset_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_asset_type(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string shell_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shell_identifier().data(), static_cast<int>(this->_internal_shell_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellConfiguration.shell_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shell_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellConfiguration)
  return target;
}

size_t ShellDB_ShellConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string shell_identifier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shell_identifier());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional .ei.ShellSpec.AssetType asset_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellConfiguration)
    MergeFrom(*source);
  }
}

void ShellDB_ShellConfiguration::MergeFrom(const ShellDB_ShellConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shell_identifier(from._internal_shell_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      asset_type_ = from.asset_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_ShellConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellConfiguration::CopyFrom(const ShellDB_ShellConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellConfiguration::IsInitialized() const {
  return true;
}

void ShellDB_ShellConfiguration::InternalSwap(ShellDB_ShellConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shell_identifier_.Swap(&other->shell_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
  swap(asset_type_, other->asset_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellSetConfiguration::InitAsDefaultInstance() {
}
class ShellDB_ShellSetConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellSetConfiguration>()._has_bits_);
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shell_set_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_variation_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decorator_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShellDB_ShellSetConfiguration::ShellDB_ShellSetConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellSetConfiguration)
}
ShellDB_ShellSetConfiguration::ShellDB_ShellSetConfiguration(const ShellDB_ShellSetConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shell_set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shell_set_identifier()) {
    shell_set_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shell_set_identifier(),
      GetArena());
  }
  variation_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_variation_identifier()) {
    variation_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_variation_identifier(),
      GetArena());
  }
  decorator_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decorator_identifier()) {
    decorator_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decorator_identifier(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&index_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellSetConfiguration)
}

void ShellDB_ShellSetConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellSetConfiguration_ei_2eproto.base);
  shell_set_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variation_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decorator_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  element_ = 1;
}

ShellDB_ShellSetConfiguration::~ShellDB_ShellSetConfiguration() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellSetConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellSetConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shell_set_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variation_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decorator_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellSetConfiguration::ArenaDtor(void* object) {
  ShellDB_ShellSetConfiguration* _this = reinterpret_cast< ShellDB_ShellSetConfiguration* >(object);
  (void)_this;
}
void ShellDB_ShellSetConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellSetConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellSetConfiguration& ShellDB_ShellSetConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellSetConfiguration_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellSetConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellSetConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shell_set_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      variation_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      decorator_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    index_ = 0u;
    element_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellSetConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ShellDB.FarmElement element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellDB_FarmElement_IsValid(val))) {
            _internal_set_element(static_cast<::ei::ShellDB_FarmElement>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shell_set_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shell_set_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellSetConfiguration.shell_set_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string variation_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_variation_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellSetConfiguration.variation_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string decorator_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_decorator_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellSetConfiguration.decorator_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellSetConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellSetConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ShellDB.FarmElement element = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_element(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string shell_set_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shell_set_identifier().data(), static_cast<int>(this->_internal_shell_set_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellSetConfiguration.shell_set_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shell_set_identifier(), target);
  }

  // optional string variation_identifier = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_variation_identifier().data(), static_cast<int>(this->_internal_variation_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellSetConfiguration.variation_identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_variation_identifier(), target);
  }

  // optional string decorator_identifier = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decorator_identifier().data(), static_cast<int>(this->_internal_decorator_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellSetConfiguration.decorator_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_decorator_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellSetConfiguration)
  return target;
}

size_t ShellDB_ShellSetConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellSetConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string shell_set_identifier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shell_set_identifier());
    }

    // optional string variation_identifier = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_variation_identifier());
    }

    // optional string decorator_identifier = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decorator_identifier());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional .ei.ShellDB.FarmElement element = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_element());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellSetConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellSetConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellSetConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellSetConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellSetConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellSetConfiguration)
    MergeFrom(*source);
  }
}

void ShellDB_ShellSetConfiguration::MergeFrom(const ShellDB_ShellSetConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellSetConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shell_set_identifier(from._internal_shell_set_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_variation_identifier(from._internal_variation_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_decorator_identifier(from._internal_decorator_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      element_ = from.element_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_ShellSetConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellSetConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellSetConfiguration::CopyFrom(const ShellDB_ShellSetConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellSetConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellSetConfiguration::IsInitialized() const {
  return true;
}

void ShellDB_ShellSetConfiguration::InternalSwap(ShellDB_ShellSetConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shell_set_identifier_.Swap(&other->shell_set_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  variation_identifier_.Swap(&other->variation_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decorator_identifier_.Swap(&other->decorator_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
  swap(element_, other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellSetConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ShellGroupConfiguration::InitAsDefaultInstance() {
}
class ShellDB_ShellGroupConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ShellGroupConfiguration>()._has_bits_);
  static void set_has_asset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellDB_ShellGroupConfiguration::ShellDB_ShellGroupConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ShellGroupConfiguration)
}
ShellDB_ShellGroupConfiguration::ShellDB_ShellGroupConfiguration(const ShellDB_ShellGroupConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group_identifier()) {
    group_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_identifier(),
      GetArena());
  }
  asset_type_ = from.asset_type_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ShellGroupConfiguration)
}

void ShellDB_ShellGroupConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto.base);
  group_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_type_ = 1;
}

ShellDB_ShellGroupConfiguration::~ShellDB_ShellGroupConfiguration() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ShellGroupConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ShellGroupConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ShellGroupConfiguration::ArenaDtor(void* object) {
  ShellDB_ShellGroupConfiguration* _this = reinterpret_cast< ShellDB_ShellGroupConfiguration* >(object);
  (void)_this;
}
void ShellDB_ShellGroupConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ShellGroupConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ShellGroupConfiguration& ShellDB_ShellGroupConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ShellGroupConfiguration_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ShellGroupConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ShellGroupConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_identifier_.ClearNonDefaultToEmpty();
    }
    asset_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ShellGroupConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.ShellSpec.AssetType asset_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellSpec_AssetType_IsValid(val))) {
            _internal_set_asset_type(static_cast<::ei::ShellSpec_AssetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string group_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ShellGroupConfiguration.group_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ShellGroupConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ShellGroupConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.ShellSpec.AssetType asset_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_asset_type(), target);
  }

  // optional string group_identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_identifier().data(), static_cast<int>(this->_internal_group_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ShellGroupConfiguration.group_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ShellGroupConfiguration)
  return target;
}

size_t ShellDB_ShellGroupConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ShellGroupConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string group_identifier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_identifier());
    }

    // optional .ei.ShellSpec.AssetType asset_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ShellGroupConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ShellGroupConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ShellGroupConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ShellGroupConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ShellGroupConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ShellGroupConfiguration)
    MergeFrom(*source);
  }
}

void ShellDB_ShellGroupConfiguration::MergeFrom(const ShellDB_ShellGroupConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ShellGroupConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group_identifier(from._internal_group_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      asset_type_ = from.asset_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellDB_ShellGroupConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ShellGroupConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ShellGroupConfiguration::CopyFrom(const ShellDB_ShellGroupConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ShellGroupConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ShellGroupConfiguration::IsInitialized() const {
  return true;
}

void ShellDB_ShellGroupConfiguration::InternalSwap(ShellDB_ShellGroupConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_identifier_.Swap(&other->group_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(asset_type_, other->asset_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ShellGroupConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_ChickenConfig::InitAsDefaultInstance() {
}
class ShellDB_ChickenConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_ChickenConfig>()._has_bits_);
  static void set_has_chicken_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hat_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShellDB_ChickenConfig::ShellDB_ChickenConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.ChickenConfig)
}
ShellDB_ChickenConfig::ShellDB_ChickenConfig(const ShellDB_ChickenConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chicken_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chicken_identifier()) {
    chicken_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chicken_identifier(),
      GetArena());
  }
  hat_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hat_identifier()) {
    hat_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hat_identifier(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.ChickenConfig)
}

void ShellDB_ChickenConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ChickenConfig_ei_2eproto.base);
  chicken_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hat_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShellDB_ChickenConfig::~ShellDB_ChickenConfig() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.ChickenConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_ChickenConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chicken_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hat_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellDB_ChickenConfig::ArenaDtor(void* object) {
  ShellDB_ChickenConfig* _this = reinterpret_cast< ShellDB_ChickenConfig* >(object);
  (void)_this;
}
void ShellDB_ChickenConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_ChickenConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_ChickenConfig& ShellDB_ChickenConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ChickenConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_ChickenConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.ChickenConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chicken_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hat_identifier_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_ChickenConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string chicken_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chicken_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ChickenConfig.chicken_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hat_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hat_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.ChickenConfig.hat_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_ChickenConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.ChickenConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string chicken_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chicken_identifier().data(), static_cast<int>(this->_internal_chicken_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ChickenConfig.chicken_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chicken_identifier(), target);
  }

  // optional string hat_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hat_identifier().data(), static_cast<int>(this->_internal_hat_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.ChickenConfig.hat_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hat_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.ChickenConfig)
  return target;
}

size_t ShellDB_ChickenConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.ChickenConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string chicken_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chicken_identifier());
    }

    // optional string hat_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hat_identifier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_ChickenConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.ChickenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_ChickenConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_ChickenConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.ChickenConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.ChickenConfig)
    MergeFrom(*source);
  }
}

void ShellDB_ChickenConfig::MergeFrom(const ShellDB_ChickenConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.ChickenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chicken_identifier(from._internal_chicken_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hat_identifier(from._internal_hat_identifier());
    }
  }
}

void ShellDB_ChickenConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.ChickenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_ChickenConfig::CopyFrom(const ShellDB_ChickenConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.ChickenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_ChickenConfig::IsInitialized() const {
  return true;
}

void ShellDB_ChickenConfig::InternalSwap(ShellDB_ChickenConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chicken_identifier_.Swap(&other->chicken_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hat_identifier_.Swap(&other->hat_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_ChickenConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB_LightingConfig::InitAsDefaultInstance() {
  ::ei::_ShellDB_LightingConfig_default_instance_._instance.get_mutable()->light_dir_ = const_cast< ::ei::Vector3*>(
      ::ei::Vector3::internal_default_instance());
  ::ei::_ShellDB_LightingConfig_default_instance_._instance.get_mutable()->light_direct_color_ = const_cast< ::ei::Vector4*>(
      ::ei::Vector4::internal_default_instance());
  ::ei::_ShellDB_LightingConfig_default_instance_._instance.get_mutable()->light_ambient_color_ = const_cast< ::ei::Vector4*>(
      ::ei::Vector4::internal_default_instance());
  ::ei::_ShellDB_LightingConfig_default_instance_._instance.get_mutable()->fog_color_ = const_cast< ::ei::Vector4*>(
      ::ei::Vector4::internal_default_instance());
}
class ShellDB_LightingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB_LightingConfig>()._has_bits_);
  static const ::ei::Vector3& light_dir(const ShellDB_LightingConfig* msg);
  static void set_has_light_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ei::Vector4& light_direct_color(const ShellDB_LightingConfig* msg);
  static void set_has_light_direct_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_light_direct_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ei::Vector4& light_ambient_color(const ShellDB_LightingConfig* msg);
  static void set_has_light_ambient_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_ambient_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ei::Vector4& fog_color(const ShellDB_LightingConfig* msg);
  static void set_has_fog_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fog_near(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fog_far(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fog_density(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ei::Vector3&
ShellDB_LightingConfig::_Internal::light_dir(const ShellDB_LightingConfig* msg) {
  return *msg->light_dir_;
}
const ::ei::Vector4&
ShellDB_LightingConfig::_Internal::light_direct_color(const ShellDB_LightingConfig* msg) {
  return *msg->light_direct_color_;
}
const ::ei::Vector4&
ShellDB_LightingConfig::_Internal::light_ambient_color(const ShellDB_LightingConfig* msg) {
  return *msg->light_ambient_color_;
}
const ::ei::Vector4&
ShellDB_LightingConfig::_Internal::fog_color(const ShellDB_LightingConfig* msg) {
  return *msg->fog_color_;
}
ShellDB_LightingConfig::ShellDB_LightingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB.LightingConfig)
}
ShellDB_LightingConfig::ShellDB_LightingConfig(const ShellDB_LightingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_light_dir()) {
    light_dir_ = new ::ei::Vector3(*from.light_dir_);
  } else {
    light_dir_ = nullptr;
  }
  if (from._internal_has_light_direct_color()) {
    light_direct_color_ = new ::ei::Vector4(*from.light_direct_color_);
  } else {
    light_direct_color_ = nullptr;
  }
  if (from._internal_has_light_ambient_color()) {
    light_ambient_color_ = new ::ei::Vector4(*from.light_ambient_color_);
  } else {
    light_ambient_color_ = nullptr;
  }
  if (from._internal_has_fog_color()) {
    fog_color_ = new ::ei::Vector4(*from.fog_color_);
  } else {
    fog_color_ = nullptr;
  }
  ::memcpy(&light_direct_intensity_, &from.light_direct_intensity_,
    static_cast<size_t>(reinterpret_cast<char*>(&fog_density_) -
    reinterpret_cast<char*>(&light_direct_intensity_)) + sizeof(fog_density_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB.LightingConfig)
}

void ShellDB_LightingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_LightingConfig_ei_2eproto.base);
  ::memset(&light_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_density_) -
      reinterpret_cast<char*>(&light_dir_)) + sizeof(fog_density_));
}

ShellDB_LightingConfig::~ShellDB_LightingConfig() {
  // @@protoc_insertion_point(destructor:ei.ShellDB.LightingConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB_LightingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete light_dir_;
  if (this != internal_default_instance()) delete light_direct_color_;
  if (this != internal_default_instance()) delete light_ambient_color_;
  if (this != internal_default_instance()) delete fog_color_;
}

void ShellDB_LightingConfig::ArenaDtor(void* object) {
  ShellDB_LightingConfig* _this = reinterpret_cast< ShellDB_LightingConfig* >(object);
  (void)_this;
}
void ShellDB_LightingConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB_LightingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB_LightingConfig& ShellDB_LightingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_LightingConfig_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB_LightingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB.LightingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(light_dir_ != nullptr);
      light_dir_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(light_direct_color_ != nullptr);
      light_direct_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(light_ambient_color_ != nullptr);
      light_ambient_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fog_color_ != nullptr);
      fog_color_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&light_direct_intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fog_far_) -
        reinterpret_cast<char*>(&light_direct_intensity_)) + sizeof(fog_far_));
  }
  fog_density_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB_LightingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.Vector3 light_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_dir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.Vector4 light_direct_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_direct_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float light_direct_intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_light_direct_intensity(&has_bits);
          light_direct_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .ei.Vector4 light_ambient_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_ambient_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float light_ambient_intensity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_light_ambient_intensity(&has_bits);
          light_ambient_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .ei.Vector4 fog_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fog_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fog_near = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fog_near(&has_bits);
          fog_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fog_far = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_fog_far(&has_bits);
          fog_far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fog_density = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fog_density(&has_bits);
          fog_density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB_LightingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB.LightingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.Vector3 light_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::light_dir(this), target, stream);
  }

  // optional .ei.Vector4 light_direct_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::light_direct_color(this), target, stream);
  }

  // optional float light_direct_intensity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_light_direct_intensity(), target);
  }

  // optional .ei.Vector4 light_ambient_color = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::light_ambient_color(this), target, stream);
  }

  // optional float light_ambient_intensity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_light_ambient_intensity(), target);
  }

  // optional .ei.Vector4 fog_color = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fog_color(this), target, stream);
  }

  // optional float fog_near = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fog_near(), target);
  }

  // optional float fog_far = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_fog_far(), target);
  }

  // optional float fog_density = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fog_density(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB.LightingConfig)
  return target;
}

size_t ShellDB_LightingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB.LightingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ei.Vector3 light_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_dir_);
    }

    // optional .ei.Vector4 light_direct_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_direct_color_);
    }

    // optional .ei.Vector4 light_ambient_color = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_ambient_color_);
    }

    // optional .ei.Vector4 fog_color = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fog_color_);
    }

    // optional float light_direct_intensity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float light_ambient_intensity = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float fog_near = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float fog_far = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float fog_density = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB_LightingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB.LightingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB_LightingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB_LightingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB.LightingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB.LightingConfig)
    MergeFrom(*source);
  }
}

void ShellDB_LightingConfig::MergeFrom(const ShellDB_LightingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB.LightingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_light_dir()->::ei::Vector3::MergeFrom(from._internal_light_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_light_direct_color()->::ei::Vector4::MergeFrom(from._internal_light_direct_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_light_ambient_color()->::ei::Vector4::MergeFrom(from._internal_light_ambient_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_fog_color()->::ei::Vector4::MergeFrom(from._internal_fog_color());
    }
    if (cached_has_bits & 0x00000010u) {
      light_direct_intensity_ = from.light_direct_intensity_;
    }
    if (cached_has_bits & 0x00000020u) {
      light_ambient_intensity_ = from.light_ambient_intensity_;
    }
    if (cached_has_bits & 0x00000040u) {
      fog_near_ = from.fog_near_;
    }
    if (cached_has_bits & 0x00000080u) {
      fog_far_ = from.fog_far_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_fog_density(from._internal_fog_density());
  }
}

void ShellDB_LightingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB.LightingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB_LightingConfig::CopyFrom(const ShellDB_LightingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB.LightingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB_LightingConfig::IsInitialized() const {
  return true;
}

void ShellDB_LightingConfig::InternalSwap(ShellDB_LightingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellDB_LightingConfig, fog_density_)
      + sizeof(ShellDB_LightingConfig::fog_density_)
      - PROTOBUF_FIELD_OFFSET(ShellDB_LightingConfig, light_dir_)>(
          reinterpret_cast<char*>(&light_dir_),
          reinterpret_cast<char*>(&other->light_dir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB_LightingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellDB::InitAsDefaultInstance() {
}
class ShellDB::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellDB>()._has_bits_);
  static void set_has_lighting_controls_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellDB::ShellDB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shell_inventory_(arena),
  shell_set_inventory_(arena),
  farm_configs_(arena),
  shell_object_inventory_(arena),
  shell_element_inventory_(arena),
  new_shells_downloaded_(arena),
  new_shells_seen_(arena),
  shell_variation_inventory_(arena),
  saved_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellDB)
}
ShellDB::ShellDB(const ShellDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      shell_inventory_(from.shell_inventory_),
      shell_set_inventory_(from.shell_set_inventory_),
      farm_configs_(from.farm_configs_),
      shell_object_inventory_(from.shell_object_inventory_),
      shell_element_inventory_(from.shell_element_inventory_),
      new_shells_downloaded_(from.new_shells_downloaded_),
      new_shells_seen_(from.new_shells_seen_),
      shell_variation_inventory_(from.shell_variation_inventory_),
      saved_configs_(from.saved_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lighting_controls_unlocked_ = from.lighting_controls_unlocked_;
  // @@protoc_insertion_point(copy_constructor:ei.ShellDB)
}

void ShellDB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellDB_ei_2eproto.base);
  lighting_controls_unlocked_ = false;
}

ShellDB::~ShellDB() {
  // @@protoc_insertion_point(destructor:ei.ShellDB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellDB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShellDB::ArenaDtor(void* object) {
  ShellDB* _this = reinterpret_cast< ShellDB* >(object);
  (void)_this;
}
void ShellDB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellDB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellDB& ShellDB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellDB_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellDB::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shell_inventory_.Clear();
  shell_set_inventory_.Clear();
  farm_configs_.Clear();
  shell_object_inventory_.Clear();
  shell_element_inventory_.Clear();
  new_shells_downloaded_.Clear();
  new_shells_seen_.Clear();
  shell_variation_inventory_.Clear();
  saved_configs_.Clear();
  lighting_controls_unlocked_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellDB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ShellDB.ShellStatus shell_inventory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellStatus shell_set_inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_set_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.FarmConfiguration farm_configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_farm_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellStatus shell_object_inventory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_object_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellElementStatus shell_element_inventory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_element_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string new_shells_downloaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_shells_downloaded();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.new_shells_downloaded");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string new_shells_seen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_shells_seen();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellDB.new_shells_seen");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.ShellSetVariationStatus shell_variation_inventory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shell_variation_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellDB.SavedFarmConfiguration saved_configs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool lighting_controls_unlocked = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lighting_controls_unlocked(&has_bits);
          lighting_controls_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellDB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellDB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ShellDB.ShellStatus shell_inventory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shell_inventory(i), target, stream);
  }

  // repeated .ei.ShellDB.ShellStatus shell_set_inventory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_set_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shell_set_inventory(i), target, stream);
  }

  // repeated .ei.ShellDB.FarmConfiguration farm_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_farm_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_farm_configs(i), target, stream);
  }

  // repeated .ei.ShellDB.ShellStatus shell_object_inventory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_object_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shell_object_inventory(i), target, stream);
  }

  // repeated .ei.ShellDB.ShellElementStatus shell_element_inventory = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_element_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shell_element_inventory(i), target, stream);
  }

  // repeated string new_shells_downloaded = 6;
  for (int i = 0, n = this->_internal_new_shells_downloaded_size(); i < n; i++) {
    const auto& s = this->_internal_new_shells_downloaded(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.new_shells_downloaded");
    target = stream->WriteString(6, s, target);
  }

  // repeated string new_shells_seen = 7;
  for (int i = 0, n = this->_internal_new_shells_seen_size(); i < n; i++) {
    const auto& s = this->_internal_new_shells_seen(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellDB.new_shells_seen");
    target = stream->WriteString(7, s, target);
  }

  // repeated .ei.ShellDB.ShellSetVariationStatus shell_variation_inventory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shell_variation_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_shell_variation_inventory(i), target, stream);
  }

  // repeated .ei.ShellDB.SavedFarmConfiguration saved_configs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_saved_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_saved_configs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lighting_controls_unlocked = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_lighting_controls_unlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellDB)
  return target;
}

size_t ShellDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellDB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellDB.ShellStatus shell_inventory = 1;
  total_size += 1UL * this->_internal_shell_inventory_size();
  for (const auto& msg : this->shell_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ShellStatus shell_set_inventory = 2;
  total_size += 1UL * this->_internal_shell_set_inventory_size();
  for (const auto& msg : this->shell_set_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.FarmConfiguration farm_configs = 3;
  total_size += 1UL * this->_internal_farm_configs_size();
  for (const auto& msg : this->farm_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ShellStatus shell_object_inventory = 4;
  total_size += 1UL * this->_internal_shell_object_inventory_size();
  for (const auto& msg : this->shell_object_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.ShellElementStatus shell_element_inventory = 5;
  total_size += 1UL * this->_internal_shell_element_inventory_size();
  for (const auto& msg : this->shell_element_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string new_shells_downloaded = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(new_shells_downloaded_.size());
  for (int i = 0, n = new_shells_downloaded_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      new_shells_downloaded_.Get(i));
  }

  // repeated string new_shells_seen = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(new_shells_seen_.size());
  for (int i = 0, n = new_shells_seen_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      new_shells_seen_.Get(i));
  }

  // repeated .ei.ShellDB.ShellSetVariationStatus shell_variation_inventory = 8;
  total_size += 1UL * this->_internal_shell_variation_inventory_size();
  for (const auto& msg : this->shell_variation_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellDB.SavedFarmConfiguration saved_configs = 9;
  total_size += 1UL * this->_internal_saved_configs_size();
  for (const auto& msg : this->saved_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool lighting_controls_unlocked = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellDB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellDB)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellDB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellDB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellDB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellDB)
    MergeFrom(*source);
  }
}

void ShellDB::MergeFrom(const ShellDB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellDB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shell_inventory_.MergeFrom(from.shell_inventory_);
  shell_set_inventory_.MergeFrom(from.shell_set_inventory_);
  farm_configs_.MergeFrom(from.farm_configs_);
  shell_object_inventory_.MergeFrom(from.shell_object_inventory_);
  shell_element_inventory_.MergeFrom(from.shell_element_inventory_);
  new_shells_downloaded_.MergeFrom(from.new_shells_downloaded_);
  new_shells_seen_.MergeFrom(from.new_shells_seen_);
  shell_variation_inventory_.MergeFrom(from.shell_variation_inventory_);
  saved_configs_.MergeFrom(from.saved_configs_);
  if (from._internal_has_lighting_controls_unlocked()) {
    _internal_set_lighting_controls_unlocked(from._internal_lighting_controls_unlocked());
  }
}

void ShellDB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellDB::CopyFrom(const ShellDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellDB::IsInitialized() const {
  return true;
}

void ShellDB::InternalSwap(ShellDB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shell_inventory_.InternalSwap(&other->shell_inventory_);
  shell_set_inventory_.InternalSwap(&other->shell_set_inventory_);
  farm_configs_.InternalSwap(&other->farm_configs_);
  shell_object_inventory_.InternalSwap(&other->shell_object_inventory_);
  shell_element_inventory_.InternalSwap(&other->shell_element_inventory_);
  new_shells_downloaded_.InternalSwap(&other->new_shells_downloaded_);
  new_shells_seen_.InternalSwap(&other->new_shells_seen_);
  shell_variation_inventory_.InternalSwap(&other->shell_variation_inventory_);
  saved_configs_.InternalSwap(&other->saved_configs_);
  swap(lighting_controls_unlocked_, other->lighting_controls_unlocked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellDB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellPopularityStats_Entry::InitAsDefaultInstance() {
}
class ShellPopularityStats_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellPopularityStats_Entry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_element(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ShellPopularityStats_Entry::ShellPopularityStats_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellPopularityStats.Entry)
}
ShellPopularityStats_Entry::ShellPopularityStats_Entry(const ShellPopularityStats_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&spent_, &from.spent_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&spent_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellPopularityStats.Entry)
}

void ShellPopularityStats_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellPopularityStats_Entry_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&spent_)) + sizeof(count_));
  element_ = 1;
}

ShellPopularityStats_Entry::~ShellPopularityStats_Entry() {
  // @@protoc_insertion_point(destructor:ei.ShellPopularityStats.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellPopularityStats_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellPopularityStats_Entry::ArenaDtor(void* object) {
  ShellPopularityStats_Entry* _this = reinterpret_cast< ShellPopularityStats_Entry* >(object);
  (void)_this;
}
void ShellPopularityStats_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellPopularityStats_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellPopularityStats_Entry& ShellPopularityStats_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellPopularityStats_Entry_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellPopularityStats_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellPopularityStats.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&spent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&spent_)) + sizeof(count_));
    element_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellPopularityStats_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellPopularityStats.Entry.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmElement element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellDB_FarmElement_IsValid(val))) {
            _internal_set_element(static_cast<::ei::ShellDB_FarmElement>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_spent(&has_bits);
          spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellPopularityStats_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellPopularityStats.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellPopularityStats.Entry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .ei.ShellDB.FarmElement element = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_element(), target);
  }

  // optional uint64 spent = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_spent(), target);
  }

  // optional uint64 count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellPopularityStats.Entry)
  return target;
}

size_t ShellPopularityStats_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellPopularityStats.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional uint64 spent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_spent());
    }

    // optional uint64 count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

    // optional .ei.ShellDB.FarmElement element = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_element());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellPopularityStats_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellPopularityStats.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellPopularityStats_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellPopularityStats_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellPopularityStats.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellPopularityStats.Entry)
    MergeFrom(*source);
  }
}

void ShellPopularityStats_Entry::MergeFrom(const ShellPopularityStats_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellPopularityStats.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      spent_ = from.spent_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      element_ = from.element_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellPopularityStats_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellPopularityStats.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellPopularityStats_Entry::CopyFrom(const ShellPopularityStats_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellPopularityStats.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellPopularityStats_Entry::IsInitialized() const {
  return true;
}

void ShellPopularityStats_Entry::InternalSwap(ShellPopularityStats_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellPopularityStats_Entry, count_)
      + sizeof(ShellPopularityStats_Entry::count_)
      - PROTOBUF_FIELD_OFFSET(ShellPopularityStats_Entry, spent_)>(
          reinterpret_cast<char*>(&spent_),
          reinterpret_cast<char*>(&other->spent_));
  swap(element_, other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellPopularityStats_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellPopularityStats::InitAsDefaultInstance() {
}
class ShellPopularityStats::_Internal {
 public:
};

ShellPopularityStats::ShellPopularityStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellPopularityStats)
}
ShellPopularityStats::ShellPopularityStats(const ShellPopularityStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ShellPopularityStats)
}

void ShellPopularityStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellPopularityStats_ei_2eproto.base);
}

ShellPopularityStats::~ShellPopularityStats() {
  // @@protoc_insertion_point(destructor:ei.ShellPopularityStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellPopularityStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShellPopularityStats::ArenaDtor(void* object) {
  ShellPopularityStats* _this = reinterpret_cast< ShellPopularityStats* >(object);
  (void)_this;
}
void ShellPopularityStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellPopularityStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellPopularityStats& ShellPopularityStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellPopularityStats_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellPopularityStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellPopularityStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellPopularityStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ShellPopularityStats.Entry data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellPopularityStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellPopularityStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ShellPopularityStats.Entry data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellPopularityStats)
  return target;
}

size_t ShellPopularityStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellPopularityStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellPopularityStats.Entry data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellPopularityStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellPopularityStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellPopularityStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellPopularityStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellPopularityStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellPopularityStats)
    MergeFrom(*source);
  }
}

void ShellPopularityStats::MergeFrom(const ShellPopularityStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellPopularityStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ShellPopularityStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellPopularityStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellPopularityStats::CopyFrom(const ShellPopularityStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellPopularityStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellPopularityStats::IsInitialized() const {
  return true;
}

void ShellPopularityStats::InternalSwap(ShellPopularityStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellPopularityStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellsActionLog::InitAsDefaultInstance() {
  ::ei::_ShellsActionLog_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ShellsActionLog::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellsActionLog>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ShellsActionLog* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sub_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_farm_element(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_approx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_farm_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tickets_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::ei::BasicRequestInfo&
ShellsActionLog::_Internal::rinfo(const ShellsActionLog* msg) {
  return *msg->rinfo_;
}
ShellsActionLog::ShellsActionLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellsActionLog)
}
ShellsActionLog::ShellsActionLog(const ShellsActionLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action()) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  sub_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_id()) {
    sub_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_id(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  ::memcpy(&approx_time_, &from.approx_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&farm_element_) -
    reinterpret_cast<char*>(&approx_time_)) + sizeof(farm_element_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellsActionLog)
}

void ShellsActionLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellsActionLog_ei_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_spent_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(gold_spent_));
  farm_element_ = 1;
}

ShellsActionLog::~ShellsActionLog() {
  // @@protoc_insertion_point(destructor:ei.ShellsActionLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellsActionLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void ShellsActionLog::ArenaDtor(void* object) {
  ShellsActionLog* _this = reinterpret_cast< ShellsActionLog* >(object);
  (void)_this;
}
void ShellsActionLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellsActionLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellsActionLog& ShellsActionLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellsActionLog_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellsActionLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellsActionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sub_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&approx_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&farm_index_) -
        reinterpret_cast<char*>(&approx_time_)) + sizeof(farm_index_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&soul_eggs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_spent_) -
        reinterpret_cast<char*>(&soul_eggs_)) + sizeof(gold_spent_));
    farm_element_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellsActionLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellsActionLog.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellsActionLog.action");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sub_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sub_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellsActionLog.sub_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cost(&has_bits);
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double approx_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_approx_time(&has_bits);
          approx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellsActionLog.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 farm_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_farm_index(&has_bits);
          farm_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmElement farm_element = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellDB_FarmElement_IsValid(val))) {
            _internal_set_farm_element(static_cast<::ei::ShellDB_FarmElement>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_soul_eggs(&has_bits);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 tickets_spent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tickets_spent(&has_bits);
          tickets_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gold_spent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gold_spent(&has_bits);
          gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellsActionLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellsActionLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellsActionLog.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional string action = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellsActionLog.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // optional string sub_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_id().data(), static_cast<int>(this->_internal_sub_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellsActionLog.sub_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sub_id(), target);
  }

  // optional uint32 cost = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cost(), target);
  }

  // optional double approx_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_approx_time(), target);
  }

  // optional string version = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellsActionLog.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // optional int32 farm_index = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_farm_index(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rinfo(this), target, stream);
  }

  // optional .ei.ShellDB.FarmElement farm_element = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_farm_element(), target);
  }

  // optional double soul_eggs = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_soul_eggs(), target);
  }

  // optional uint64 tickets_spent = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tickets_spent(), target);
  }

  // optional uint64 gold_spent = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_gold_spent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellsActionLog)
  return target;
}

size_t ShellsActionLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellsActionLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string sub_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_id());
    }

    // optional string version = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ei.BasicRequestInfo rinfo = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional double approx_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 cost = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cost());
    }

    // optional int32 farm_index = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_farm_index());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double soul_eggs = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint64 tickets_spent = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tickets_spent());
    }

    // optional uint64 gold_spent = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gold_spent());
    }

    // optional .ei.ShellDB.FarmElement farm_element = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_farm_element());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellsActionLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellsActionLog)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellsActionLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellsActionLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellsActionLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellsActionLog)
    MergeFrom(*source);
  }
}

void ShellsActionLog::MergeFrom(const ShellsActionLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellsActionLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sub_id(from._internal_sub_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      approx_time_ = from.approx_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      farm_index_ = from.farm_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00000200u) {
      tickets_spent_ = from.tickets_spent_;
    }
    if (cached_has_bits & 0x00000400u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x00000800u) {
      farm_element_ = from.farm_element_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellsActionLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellsActionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellsActionLog::CopyFrom(const ShellsActionLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellsActionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellsActionLog::IsInitialized() const {
  return true;
}

void ShellsActionLog::InternalSwap(ShellsActionLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_id_.Swap(&other->sub_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellsActionLog, gold_spent_)
      + sizeof(ShellsActionLog::gold_spent_)
      - PROTOBUF_FIELD_OFFSET(ShellsActionLog, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
  swap(farm_element_, other->farm_element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellsActionLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitShellShowcaseRequest::InitAsDefaultInstance() {
  ::ei::_SubmitShellShowcaseRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
  ::ei::_SubmitShellShowcaseRequest_default_instance_._instance.get_mutable()->farm_config_ = const_cast< ::ei::ShellDB_FarmConfiguration*>(
      ::ei::ShellDB_FarmConfiguration::internal_default_instance());
}
class SubmitShellShowcaseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubmitShellShowcaseRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const SubmitShellShowcaseRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_username(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ei::ShellDB_FarmConfiguration& farm_config(const SubmitShellShowcaseRequest* msg);
  static void set_has_farm_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::BasicRequestInfo&
SubmitShellShowcaseRequest::_Internal::rinfo(const SubmitShellShowcaseRequest* msg) {
  return *msg->rinfo_;
}
const ::ei::ShellDB_FarmConfiguration&
SubmitShellShowcaseRequest::_Internal::farm_config(const SubmitShellShowcaseRequest* msg) {
  return *msg->farm_config_;
}
SubmitShellShowcaseRequest::SubmitShellShowcaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SubmitShellShowcaseRequest)
}
SubmitShellShowcaseRequest::SubmitShellShowcaseRequest(const SubmitShellShowcaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_local_id()) {
    local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_id(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_id()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  if (from._internal_has_farm_config()) {
    farm_config_ = new ::ei::ShellDB_FarmConfiguration(*from.farm_config_);
  } else {
    farm_config_ = nullptr;
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  public_username_ = from.public_username_;
  // @@protoc_insertion_point(copy_constructor:ei.SubmitShellShowcaseRequest)
}

void SubmitShellShowcaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitShellShowcaseRequest_ei_2eproto.base);
  local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&farm_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_username_) -
      reinterpret_cast<char*>(&farm_config_)) + sizeof(public_username_));
}

SubmitShellShowcaseRequest::~SubmitShellShowcaseRequest() {
  // @@protoc_insertion_point(destructor:ei.SubmitShellShowcaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitShellShowcaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  local_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete farm_config_;
  if (this != internal_default_instance()) delete rinfo_;
}

void SubmitShellShowcaseRequest::ArenaDtor(void* object) {
  SubmitShellShowcaseRequest* _this = reinterpret_cast< SubmitShellShowcaseRequest* >(object);
  (void)_this;
}
void SubmitShellShowcaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitShellShowcaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitShellShowcaseRequest& SubmitShellShowcaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitShellShowcaseRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void SubmitShellShowcaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SubmitShellShowcaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      local_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(farm_config_ != nullptr);
      farm_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  public_username_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitShellShowcaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string local_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SubmitShellShowcaseRequest.local_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SubmitShellShowcaseRequest.user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmConfiguration farm_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool public_username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_public_username(&has_bits);
          public_username_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitShellShowcaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SubmitShellShowcaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string local_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_id().data(), static_cast<int>(this->_internal_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SubmitShellShowcaseRequest.local_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_id(), target);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SubmitShellShowcaseRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional .ei.ShellDB.FarmConfiguration farm_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::farm_config(this), target, stream);
  }

  // optional .ei.BasicRequestInfo rinfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rinfo(this), target, stream);
  }

  // optional bool public_username = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_public_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SubmitShellShowcaseRequest)
  return target;
}

size_t SubmitShellShowcaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SubmitShellShowcaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string local_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_id());
    }

    // optional string user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional .ei.ShellDB.FarmConfiguration farm_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *farm_config_);
    }

    // optional .ei.BasicRequestInfo rinfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional bool public_username = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitShellShowcaseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SubmitShellShowcaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitShellShowcaseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitShellShowcaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SubmitShellShowcaseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SubmitShellShowcaseRequest)
    MergeFrom(*source);
  }
}

void SubmitShellShowcaseRequest::MergeFrom(const SubmitShellShowcaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SubmitShellShowcaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_local_id(from._internal_local_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_farm_config()->::ei::ShellDB_FarmConfiguration::MergeFrom(from._internal_farm_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      public_username_ = from.public_username_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubmitShellShowcaseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SubmitShellShowcaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitShellShowcaseRequest::CopyFrom(const SubmitShellShowcaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SubmitShellShowcaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitShellShowcaseRequest::IsInitialized() const {
  return true;
}

void SubmitShellShowcaseRequest::InternalSwap(SubmitShellShowcaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  local_id_.Swap(&other->local_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitShellShowcaseRequest, public_username_)
      + sizeof(SubmitShellShowcaseRequest::public_username_)
      - PROTOBUF_FIELD_OFFSET(SubmitShellShowcaseRequest, farm_config_)>(
          reinterpret_cast<char*>(&farm_config_),
          reinterpret_cast<char*>(&other->farm_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitShellShowcaseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellShowcase::InitAsDefaultInstance() {
}
class ShellShowcase::_Internal {
 public:
};

ShellShowcase::ShellShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_(arena),
  featured_(arena),
  fresh_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellShowcase)
}
ShellShowcase::ShellShowcase(const ShellShowcase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_(from.top_),
      featured_(from.featured_),
      fresh_(from.fresh_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ShellShowcase)
}

void ShellShowcase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellShowcase_ei_2eproto.base);
}

ShellShowcase::~ShellShowcase() {
  // @@protoc_insertion_point(destructor:ei.ShellShowcase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellShowcase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShellShowcase::ArenaDtor(void* object) {
  ShellShowcase* _this = reinterpret_cast< ShellShowcase* >(object);
  (void)_this;
}
void ShellShowcase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellShowcase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellShowcase& ShellShowcase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellShowcase_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellShowcase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_.Clear();
  featured_.Clear();
  fresh_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellShowcase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ShellShowcaseListingInfo top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellShowcaseListingInfo featured = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featured(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellShowcaseListingInfo fresh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fresh(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellShowcase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellShowcase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ShellShowcaseListingInfo top = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_top(i), target, stream);
  }

  // repeated .ei.ShellShowcaseListingInfo featured = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_featured_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_featured(i), target, stream);
  }

  // repeated .ei.ShellShowcaseListingInfo fresh = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fresh_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fresh(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellShowcase)
  return target;
}

size_t ShellShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellShowcase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellShowcaseListingInfo top = 1;
  total_size += 1UL * this->_internal_top_size();
  for (const auto& msg : this->top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellShowcaseListingInfo featured = 2;
  total_size += 1UL * this->_internal_featured_size();
  for (const auto& msg : this->featured_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ei.ShellShowcaseListingInfo fresh = 3;
  total_size += 1UL * this->_internal_fresh_size();
  for (const auto& msg : this->fresh_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellShowcase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellShowcase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellShowcase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellShowcase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellShowcase)
    MergeFrom(*source);
  }
}

void ShellShowcase::MergeFrom(const ShellShowcase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_.MergeFrom(from.top_);
  featured_.MergeFrom(from.featured_);
  fresh_.MergeFrom(from.fresh_);
}

void ShellShowcase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellShowcase::CopyFrom(const ShellShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellShowcase::IsInitialized() const {
  return true;
}

void ShellShowcase::InternalSwap(ShellShowcase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_.InternalSwap(&other->top_);
  featured_.InternalSwap(&other->featured_);
  fresh_.InternalSwap(&other->fresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellShowcase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellShowcaseListingInfo::InitAsDefaultInstance() {
  ::ei::_ShellShowcaseListingInfo_default_instance_._instance.get_mutable()->farm_config_ = const_cast< ::ei::ShellDB_FarmConfiguration*>(
      ::ei::ShellDB_FarmConfiguration::internal_default_instance());
}
class ShellShowcaseListingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellShowcaseListingInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creator_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::ei::ShellDB_FarmConfiguration& farm_config(const ShellShowcaseListingInfo* msg);
  static void set_has_farm_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sales(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gross(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_views(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_equips(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_likes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dislikes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_share_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ei::ShellDB_FarmConfiguration&
ShellShowcaseListingInfo::_Internal::farm_config(const ShellShowcaseListingInfo* msg) {
  return *msg->farm_config_;
}
ShellShowcaseListingInfo::ShellShowcaseListingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellShowcaseListingInfo)
}
ShellShowcaseListingInfo::ShellShowcaseListingInfo(const ShellShowcaseListingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  share_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_share_url()) {
    share_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_share_url(),
      GetArena());
  }
  local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_local_id()) {
    local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_id(),
      GetArena());
  }
  creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creator_name()) {
    creator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creator_name(),
      GetArena());
  }
  if (from._internal_has_farm_config()) {
    farm_config_ = new ::ei::ShellDB_FarmConfiguration(*from.farm_config_);
  } else {
    farm_config_ = nullptr;
  }
  ::memcpy(&gross_, &from.gross_,
    static_cast<size_t>(reinterpret_cast<char*>(&equips_) -
    reinterpret_cast<char*>(&gross_)) + sizeof(equips_));
  // @@protoc_insertion_point(copy_constructor:ei.ShellShowcaseListingInfo)
}

void ShellShowcaseListingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellShowcaseListingInfo_ei_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&farm_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equips_) -
      reinterpret_cast<char*>(&farm_config_)) + sizeof(equips_));
}

ShellShowcaseListingInfo::~ShellShowcaseListingInfo() {
  // @@protoc_insertion_point(destructor:ei.ShellShowcaseListingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellShowcaseListingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete farm_config_;
}

void ShellShowcaseListingInfo::ArenaDtor(void* object) {
  ShellShowcaseListingInfo* _this = reinterpret_cast< ShellShowcaseListingInfo* >(object);
  (void)_this;
}
void ShellShowcaseListingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellShowcaseListingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellShowcaseListingInfo& ShellShowcaseListingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellShowcaseListingInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellShowcaseListingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellShowcaseListingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      share_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      local_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      creator_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(farm_config_ != nullptr);
      farm_config_->Clear();
    }
  }
  gross_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&sales_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equips_) -
        reinterpret_cast<char*>(&sales_)) + sizeof(equips_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellShowcaseListingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellDB.FarmConfiguration farm_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_farm_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sales = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sales(&has_bits);
          sales_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gross = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gross(&has_bits);
          gross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 views = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_views(&has_bits);
          views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 likes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_likes(&has_bits);
          likes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dislikes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_dislikes(&has_bits);
          dislikes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string share_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_share_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.share_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.ShellShowcaseListingInfo.Status status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::ShellShowcaseListingInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::ShellShowcaseListingInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string local_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_local_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.local_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 equips = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_equips(&has_bits);
          equips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string creator_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_creator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShellShowcaseListingInfo.creator_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellShowcaseListingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellShowcaseListingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional .ei.ShellDB.FarmConfiguration farm_config = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::farm_config(this), target, stream);
  }

  // optional uint32 sales = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sales(), target);
  }

  // optional uint64 gross = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gross(), target);
  }

  // optional uint64 views = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_views(), target);
  }

  // optional uint32 likes = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_likes(), target);
  }

  // optional uint32 dislikes = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dislikes(), target);
  }

  // optional string share_url = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_url().data(), static_cast<int>(this->_internal_share_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.share_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_share_url(), target);
  }

  // optional .ei.ShellShowcaseListingInfo.Status status = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // optional string local_id = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_id().data(), static_cast<int>(this->_internal_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.local_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_local_id(), target);
  }

  // optional uint64 equips = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_equips(), target);
  }

  // optional string creator_name = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creator_name().data(), static_cast<int>(this->_internal_creator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShellShowcaseListingInfo.creator_name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_creator_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellShowcaseListingInfo)
  return target;
}

size_t ShellShowcaseListingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellShowcaseListingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string share_url = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_share_url());
    }

    // optional string local_id = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_id());
    }

    // optional string creator_name = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creator_name());
    }

    // optional .ei.ShellDB.FarmConfiguration farm_config = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *farm_config_);
    }

    // optional uint64 gross = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gross());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 sales = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sales());
    }

    // optional uint32 likes = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_likes());
    }

    // optional uint64 views = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_views());
    }

    // optional uint32 dislikes = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dislikes());
    }

    // optional .ei.ShellShowcaseListingInfo.Status status = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional uint64 equips = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_equips());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellShowcaseListingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellShowcaseListingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellShowcaseListingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellShowcaseListingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellShowcaseListingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellShowcaseListingInfo)
    MergeFrom(*source);
  }
}

void ShellShowcaseListingInfo::MergeFrom(const ShellShowcaseListingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellShowcaseListingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_share_url(from._internal_share_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_local_id(from._internal_local_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_creator_name(from._internal_creator_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_farm_config()->::ei::ShellDB_FarmConfiguration::MergeFrom(from._internal_farm_config());
    }
    if (cached_has_bits & 0x00000080u) {
      gross_ = from.gross_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      sales_ = from.sales_;
    }
    if (cached_has_bits & 0x00000200u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000400u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000800u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00001000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00002000u) {
      equips_ = from.equips_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShellShowcaseListingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellShowcaseListingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellShowcaseListingInfo::CopyFrom(const ShellShowcaseListingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellShowcaseListingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellShowcaseListingInfo::IsInitialized() const {
  return true;
}

void ShellShowcaseListingInfo::InternalSwap(ShellShowcaseListingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  share_url_.Swap(&other->share_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_id_.Swap(&other->local_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  creator_name_.Swap(&other->creator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellShowcaseListingInfo, equips_)
      + sizeof(ShellShowcaseListingInfo::equips_)
      - PROTOBUF_FIELD_OFFSET(ShellShowcaseListingInfo, farm_config_)>(
          reinterpret_cast<char*>(&farm_config_),
          reinterpret_cast<char*>(&other->farm_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellShowcaseListingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowcaseRoyaltyDeliveryConfirmation::InitAsDefaultInstance() {
  ::ei::_ShowcaseRoyaltyDeliveryConfirmation_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ShowcaseRoyaltyDeliveryConfirmation::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowcaseRoyaltyDeliveryConfirmation>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ShowcaseRoyaltyDeliveryConfirmation* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ei::BasicRequestInfo&
ShowcaseRoyaltyDeliveryConfirmation::_Internal::rinfo(const ShowcaseRoyaltyDeliveryConfirmation* msg) {
  return *msg->rinfo_;
}
ShowcaseRoyaltyDeliveryConfirmation::ShowcaseRoyaltyDeliveryConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShowcaseRoyaltyDeliveryConfirmation)
}
ShowcaseRoyaltyDeliveryConfirmation::ShowcaseRoyaltyDeliveryConfirmation(const ShowcaseRoyaltyDeliveryConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:ei.ShowcaseRoyaltyDeliveryConfirmation)
}

void ShowcaseRoyaltyDeliveryConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto.base);
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(amount_));
}

ShowcaseRoyaltyDeliveryConfirmation::~ShowcaseRoyaltyDeliveryConfirmation() {
  // @@protoc_insertion_point(destructor:ei.ShowcaseRoyaltyDeliveryConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShowcaseRoyaltyDeliveryConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
}

void ShowcaseRoyaltyDeliveryConfirmation::ArenaDtor(void* object) {
  ShowcaseRoyaltyDeliveryConfirmation* _this = reinterpret_cast< ShowcaseRoyaltyDeliveryConfirmation* >(object);
  (void)_this;
}
void ShowcaseRoyaltyDeliveryConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowcaseRoyaltyDeliveryConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowcaseRoyaltyDeliveryConfirmation& ShowcaseRoyaltyDeliveryConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowcaseRoyaltyDeliveryConfirmation_ei_2eproto.base);
  return *internal_default_instance();
}


void ShowcaseRoyaltyDeliveryConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rinfo_ != nullptr);
    rinfo_->Clear();
  }
  amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowcaseRoyaltyDeliveryConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.ShowcaseRoyaltyDeliveryConfirmation.ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowcaseRoyaltyDeliveryConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.ShowcaseRoyaltyDeliveryConfirmation.ids");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShowcaseRoyaltyDeliveryConfirmation)
  return target;
}

size_t ShowcaseRoyaltyDeliveryConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ei.BasicRequestInfo rinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional uint32 amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowcaseRoyaltyDeliveryConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowcaseRoyaltyDeliveryConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowcaseRoyaltyDeliveryConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShowcaseRoyaltyDeliveryConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShowcaseRoyaltyDeliveryConfirmation)
    MergeFrom(*source);
  }
}

void ShowcaseRoyaltyDeliveryConfirmation::MergeFrom(const ShowcaseRoyaltyDeliveryConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShowcaseRoyaltyDeliveryConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowcaseRoyaltyDeliveryConfirmation::CopyFrom(const ShowcaseRoyaltyDeliveryConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShowcaseRoyaltyDeliveryConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowcaseRoyaltyDeliveryConfirmation::IsInitialized() const {
  return true;
}

void ShowcaseRoyaltyDeliveryConfirmation::InternalSwap(ShowcaseRoyaltyDeliveryConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowcaseRoyaltyDeliveryConfirmation, amount_)
      + sizeof(ShowcaseRoyaltyDeliveryConfirmation::amount_)
      - PROTOBUF_FIELD_OFFSET(ShowcaseRoyaltyDeliveryConfirmation, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowcaseRoyaltyDeliveryConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellShowcaseListingSet::InitAsDefaultInstance() {
}
class ShellShowcaseListingSet::_Internal {
 public:
};

ShellShowcaseListingSet::ShellShowcaseListingSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  listings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellShowcaseListingSet)
}
ShellShowcaseListingSet::ShellShowcaseListingSet(const ShellShowcaseListingSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listings_(from.listings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ei.ShellShowcaseListingSet)
}

void ShellShowcaseListingSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellShowcaseListingSet_ei_2eproto.base);
}

ShellShowcaseListingSet::~ShellShowcaseListingSet() {
  // @@protoc_insertion_point(destructor:ei.ShellShowcaseListingSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellShowcaseListingSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShellShowcaseListingSet::ArenaDtor(void* object) {
  ShellShowcaseListingSet* _this = reinterpret_cast< ShellShowcaseListingSet* >(object);
  (void)_this;
}
void ShellShowcaseListingSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellShowcaseListingSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellShowcaseListingSet& ShellShowcaseListingSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellShowcaseListingSet_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellShowcaseListingSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellShowcaseListingSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellShowcaseListingSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ei.ShellShowcaseListingInfo listings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellShowcaseListingSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellShowcaseListingSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ei.ShellShowcaseListingInfo listings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_listings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_listings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellShowcaseListingSet)
  return target;
}

size_t ShellShowcaseListingSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellShowcaseListingSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellShowcaseListingInfo listings = 1;
  total_size += 1UL * this->_internal_listings_size();
  for (const auto& msg : this->listings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellShowcaseListingSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellShowcaseListingSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellShowcaseListingSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellShowcaseListingSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellShowcaseListingSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellShowcaseListingSet)
    MergeFrom(*source);
  }
}

void ShellShowcaseListingSet::MergeFrom(const ShellShowcaseListingSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellShowcaseListingSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listings_.MergeFrom(from.listings_);
}

void ShellShowcaseListingSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellShowcaseListingSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellShowcaseListingSet::CopyFrom(const ShellShowcaseListingSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellShowcaseListingSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellShowcaseListingSet::IsInitialized() const {
  return true;
}

void ShellShowcaseListingSet::InternalSwap(ShellShowcaseListingSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  listings_.InternalSwap(&other->listings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellShowcaseListingSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellsActionBatch::InitAsDefaultInstance() {
  ::ei::_ShellsActionBatch_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class ShellsActionBatch::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellsActionBatch>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const ShellsActionBatch* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ei::BasicRequestInfo&
ShellsActionBatch::_Internal::rinfo(const ShellsActionBatch* msg) {
  return *msg->rinfo_;
}
ShellsActionBatch::ShellsActionBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.ShellsActionBatch)
}
ShellsActionBatch::ShellsActionBatch(const ShellsActionBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ei.ShellsActionBatch)
}

void ShellsActionBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellsActionBatch_ei_2eproto.base);
  rinfo_ = nullptr;
}

ShellsActionBatch::~ShellsActionBatch() {
  // @@protoc_insertion_point(destructor:ei.ShellsActionBatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShellsActionBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rinfo_;
}

void ShellsActionBatch::ArenaDtor(void* object) {
  ShellsActionBatch* _this = reinterpret_cast< ShellsActionBatch* >(object);
  (void)_this;
}
void ShellsActionBatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShellsActionBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellsActionBatch& ShellsActionBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellsActionBatch_ei_2eproto.base);
  return *internal_default_instance();
}


void ShellsActionBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.ShellsActionBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rinfo_ != nullptr);
    rinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellsActionBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.BasicRequestInfo rinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ei.ShellsActionLog actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellsActionBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.ShellsActionBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.BasicRequestInfo rinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rinfo(this), target, stream);
  }

  // repeated .ei.ShellsActionLog actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.ShellsActionBatch)
  return target;
}

size_t ShellsActionBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.ShellsActionBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.ShellsActionLog actions = 2;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ei.BasicRequestInfo rinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellsActionBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.ShellsActionBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellsActionBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellsActionBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.ShellsActionBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.ShellsActionBatch)
    MergeFrom(*source);
  }
}

void ShellsActionBatch::MergeFrom(const ShellsActionBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.ShellsActionBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from._internal_has_rinfo()) {
    _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
  }
}

void ShellsActionBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.ShellsActionBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellsActionBatch::CopyFrom(const ShellsActionBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.ShellsActionBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellsActionBatch::IsInitialized() const {
  return true;
}

void ShellsActionBatch::InternalSwap(ShellsActionBatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actions_.InternalSwap(&other->actions_);
  swap(rinfo_, other->rinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellsActionBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserVerificationAnalysis::InitAsDefaultInstance() {
}
class UserVerificationAnalysis::_Internal {
 public:
  using HasBits = decltype(std::declval<UserVerificationAnalysis>()._has_bits_);
  static void set_has_overall_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_prestiges(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_soul_eggs(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_eggs_of_prophecy(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_iap_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_verified_pro_permit(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_verified_piggy_breaks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verified_other_iap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unverified_iap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gold_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_regular_iap_buyer(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_regular_iap_cheater(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_artifacts_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_missions_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_artifacts_collected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_artifacts_consumed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_artifacts_in_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rare_artifacts_in_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rare_artifacts_on_server(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_legendary_artifacts_in_inventory(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_legendary_artifacts_on_server(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_gold_spent_crafting(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_excessive_consumes(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_excessive_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_excessive_spend(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_contracts_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_num_coop_memberships(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_valid_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_excessive_eop(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_excessive_invalid_contracts(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_verification_override(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_verification_override_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

UserVerificationAnalysis::UserVerificationAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  invalid_contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UserVerificationAnalysis)
}
UserVerificationAnalysis::UserVerificationAnalysis(const UserVerificationAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      invalid_contracts_(from.invalid_contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&legendary_artifacts_on_server_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(legendary_artifacts_on_server_));
  // @@protoc_insertion_point(copy_constructor:ei.UserVerificationAnalysis)
}

void UserVerificationAnalysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserVerificationAnalysis_ei_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legendary_artifacts_on_server_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(legendary_artifacts_on_server_));
}

UserVerificationAnalysis::~UserVerificationAnalysis() {
  // @@protoc_insertion_point(destructor:ei.UserVerificationAnalysis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserVerificationAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserVerificationAnalysis::ArenaDtor(void* object) {
  UserVerificationAnalysis* _this = reinterpret_cast< UserVerificationAnalysis* >(object);
  (void)_this;
}
void UserVerificationAnalysis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserVerificationAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserVerificationAnalysis& UserVerificationAnalysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserVerificationAnalysis_ei_2eproto.base);
  return *internal_default_instance();
}


void UserVerificationAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UserVerificationAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invalid_contracts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&artifacts_consumed_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(artifacts_consumed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&missions_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iap_status_) -
        reinterpret_cast<char*>(&missions_completed_)) + sizeof(iap_status_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&verified_pro_permit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eggs_of_prophecy_) -
        reinterpret_cast<char*>(&verified_pro_permit_)) + sizeof(eggs_of_prophecy_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&excessive_inventory_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rare_artifacts_in_inventory_) -
        reinterpret_cast<char*>(&excessive_inventory_)) + sizeof(rare_artifacts_in_inventory_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rare_artifacts_on_server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legendary_artifacts_on_server_) -
        reinterpret_cast<char*>(&rare_artifacts_on_server_)) + sizeof(legendary_artifacts_on_server_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserVerificationAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ei.UserVerificationAnalysis.Status overall_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserVerificationAnalysis_Status_IsValid(val))) {
            _internal_set_overall_status(static_cast<::ei::UserVerificationAnalysis_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_time(&_has_bits_);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double completion_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_completion_time(&_has_bits_);
          completion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool verified_pro_permit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_verified_pro_permit(&_has_bits_);
          verified_pro_permit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verified_piggy_breaks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_verified_piggy_breaks(&_has_bits_);
          verified_piggy_breaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verified_other_iap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_verified_other_iap(&_has_bits_);
          verified_other_iap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unverified_iap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unverified_iap(&_has_bits_);
          unverified_iap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 missions_completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_missions_completed(&_has_bits_);
          missions_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double artifacts_collected = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_artifacts_collected(&_has_bits_);
          artifacts_collected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double artifacts_consumed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_artifacts_consumed(&_has_bits_);
          artifacts_consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double artifacts_in_inventory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_artifacts_in_inventory(&_has_bits_);
          artifacts_in_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_coop_memberships = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_num_coop_memberships(&_has_bits_);
          num_coop_memberships_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gold_earned = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_gold_earned(&_has_bits_);
          gold_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double num_prestiges = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_num_prestiges(&_has_bits_);
          num_prestiges_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soul_eggs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_soul_eggs(&_has_bits_);
          soul_eggs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 valid_contracts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_valid_contracts(&_has_bits_);
          valid_contracts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string invalid_contracts = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_invalid_contracts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserVerificationAnalysis.invalid_contracts");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.UserVerificationAnalysis.Status iap_status = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserVerificationAnalysis_Status_IsValid(val))) {
            _internal_set_iap_status(static_cast<::ei::UserVerificationAnalysis_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.UserVerificationAnalysis.Status artifacts_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserVerificationAnalysis_Status_IsValid(val))) {
            _internal_set_artifacts_status(static_cast<::ei::UserVerificationAnalysis_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.UserVerificationAnalysis.Status contracts_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserVerificationAnalysis_Status_IsValid(val))) {
            _internal_set_contracts_status(static_cast<::ei::UserVerificationAnalysis_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double gold_spent_crafting = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_gold_spent_crafting(&_has_bits_);
          gold_spent_crafting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool regular_iap_buyer = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_regular_iap_buyer(&_has_bits_);
          regular_iap_buyer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool regular_iap_cheater = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_regular_iap_cheater(&_has_bits_);
          regular_iap_cheater_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excessive_consumes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_excessive_consumes(&_has_bits_);
          excessive_consumes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excessive_inventory = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_excessive_inventory(&_has_bits_);
          excessive_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excessive_spend = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_excessive_spend(&_has_bits_);
          excessive_spend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eggs_of_prophecy = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_eggs_of_prophecy(&_has_bits_);
          eggs_of_prophecy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excessive_eop = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_excessive_eop(&_has_bits_);
          excessive_eop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excessive_invalid_contracts = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_excessive_invalid_contracts(&_has_bits_);
          excessive_invalid_contracts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verified = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_verified(&_has_bits_);
          verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verification_override = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_verification_override(&_has_bits_);
          verification_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verification_override_value = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_verification_override_value(&_has_bits_);
          verification_override_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rare_artifacts_in_inventory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rare_artifacts_in_inventory(&_has_bits_);
          rare_artifacts_in_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rare_artifacts_on_server = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rare_artifacts_on_server(&_has_bits_);
          rare_artifacts_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 legendary_artifacts_in_inventory = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_legendary_artifacts_in_inventory(&_has_bits_);
          legendary_artifacts_in_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 legendary_artifacts_on_server = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_legendary_artifacts_on_server(&_has_bits_);
          legendary_artifacts_on_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserVerificationAnalysis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UserVerificationAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ei.UserVerificationAnalysis.Status overall_status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_overall_status(), target);
  }

  // optional double start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // optional double completion_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_completion_time(), target);
  }

  // optional bool verified_pro_permit = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_verified_pro_permit(), target);
  }

  // optional uint32 verified_piggy_breaks = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_verified_piggy_breaks(), target);
  }

  // optional uint32 verified_other_iap = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_verified_other_iap(), target);
  }

  // optional uint32 unverified_iap = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_unverified_iap(), target);
  }

  // optional uint32 missions_completed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_missions_completed(), target);
  }

  // optional double artifacts_collected = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_artifacts_collected(), target);
  }

  // optional double artifacts_consumed = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_artifacts_consumed(), target);
  }

  // optional double artifacts_in_inventory = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_artifacts_in_inventory(), target);
  }

  // optional uint32 num_coop_memberships = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_num_coop_memberships(), target);
  }

  // optional double gold_earned = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_gold_earned(), target);
  }

  // optional double num_prestiges = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_num_prestiges(), target);
  }

  // optional double soul_eggs = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_soul_eggs(), target);
  }

  // optional uint32 valid_contracts = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_valid_contracts(), target);
  }

  // repeated string invalid_contracts = 17;
  for (int i = 0, n = this->_internal_invalid_contracts_size(); i < n; i++) {
    const auto& s = this->_internal_invalid_contracts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserVerificationAnalysis.invalid_contracts");
    target = stream->WriteString(17, s, target);
  }

  // optional .ei.UserVerificationAnalysis.Status iap_status = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_iap_status(), target);
  }

  // optional .ei.UserVerificationAnalysis.Status artifacts_status = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_artifacts_status(), target);
  }

  // optional .ei.UserVerificationAnalysis.Status contracts_status = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_contracts_status(), target);
  }

  // optional double gold_spent_crafting = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_gold_spent_crafting(), target);
  }

  // optional bool regular_iap_buyer = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_regular_iap_buyer(), target);
  }

  // optional bool regular_iap_cheater = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_regular_iap_cheater(), target);
  }

  // optional bool excessive_consumes = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_excessive_consumes(), target);
  }

  // optional bool excessive_inventory = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_excessive_inventory(), target);
  }

  // optional bool excessive_spend = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_excessive_spend(), target);
  }

  // optional uint32 eggs_of_prophecy = 27;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_eggs_of_prophecy(), target);
  }

  // optional bool excessive_eop = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_excessive_eop(), target);
  }

  // optional bool excessive_invalid_contracts = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_excessive_invalid_contracts(), target);
  }

  // optional bool verified = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_verified(), target);
  }

  // optional bool verification_override = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_verification_override(), target);
  }

  // optional bool verification_override_value = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_verification_override_value(), target);
  }

  // optional uint64 rare_artifacts_in_inventory = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(33, this->_internal_rare_artifacts_in_inventory(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 rare_artifacts_on_server = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(34, this->_internal_rare_artifacts_on_server(), target);
  }

  // optional uint64 legendary_artifacts_in_inventory = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(35, this->_internal_legendary_artifacts_in_inventory(), target);
  }

  // optional uint64 legendary_artifacts_on_server = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(36, this->_internal_legendary_artifacts_on_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UserVerificationAnalysis)
  return target;
}

size_t UserVerificationAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UserVerificationAnalysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string invalid_contracts = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(invalid_contracts_.size());
  for (int i = 0, n = invalid_contracts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      invalid_contracts_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double start_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double completion_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .ei.UserVerificationAnalysis.Status overall_status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_overall_status());
    }

    // optional uint32 verified_piggy_breaks = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verified_piggy_breaks());
    }

    // optional uint32 verified_other_iap = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verified_other_iap());
    }

    // optional uint32 unverified_iap = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unverified_iap());
    }

    // optional double artifacts_collected = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double artifacts_consumed = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 missions_completed = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_missions_completed());
    }

    // optional uint32 num_coop_memberships = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_coop_memberships());
    }

    // optional double artifacts_in_inventory = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double gold_earned = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double num_prestiges = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double soul_eggs = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 valid_contracts = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_valid_contracts());
    }

    // optional .ei.UserVerificationAnalysis.Status iap_status = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_iap_status());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool verified_pro_permit = 4;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool regular_iap_buyer = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool regular_iap_cheater = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool excessive_consumes = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional .ei.UserVerificationAnalysis.Status artifacts_status = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_artifacts_status());
    }

    // optional double gold_spent_crafting = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional .ei.UserVerificationAnalysis.Status contracts_status = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contracts_status());
    }

    // optional uint32 eggs_of_prophecy = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eggs_of_prophecy());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool excessive_inventory = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool excessive_spend = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool excessive_eop = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool excessive_invalid_contracts = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool verified = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool verification_override = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool verification_override_value = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 rare_artifacts_in_inventory = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rare_artifacts_in_inventory());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 rare_artifacts_on_server = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rare_artifacts_on_server());
    }

    // optional uint64 legendary_artifacts_in_inventory = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_legendary_artifacts_in_inventory());
    }

    // optional uint64 legendary_artifacts_on_server = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_legendary_artifacts_on_server());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserVerificationAnalysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UserVerificationAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const UserVerificationAnalysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserVerificationAnalysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UserVerificationAnalysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UserVerificationAnalysis)
    MergeFrom(*source);
  }
}

void UserVerificationAnalysis::MergeFrom(const UserVerificationAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UserVerificationAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invalid_contracts_.MergeFrom(from.invalid_contracts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      completion_time_ = from.completion_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      overall_status_ = from.overall_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      verified_piggy_breaks_ = from.verified_piggy_breaks_;
    }
    if (cached_has_bits & 0x00000010u) {
      verified_other_iap_ = from.verified_other_iap_;
    }
    if (cached_has_bits & 0x00000020u) {
      unverified_iap_ = from.unverified_iap_;
    }
    if (cached_has_bits & 0x00000040u) {
      artifacts_collected_ = from.artifacts_collected_;
    }
    if (cached_has_bits & 0x00000080u) {
      artifacts_consumed_ = from.artifacts_consumed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      missions_completed_ = from.missions_completed_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_coop_memberships_ = from.num_coop_memberships_;
    }
    if (cached_has_bits & 0x00000400u) {
      artifacts_in_inventory_ = from.artifacts_in_inventory_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_earned_ = from.gold_earned_;
    }
    if (cached_has_bits & 0x00001000u) {
      num_prestiges_ = from.num_prestiges_;
    }
    if (cached_has_bits & 0x00002000u) {
      soul_eggs_ = from.soul_eggs_;
    }
    if (cached_has_bits & 0x00004000u) {
      valid_contracts_ = from.valid_contracts_;
    }
    if (cached_has_bits & 0x00008000u) {
      iap_status_ = from.iap_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      verified_pro_permit_ = from.verified_pro_permit_;
    }
    if (cached_has_bits & 0x00020000u) {
      regular_iap_buyer_ = from.regular_iap_buyer_;
    }
    if (cached_has_bits & 0x00040000u) {
      regular_iap_cheater_ = from.regular_iap_cheater_;
    }
    if (cached_has_bits & 0x00080000u) {
      excessive_consumes_ = from.excessive_consumes_;
    }
    if (cached_has_bits & 0x00100000u) {
      artifacts_status_ = from.artifacts_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_spent_crafting_ = from.gold_spent_crafting_;
    }
    if (cached_has_bits & 0x00400000u) {
      contracts_status_ = from.contracts_status_;
    }
    if (cached_has_bits & 0x00800000u) {
      eggs_of_prophecy_ = from.eggs_of_prophecy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      excessive_inventory_ = from.excessive_inventory_;
    }
    if (cached_has_bits & 0x02000000u) {
      excessive_spend_ = from.excessive_spend_;
    }
    if (cached_has_bits & 0x04000000u) {
      excessive_eop_ = from.excessive_eop_;
    }
    if (cached_has_bits & 0x08000000u) {
      excessive_invalid_contracts_ = from.excessive_invalid_contracts_;
    }
    if (cached_has_bits & 0x10000000u) {
      verified_ = from.verified_;
    }
    if (cached_has_bits & 0x20000000u) {
      verification_override_ = from.verification_override_;
    }
    if (cached_has_bits & 0x40000000u) {
      verification_override_value_ = from.verification_override_value_;
    }
    if (cached_has_bits & 0x80000000u) {
      rare_artifacts_in_inventory_ = from.rare_artifacts_in_inventory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rare_artifacts_on_server_ = from.rare_artifacts_on_server_;
    }
    if (cached_has_bits & 0x00000002u) {
      legendary_artifacts_in_inventory_ = from.legendary_artifacts_in_inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      legendary_artifacts_on_server_ = from.legendary_artifacts_on_server_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void UserVerificationAnalysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UserVerificationAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserVerificationAnalysis::CopyFrom(const UserVerificationAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UserVerificationAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserVerificationAnalysis::IsInitialized() const {
  return true;
}

void UserVerificationAnalysis::InternalSwap(UserVerificationAnalysis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  invalid_contracts_.InternalSwap(&other->invalid_contracts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserVerificationAnalysis, legendary_artifacts_on_server_)
      + sizeof(UserVerificationAnalysis::legendary_artifacts_on_server_)
      - PROTOBUF_FIELD_OFFSET(UserVerificationAnalysis, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserVerificationAnalysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserSubscriptionInfo_HistoryEntry::InitAsDefaultInstance() {
}
class UserSubscriptionInfo_HistoryEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSubscriptionInfo_HistoryEntry>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserSubscriptionInfo_HistoryEntry::UserSubscriptionInfo_HistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UserSubscriptionInfo.HistoryEntry)
}
UserSubscriptionInfo_HistoryEntry::UserSubscriptionInfo_HistoryEntry(const UserSubscriptionInfo_HistoryEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_id()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ei.UserSubscriptionInfo.HistoryEntry)
}

void UserSubscriptionInfo_HistoryEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

UserSubscriptionInfo_HistoryEntry::~UserSubscriptionInfo_HistoryEntry() {
  // @@protoc_insertion_point(destructor:ei.UserSubscriptionInfo.HistoryEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSubscriptionInfo_HistoryEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSubscriptionInfo_HistoryEntry::ArenaDtor(void* object) {
  UserSubscriptionInfo_HistoryEntry* _this = reinterpret_cast< UserSubscriptionInfo_HistoryEntry* >(object);
  (void)_this;
}
void UserSubscriptionInfo_HistoryEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSubscriptionInfo_HistoryEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSubscriptionInfo_HistoryEntry& UserSubscriptionInfo_HistoryEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSubscriptionInfo_HistoryEntry_ei_2eproto.base);
  return *internal_default_instance();
}


void UserSubscriptionInfo_HistoryEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UserSubscriptionInfo.HistoryEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSubscriptionInfo_HistoryEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.HistoryEntry.message_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.HistoryEntry.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSubscriptionInfo_HistoryEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UserSubscriptionInfo.HistoryEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional string message_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.HistoryEntry.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.HistoryEntry.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UserSubscriptionInfo.HistoryEntry)
  return target;
}

size_t UserSubscriptionInfo_HistoryEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UserSubscriptionInfo.HistoryEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_id());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSubscriptionInfo_HistoryEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UserSubscriptionInfo.HistoryEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSubscriptionInfo_HistoryEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSubscriptionInfo_HistoryEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UserSubscriptionInfo.HistoryEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UserSubscriptionInfo.HistoryEntry)
    MergeFrom(*source);
  }
}

void UserSubscriptionInfo_HistoryEntry::MergeFrom(const UserSubscriptionInfo_HistoryEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UserSubscriptionInfo.HistoryEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_id(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserSubscriptionInfo_HistoryEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UserSubscriptionInfo.HistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSubscriptionInfo_HistoryEntry::CopyFrom(const UserSubscriptionInfo_HistoryEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UserSubscriptionInfo.HistoryEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSubscriptionInfo_HistoryEntry::IsInitialized() const {
  return true;
}

void UserSubscriptionInfo_HistoryEntry::InternalSwap(UserSubscriptionInfo_HistoryEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSubscriptionInfo_HistoryEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserSubscriptionInfo::InitAsDefaultInstance() {
}
class UserSubscriptionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserSubscriptionInfo>()._has_bits_);
  static void set_has_subscription_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_next_subscription_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lock_next_subscription_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_original_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linked_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acknowledged(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_first_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_period_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_store_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_renew(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sandbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

UserSubscriptionInfo::UserSubscriptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_(arena),
  past_user_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.UserSubscriptionInfo)
}
UserSubscriptionInfo::UserSubscriptionInfo(const UserSubscriptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      history_(from.history_),
      past_user_ids_(from.past_user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_transaction_id()) {
    original_transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_transaction_id(),
      GetArena());
  }
  store_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_store_status()) {
    store_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_store_status(),
      GetArena());
  }
  linked_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_linked_transaction_id()) {
    linked_transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linked_transaction_id(),
      GetArena());
  }
  ::memcpy(&first_subscribed_, &from.first_subscribed_,
    static_cast<size_t>(reinterpret_cast<char*>(&sandbox_) -
    reinterpret_cast<char*>(&first_subscribed_)) + sizeof(sandbox_));
  // @@protoc_insertion_point(copy_constructor:ei.UserSubscriptionInfo)
}

void UserSubscriptionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSubscriptionInfo_ei_2eproto.base);
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linked_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_subscribed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sandbox_) -
      reinterpret_cast<char*>(&first_subscribed_)) + sizeof(sandbox_));
}

UserSubscriptionInfo::~UserSubscriptionInfo() {
  // @@protoc_insertion_point(destructor:ei.UserSubscriptionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSubscriptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  original_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linked_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSubscriptionInfo::ArenaDtor(void* object) {
  UserSubscriptionInfo* _this = reinterpret_cast< UserSubscriptionInfo* >(object);
  (void)_this;
}
void UserSubscriptionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSubscriptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSubscriptionInfo& UserSubscriptionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSubscriptionInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void UserSubscriptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.UserSubscriptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  past_user_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      original_transaction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      store_status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      linked_transaction_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&first_subscribed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platform_) -
        reinterpret_cast<char*>(&first_subscribed_)) + sizeof(platform_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&subscription_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sandbox_) -
        reinterpret_cast<char*>(&subscription_level_)) + sizeof(sandbox_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSubscriptionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string original_transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_original_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.original_transaction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double first_subscribed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_first_subscribed(&has_bits);
          first_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double period_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_period_end(&has_bits);
          period_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ei.UserSubscriptionInfo.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserSubscriptionInfo_Status_IsValid(val))) {
            _internal_set_status(static_cast<::ei::UserSubscriptionInfo_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool auto_renew = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_auto_renew(&has_bits);
          auto_renew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double last_updated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_last_updated(&has_bits);
          last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ei.UserSubscriptionInfo.HistoryEntry history = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.Platform platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::Platform_IsValid(val))) {
            _internal_set_platform(static_cast<::ei::Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string past_user_ids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_past_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.past_user_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ei.UserSubscriptionInfo.Level subscription_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserSubscriptionInfo_Level_IsValid(val))) {
            _internal_set_subscription_level(static_cast<::ei::UserSubscriptionInfo_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string store_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_store_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.store_status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserSubscriptionInfo_Level_IsValid(val))) {
            _internal_set_next_subscription_level(static_cast<::ei::UserSubscriptionInfo_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string linked_transaction_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_linked_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.UserSubscriptionInfo.linked_transaction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acknowledged = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_acknowledged(&has_bits);
          acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lock_next_subscription_level = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lock_next_subscription_level(&has_bits);
          lock_next_subscription_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sandbox = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_sandbox(&has_bits);
          sandbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSubscriptionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.UserSubscriptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string original_transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_transaction_id().data(), static_cast<int>(this->_internal_original_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.original_transaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_original_transaction_id(), target);
  }

  // optional double first_subscribed = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_first_subscribed(), target);
  }

  // optional double period_end = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_period_end(), target);
  }

  // optional .ei.UserSubscriptionInfo.Status status = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // optional bool auto_renew = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_auto_renew(), target);
  }

  // optional double last_updated = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_updated(), target);
  }

  // repeated .ei.UserSubscriptionInfo.HistoryEntry history = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_history(i), target, stream);
  }

  // optional .ei.Platform platform = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_platform(), target);
  }

  // repeated string past_user_ids = 11;
  for (int i = 0, n = this->_internal_past_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_past_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.past_user_ids");
    target = stream->WriteString(11, s, target);
  }

  // optional .ei.UserSubscriptionInfo.Level subscription_level = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_subscription_level(), target);
  }

  // optional string store_status = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_store_status().data(), static_cast<int>(this->_internal_store_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.store_status");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_store_status(), target);
  }

  // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_next_subscription_level(), target);
  }

  // optional string linked_transaction_id = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_linked_transaction_id().data(), static_cast<int>(this->_internal_linked_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.UserSubscriptionInfo.linked_transaction_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_linked_transaction_id(), target);
  }

  // optional bool acknowledged = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_acknowledged(), target);
  }

  // optional bool lock_next_subscription_level = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_lock_next_subscription_level(), target);
  }

  // optional bool sandbox = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_sandbox(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.UserSubscriptionInfo)
  return target;
}

size_t UserSubscriptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.UserSubscriptionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ei.UserSubscriptionInfo.HistoryEntry history = 9;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string past_user_ids = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(past_user_ids_.size());
  for (int i = 0, n = past_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      past_user_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string original_transaction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_transaction_id());
    }

    // optional string store_status = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_store_status());
    }

    // optional string linked_transaction_id = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_linked_transaction_id());
    }

    // optional double first_subscribed = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double period_end = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double last_updated = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .ei.UserSubscriptionInfo.Status status = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .ei.Platform platform = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .ei.UserSubscriptionInfo.Level subscription_level = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subscription_level());
    }

    // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_subscription_level());
    }

    // optional bool lock_next_subscription_level = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool acknowledged = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool auto_renew = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool sandbox = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSubscriptionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.UserSubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSubscriptionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSubscriptionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.UserSubscriptionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.UserSubscriptionInfo)
    MergeFrom(*source);
  }
}

void UserSubscriptionInfo::MergeFrom(const UserSubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.UserSubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  past_user_ids_.MergeFrom(from.past_user_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_original_transaction_id(from._internal_original_transaction_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_store_status(from._internal_store_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_linked_transaction_id(from._internal_linked_transaction_id());
    }
    if (cached_has_bits & 0x00000008u) {
      first_subscribed_ = from.first_subscribed_;
    }
    if (cached_has_bits & 0x00000010u) {
      period_end_ = from.period_end_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_updated_ = from.last_updated_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      platform_ = from.platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      subscription_level_ = from.subscription_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      next_subscription_level_ = from.next_subscription_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_next_subscription_level_ = from.lock_next_subscription_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      acknowledged_ = from.acknowledged_;
    }
    if (cached_has_bits & 0x00001000u) {
      auto_renew_ = from.auto_renew_;
    }
    if (cached_has_bits & 0x00002000u) {
      sandbox_ = from.sandbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserSubscriptionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.UserSubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSubscriptionInfo::CopyFrom(const UserSubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.UserSubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSubscriptionInfo::IsInitialized() const {
  return true;
}

void UserSubscriptionInfo::InternalSwap(UserSubscriptionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_.InternalSwap(&other->history_);
  past_user_ids_.InternalSwap(&other->past_user_ids_);
  original_transaction_id_.Swap(&other->original_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  store_status_.Swap(&other->store_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linked_transaction_id_.Swap(&other->linked_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSubscriptionInfo, sandbox_)
      + sizeof(UserSubscriptionInfo::sandbox_)
      - PROTOBUF_FIELD_OFFSET(UserSubscriptionInfo, first_subscribed_)>(
          reinterpret_cast<char*>(&first_subscribed_),
          reinterpret_cast<char*>(&other->first_subscribed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSubscriptionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionChangeHintRequest::InitAsDefaultInstance() {
  ::ei::_SubscriptionChangeHintRequest_default_instance_._instance.get_mutable()->rinfo_ = const_cast< ::ei::BasicRequestInfo*>(
      ::ei::BasicRequestInfo::internal_default_instance());
}
class SubscriptionChangeHintRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscriptionChangeHintRequest>()._has_bits_);
  static const ::ei::BasicRequestInfo& rinfo(const SubscriptionChangeHintRequest* msg);
  static void set_has_rinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_subscription_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ei::BasicRequestInfo&
SubscriptionChangeHintRequest::_Internal::rinfo(const SubscriptionChangeHintRequest* msg) {
  return *msg->rinfo_;
}
SubscriptionChangeHintRequest::SubscriptionChangeHintRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.SubscriptionChangeHintRequest)
}
SubscriptionChangeHintRequest::SubscriptionChangeHintRequest(const SubscriptionChangeHintRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_transaction_id()) {
    original_transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_transaction_id(),
      GetArena());
  }
  if (from._internal_has_rinfo()) {
    rinfo_ = new ::ei::BasicRequestInfo(*from.rinfo_);
  } else {
    rinfo_ = nullptr;
  }
  next_subscription_level_ = from.next_subscription_level_;
  // @@protoc_insertion_point(copy_constructor:ei.SubscriptionChangeHintRequest)
}

void SubscriptionChangeHintRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionChangeHintRequest_ei_2eproto.base);
  original_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_subscription_level_) -
      reinterpret_cast<char*>(&rinfo_)) + sizeof(next_subscription_level_));
}

SubscriptionChangeHintRequest::~SubscriptionChangeHintRequest() {
  // @@protoc_insertion_point(destructor:ei.SubscriptionChangeHintRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionChangeHintRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  original_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rinfo_;
}

void SubscriptionChangeHintRequest::ArenaDtor(void* object) {
  SubscriptionChangeHintRequest* _this = reinterpret_cast< SubscriptionChangeHintRequest* >(object);
  (void)_this;
}
void SubscriptionChangeHintRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionChangeHintRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionChangeHintRequest& SubscriptionChangeHintRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionChangeHintRequest_ei_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionChangeHintRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.SubscriptionChangeHintRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      original_transaction_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rinfo_ != nullptr);
      rinfo_->Clear();
    }
  }
  next_subscription_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionChangeHintRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string original_transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_original_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.SubscriptionChangeHintRequest.original_transaction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ei::UserSubscriptionInfo_Level_IsValid(val))) {
            _internal_set_next_subscription_level(static_cast<::ei::UserSubscriptionInfo_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ei.BasicRequestInfo rinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionChangeHintRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.SubscriptionChangeHintRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string original_transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_transaction_id().data(), static_cast<int>(this->_internal_original_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.SubscriptionChangeHintRequest.original_transaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_original_transaction_id(), target);
  }

  // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_next_subscription_level(), target);
  }

  // optional .ei.BasicRequestInfo rinfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.SubscriptionChangeHintRequest)
  return target;
}

size_t SubscriptionChangeHintRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.SubscriptionChangeHintRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string original_transaction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_transaction_id());
    }

    // optional .ei.BasicRequestInfo rinfo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rinfo_);
    }

    // optional .ei.UserSubscriptionInfo.Level next_subscription_level = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_next_subscription_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionChangeHintRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.SubscriptionChangeHintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionChangeHintRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionChangeHintRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.SubscriptionChangeHintRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.SubscriptionChangeHintRequest)
    MergeFrom(*source);
  }
}

void SubscriptionChangeHintRequest::MergeFrom(const SubscriptionChangeHintRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.SubscriptionChangeHintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_original_transaction_id(from._internal_original_transaction_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rinfo()->::ei::BasicRequestInfo::MergeFrom(from._internal_rinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      next_subscription_level_ = from.next_subscription_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubscriptionChangeHintRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.SubscriptionChangeHintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionChangeHintRequest::CopyFrom(const SubscriptionChangeHintRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.SubscriptionChangeHintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionChangeHintRequest::IsInitialized() const {
  return true;
}

void SubscriptionChangeHintRequest::InternalSwap(SubscriptionChangeHintRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  original_transaction_id_.Swap(&other->original_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionChangeHintRequest, next_subscription_level_)
      + sizeof(SubscriptionChangeHintRequest::next_subscription_level_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionChangeHintRequest, rinfo_)>(
          reinterpret_cast<char*>(&rinfo_),
          reinterpret_cast<char*>(&other->rinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionChangeHintRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CXPEvalRolloutInfo::InitAsDefaultInstance() {
}
class CXPEvalRolloutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CXPEvalRolloutInfo>()._has_bits_);
  static void set_has_current_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_basis_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CXPEvalRolloutInfo::CXPEvalRolloutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ei.CXPEvalRolloutInfo)
}
CXPEvalRolloutInfo::CXPEvalRolloutInfo(const CXPEvalRolloutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_id()) {
    current_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_id(),
      GetArena());
  }
  basis_points_ = from.basis_points_;
  // @@protoc_insertion_point(copy_constructor:ei.CXPEvalRolloutInfo)
}

void CXPEvalRolloutInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CXPEvalRolloutInfo_ei_2eproto.base);
  current_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basis_points_ = 0u;
}

CXPEvalRolloutInfo::~CXPEvalRolloutInfo() {
  // @@protoc_insertion_point(destructor:ei.CXPEvalRolloutInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CXPEvalRolloutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  current_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CXPEvalRolloutInfo::ArenaDtor(void* object) {
  CXPEvalRolloutInfo* _this = reinterpret_cast< CXPEvalRolloutInfo* >(object);
  (void)_this;
}
void CXPEvalRolloutInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CXPEvalRolloutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CXPEvalRolloutInfo& CXPEvalRolloutInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CXPEvalRolloutInfo_ei_2eproto.base);
  return *internal_default_instance();
}


void CXPEvalRolloutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ei.CXPEvalRolloutInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    current_id_.ClearNonDefaultToEmpty();
  }
  basis_points_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CXPEvalRolloutInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string current_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ei.CXPEvalRolloutInfo.current_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 basis_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_basis_points(&has_bits);
          basis_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CXPEvalRolloutInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ei.CXPEvalRolloutInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_id().data(), static_cast<int>(this->_internal_current_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ei.CXPEvalRolloutInfo.current_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_id(), target);
  }

  // optional uint32 basis_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_basis_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ei.CXPEvalRolloutInfo)
  return target;
}

size_t CXPEvalRolloutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ei.CXPEvalRolloutInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string current_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_id());
    }

    // optional uint32 basis_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_basis_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CXPEvalRolloutInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ei.CXPEvalRolloutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CXPEvalRolloutInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CXPEvalRolloutInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ei.CXPEvalRolloutInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ei.CXPEvalRolloutInfo)
    MergeFrom(*source);
  }
}

void CXPEvalRolloutInfo::MergeFrom(const CXPEvalRolloutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ei.CXPEvalRolloutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_current_id(from._internal_current_id());
    }
    if (cached_has_bits & 0x00000002u) {
      basis_points_ = from.basis_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CXPEvalRolloutInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ei.CXPEvalRolloutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CXPEvalRolloutInfo::CopyFrom(const CXPEvalRolloutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ei.CXPEvalRolloutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CXPEvalRolloutInfo::IsInitialized() const {
  return true;
}

void CXPEvalRolloutInfo::InternalSwap(CXPEvalRolloutInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_id_.Swap(&other->current_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(basis_points_, other->basis_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CXPEvalRolloutInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ei
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ei::Vector3* Arena::CreateMaybeMessage< ::ei::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Vector4* Arena::CreateMaybeMessage< ::ei::Vector4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Vector4 >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Settings* Arena::CreateMaybeMessage< ::ei::Backup_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Tutorial* Arena::CreateMaybeMessage< ::ei::Backup_Tutorial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Tutorial >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Stats* Arena::CreateMaybeMessage< ::ei::Backup_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Game* Arena::CreateMaybeMessage< ::ei::Backup_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Artifacts* Arena::CreateMaybeMessage< ::ei::Backup_Artifacts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Artifacts >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Shells* Arena::CreateMaybeMessage< ::ei::Backup_Shells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Shells >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Simulation* Arena::CreateMaybeMessage< ::ei::Backup_Simulation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Simulation >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Mission* Arena::CreateMaybeMessage< ::ei::Backup_Mission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Mission >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_Misc* Arena::CreateMaybeMessage< ::ei::Backup_Misc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_Misc >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_ResearchItem* Arena::CreateMaybeMessage< ::ei::Backup_ResearchItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_ResearchItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_NewsHeadline* Arena::CreateMaybeMessage< ::ei::Backup_NewsHeadline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_NewsHeadline >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_AchievementInfo* Arena::CreateMaybeMessage< ::ei::Backup_AchievementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_AchievementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_ActiveBoost* Arena::CreateMaybeMessage< ::ei::Backup_ActiveBoost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_ActiveBoost >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_OwnedBoost* Arena::CreateMaybeMessage< ::ei::Backup_OwnedBoost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_OwnedBoost >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup_MissionInfo* Arena::CreateMaybeMessage< ::ei::Backup_MissionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup_MissionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Backup* Arena::CreateMaybeMessage< ::ei::Backup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Backup >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::EggIncFirstContactRequest* Arena::CreateMaybeMessage< ::ei::EggIncFirstContactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::EggIncFirstContactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::EggIncFirstContactResponse* Arena::CreateMaybeMessage< ::ei::EggIncFirstContactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::EggIncFirstContactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::EggIncAdConfig* Arena::CreateMaybeMessage< ::ei::EggIncAdConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::EggIncAdConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::DailyGiftInfo* Arena::CreateMaybeMessage< ::ei::DailyGiftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::DailyGiftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SalesInfoRequest* Arena::CreateMaybeMessage< ::ei::SalesInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SalesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::IAPSaleEntry* Arena::CreateMaybeMessage< ::ei::IAPSaleEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::IAPSaleEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SalesInfo* Arena::CreateMaybeMessage< ::ei::SalesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SalesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::EggIncEvent* Arena::CreateMaybeMessage< ::ei::EggIncEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::EggIncEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::EggIncCurrentEvents* Arena::CreateMaybeMessage< ::ei::EggIncCurrentEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::EggIncCurrentEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::DeviceInfo* Arena::CreateMaybeMessage< ::ei::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AppInfo* Arena::CreateMaybeMessage< ::ei::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ActionKeyValuePair* Arena::CreateMaybeMessage< ::ei::ActionKeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ActionKeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::GenericAction* Arena::CreateMaybeMessage< ::ei::GenericAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::GenericAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::GenericActionBatchRequest* Arena::CreateMaybeMessage< ::ei::GenericActionBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::GenericActionBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::VerifyPurchaseRequest* Arena::CreateMaybeMessage< ::ei::VerifyPurchaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::VerifyPurchaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::VerifyPurchaseResponse* Arena::CreateMaybeMessage< ::ei::VerifyPurchaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::VerifyPurchaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CurrencyFlowLog* Arena::CreateMaybeMessage< ::ei::CurrencyFlowLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CurrencyFlowLog >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CurrencyFlowBatchRequest* Arena::CreateMaybeMessage< ::ei::CurrencyFlowBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CurrencyFlowBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Reward* Arena::CreateMaybeMessage< ::ei::Reward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Reward >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::GameModifier* Arena::CreateMaybeMessage< ::ei::GameModifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::GameModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Contract_Goal* Arena::CreateMaybeMessage< ::ei::Contract_Goal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Contract_Goal >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Contract_GoalSet* Arena::CreateMaybeMessage< ::ei::Contract_GoalSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Contract_GoalSet >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Contract_GradeSpec* Arena::CreateMaybeMessage< ::ei::Contract_GradeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Contract_GradeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::Contract* Arena::CreateMaybeMessage< ::ei::Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractPlayerInfo* Arena::CreateMaybeMessage< ::ei::ContractPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractEvaluation* Arena::CreateMaybeMessage< ::ei::ContractEvaluation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractEvaluation >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCitation* Arena::CreateMaybeMessage< ::ei::ContractCitation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCitation >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractEvaluationBatch_Pair* Arena::CreateMaybeMessage< ::ei::ContractEvaluationBatch_Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractEvaluationBatch_Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractEvaluationBatch* Arena::CreateMaybeMessage< ::ei::ContractEvaluationBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractEvaluationBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopCompletionSnapshot_ContributorSnapshot* Arena::CreateMaybeMessage< ::ei::CoopCompletionSnapshot_ContributorSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopCompletionSnapshot_ContributorSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopCompletionSnapshot* Arena::CreateMaybeMessage< ::ei::CoopCompletionSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopCompletionSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::BasicRequestInfo* Arena::CreateMaybeMessage< ::ei::BasicRequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::BasicRequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams* Arena::CreateMaybeMessage< ::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimConfig_ContractGradeSimConfig_GoalParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimConfig_ContractGradeSimConfig* Arena::CreateMaybeMessage< ::ei::ContractSimConfig_ContractGradeSimConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimConfig_ContractGradeSimConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimConfig* Arena::CreateMaybeMessage< ::ei::ContractSimConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimPoll* Arena::CreateMaybeMessage< ::ei::ContractSimPoll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimPoll >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimPollResponse* Arena::CreateMaybeMessage< ::ei::ContractSimPollResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimPollResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimResultUpdate_GoalInfo* Arena::CreateMaybeMessage< ::ei::ContractSimResultUpdate_GoalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimResultUpdate_GoalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractSimResultUpdate* Arena::CreateMaybeMessage< ::ei::ContractSimResultUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractSimResultUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractsRequest* Arena::CreateMaybeMessage< ::ei::ContractsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractsResponse* Arena::CreateMaybeMessage< ::ei::ContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusRequest* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::FarmProductionParams* Arena::CreateMaybeMessage< ::ei::FarmProductionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::FarmProductionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::PlayerFarmInfo* Arena::CreateMaybeMessage< ::ei::PlayerFarmInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::PlayerFarmInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusResponse_ContributionInfo* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusResponse_ContributionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusResponse_ContributionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusResponse_CoopGift* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusResponse_CoopGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusResponse_CoopGift >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusResponse_ChickenRun* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusResponse_ChickenRun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusResponse_ChickenRun >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusResponse* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LocalContract* Arena::CreateMaybeMessage< ::ei::LocalContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LocalContract >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MyContracts* Arena::CreateMaybeMessage< ::ei::MyContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MyContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::QueryCoopRequest* Arena::CreateMaybeMessage< ::ei::QueryCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::QueryCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::QueryCoopResponse* Arena::CreateMaybeMessage< ::ei::QueryCoopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::QueryCoopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CreateCoopRequest* Arena::CreateMaybeMessage< ::ei::CreateCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CreateCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CreateCoopResponse* Arena::CreateMaybeMessage< ::ei::CreateCoopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CreateCoopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::JoinCoopRequest* Arena::CreateMaybeMessage< ::ei::JoinCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::JoinCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::JoinCoopResponse* Arena::CreateMaybeMessage< ::ei::JoinCoopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::JoinCoopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AutoJoinCoopRequest* Arena::CreateMaybeMessage< ::ei::AutoJoinCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AutoJoinCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UpdateCoopPermissionsRequest* Arena::CreateMaybeMessage< ::ei::UpdateCoopPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UpdateCoopPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UpdateCoopPermissionsResponse* Arena::CreateMaybeMessage< ::ei::UpdateCoopPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UpdateCoopPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaveCoopRequest* Arena::CreateMaybeMessage< ::ei::LeaveCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaveCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::GiftPlayerCoopRequest* Arena::CreateMaybeMessage< ::ei::GiftPlayerCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::GiftPlayerCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SendChickenRunCoopRequest* Arena::CreateMaybeMessage< ::ei::SendChickenRunCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SendChickenRunCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ReportPlayerCoopRequest* Arena::CreateMaybeMessage< ::ei::ReportPlayerCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ReportPlayerCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::KickPlayerCoopRequest* Arena::CreateMaybeMessage< ::ei::KickPlayerCoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::KickPlayerCoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusUpdateRequest* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractCoopStatusUpdateResponse* Arena::CreateMaybeMessage< ::ei::ContractCoopStatusUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractCoopStatusUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopBuffState* Arena::CreateMaybeMessage< ::ei::CoopBuffState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopBuffState >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopBuffHistory* Arena::CreateMaybeMessage< ::ei::CoopBuffHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopBuffHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopChickenRunEntry* Arena::CreateMaybeMessage< ::ei::CoopChickenRunEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopChickenRunEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CoopLastChickenRunTimes* Arena::CreateMaybeMessage< ::ei::CoopLastChickenRunTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CoopLastChickenRunTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardAnalysis_Chunk* Arena::CreateMaybeMessage< ::ei::LeaderboardAnalysis_Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardAnalysis_Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardAnalysis* Arena::CreateMaybeMessage< ::ei::LeaderboardAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardInfo_Season* Arena::CreateMaybeMessage< ::ei::LeaderboardInfo_Season >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardInfo_Season >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardInfo* Arena::CreateMaybeMessage< ::ei::LeaderboardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardRequest* Arena::CreateMaybeMessage< ::ei::LeaderboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardResponse_Entry* Arena::CreateMaybeMessage< ::ei::LeaderboardResponse_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardResponse_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LeaderboardResponse* Arena::CreateMaybeMessage< ::ei::LeaderboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LeaderboardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractsArchive* Arena::CreateMaybeMessage< ::ei::ContractsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ContractAction* Arena::CreateMaybeMessage< ::ei::ContractAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ContractAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UserDataInfoRequest* Arena::CreateMaybeMessage< ::ei::UserDataInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UserDataInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UserDataInfoResponse* Arena::CreateMaybeMessage< ::ei::UserDataInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UserDataInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ClearAllUserDataRequest* Arena::CreateMaybeMessage< ::ei::ClearAllUserDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ClearAllUserDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ServerGift* Arena::CreateMaybeMessage< ::ei::ServerGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ServerGift >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_BoostsConfig_ItemConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_BoostsConfig_ItemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_BoostsConfig_ItemConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_BoostsConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_BoostsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_BoostsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_GiftConfig_GiftValueConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_GiftConfig_GiftValueConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_GiftConfig_GiftValueConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_GiftConfig_GiftMuConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_GiftConfig_GiftMuConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_GiftConfig_GiftMuConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_GiftConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_GiftConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_GiftConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig_MiscConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig_MiscConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig_MiscConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LiveConfig* Arena::CreateMaybeMessage< ::ei::LiveConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LiveConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::InGameMail* Arena::CreateMaybeMessage< ::ei::InGameMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::InGameMail >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MailDB* Arena::CreateMaybeMessage< ::ei::MailDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MailDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::TipsDB* Arena::CreateMaybeMessage< ::ei::TipsDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::TipsDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MailState_TipState* Arena::CreateMaybeMessage< ::ei::MailState_TipState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MailState_TipState >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MailState* Arena::CreateMaybeMessage< ::ei::MailState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MailState >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::PeriodicalsResponse_RoyaltyInfo* Arena::CreateMaybeMessage< ::ei::PeriodicalsResponse_RoyaltyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::PeriodicalsResponse_RoyaltyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::PeriodicalsResponse* Arena::CreateMaybeMessage< ::ei::PeriodicalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::PeriodicalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::GetPeriodicalsRequest* Arena::CreateMaybeMessage< ::ei::GetPeriodicalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::GetPeriodicalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ConfigRequest* Arena::CreateMaybeMessage< ::ei::ConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ConfigResponse* Arena::CreateMaybeMessage< ::ei::ConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AdAttributionRawData* Arena::CreateMaybeMessage< ::ei::AdAttributionRawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AdAttributionRawData >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AdAttributionRow* Arena::CreateMaybeMessage< ::ei::AdAttributionRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AdAttributionRow >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AdAttributionInfo* Arena::CreateMaybeMessage< ::ei::AdAttributionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AdAttributionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsClientInfo_LaunchCount* Arena::CreateMaybeMessage< ::ei::ArtifactsClientInfo_LaunchCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsClientInfo_LaunchCount >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsClientInfo* Arena::CreateMaybeMessage< ::ei::ArtifactsClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MissionInfo_Fuel* Arena::CreateMaybeMessage< ::ei::MissionInfo_Fuel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MissionInfo_Fuel >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MissionInfo* Arena::CreateMaybeMessage< ::ei::MissionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MissionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactSpec* Arena::CreateMaybeMessage< ::ei::ArtifactSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CompleteArtifact* Arena::CreateMaybeMessage< ::ei::CompleteArtifact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CompleteArtifact >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactInventoryItem* Arena::CreateMaybeMessage< ::ei::ArtifactInventoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactInventoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::InventorySlot* Arena::CreateMaybeMessage< ::ei::InventorySlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::InventorySlot >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationRequest* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationResponse_MissionParameters_Duration* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationResponse_MissionParameters_Duration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationResponse_MissionParameters_Duration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationResponse_MissionParameters* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationResponse_MissionParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationResponse_MissionParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationResponse_ArtifactParameters* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationResponse_ArtifactParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationResponse_ArtifactParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationResponse_CraftingLevelInfo* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationResponse_CraftingLevelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationResponse_CraftingLevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsConfigurationResponse* Arena::CreateMaybeMessage< ::ei::ArtifactsConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MissionRequest* Arena::CreateMaybeMessage< ::ei::MissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::MissionResponse* Arena::CreateMaybeMessage< ::ei::MissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::MissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CompleteMissionResponse_SecureArtifactSpec* Arena::CreateMaybeMessage< ::ei::CompleteMissionResponse_SecureArtifactSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CompleteMissionResponse_SecureArtifactSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CompleteMissionResponse* Arena::CreateMaybeMessage< ::ei::CompleteMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CompleteMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CollectContractArtifactRewardsRequest* Arena::CreateMaybeMessage< ::ei::CollectContractArtifactRewardsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CollectContractArtifactRewardsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CraftArtifactRequest* Arena::CreateMaybeMessage< ::ei::CraftArtifactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CraftArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CraftArtifactResponse* Arena::CreateMaybeMessage< ::ei::CraftArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CraftArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ConsumeArtifactRequest* Arena::CreateMaybeMessage< ::ei::ConsumeArtifactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ConsumeArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ConsumeArtifactResponse* Arena::CreateMaybeMessage< ::ei::ConsumeArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ConsumeArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AuthenticateArtifactResponse* Arena::CreateMaybeMessage< ::ei::AuthenticateArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AuthenticateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SetArtifactRequest* Arena::CreateMaybeMessage< ::ei::SetArtifactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SetArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SetArtifactResponse* Arena::CreateMaybeMessage< ::ei::SetArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SetArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsDB_ActiveArtifactSlot* Arena::CreateMaybeMessage< ::ei::ArtifactsDB_ActiveArtifactSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsDB_ActiveArtifactSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsDB_ActiveArtifactSet* Arena::CreateMaybeMessage< ::ei::ArtifactsDB_ActiveArtifactSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsDB_ActiveArtifactSet >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsDB_CraftableArtifact* Arena::CreateMaybeMessage< ::ei::ArtifactsDB_CraftableArtifact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsDB_CraftableArtifact >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ArtifactsDB* Arena::CreateMaybeMessage< ::ei::ArtifactsDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ArtifactsDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AuthenticatedMessage* Arena::CreateMaybeMessage< ::ei::AuthenticatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AuthenticatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LogCompleteMissionPayload* Arena::CreateMaybeMessage< ::ei::LogCompleteMissionPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LogCompleteMissionPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LogCraftArtifactPayload* Arena::CreateMaybeMessage< ::ei::LogCraftArtifactPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LogCraftArtifactPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LogConsumeArtifactPayload* Arena::CreateMaybeMessage< ::ei::LogConsumeArtifactPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LogConsumeArtifactPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::LogSetArtifactPayload* Arena::CreateMaybeMessage< ::ei::LogSetArtifactPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::LogSetArtifactPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::AccountTransferPayload* Arena::CreateMaybeMessage< ::ei::AccountTransferPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::AccountTransferPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SaveBackupResponse* Arena::CreateMaybeMessage< ::ei::SaveBackupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SaveBackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CleanAccountRequest* Arena::CreateMaybeMessage< ::ei::CleanAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CleanAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ReturnEDTPayload* Arena::CreateMaybeMessage< ::ei::ReturnEDTPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ReturnEDTPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::DLCItem* Arena::CreateMaybeMessage< ::ei::DLCItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::DLCItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellSpec_ShellPiece* Arena::CreateMaybeMessage< ::ei::ShellSpec_ShellPiece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellSpec_ShellPiece >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellSpec* Arena::CreateMaybeMessage< ::ei::ShellSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellSetSpec_VariationSpec* Arena::CreateMaybeMessage< ::ei::ShellSetSpec_VariationSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellSetSpec_VariationSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellSetSpec* Arena::CreateMaybeMessage< ::ei::ShellSetSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellSetSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellObjectSpec_LODPiece* Arena::CreateMaybeMessage< ::ei::ShellObjectSpec_LODPiece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellObjectSpec_LODPiece >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellObjectSpec* Arena::CreateMaybeMessage< ::ei::ShellObjectSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellObjectSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellGroupSpec* Arena::CreateMaybeMessage< ::ei::ShellGroupSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::DLCCatalog* Arena::CreateMaybeMessage< ::ei::DLCCatalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::DLCCatalog >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellStatus* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellElementStatus* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellElementStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellElementStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellSetVariationStatus* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellSetVariationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellSetVariationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_FarmConfiguration* Arena::CreateMaybeMessage< ::ei::ShellDB_FarmConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_FarmConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_SavedFarmConfiguration* Arena::CreateMaybeMessage< ::ei::ShellDB_SavedFarmConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_SavedFarmConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellConfiguration* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellSetConfiguration* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellSetConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellSetConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ShellGroupConfiguration* Arena::CreateMaybeMessage< ::ei::ShellDB_ShellGroupConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ShellGroupConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_ChickenConfig* Arena::CreateMaybeMessage< ::ei::ShellDB_ChickenConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_ChickenConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB_LightingConfig* Arena::CreateMaybeMessage< ::ei::ShellDB_LightingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB_LightingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellDB* Arena::CreateMaybeMessage< ::ei::ShellDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellDB >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellPopularityStats_Entry* Arena::CreateMaybeMessage< ::ei::ShellPopularityStats_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellPopularityStats_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellPopularityStats* Arena::CreateMaybeMessage< ::ei::ShellPopularityStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellPopularityStats >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellsActionLog* Arena::CreateMaybeMessage< ::ei::ShellsActionLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellsActionLog >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SubmitShellShowcaseRequest* Arena::CreateMaybeMessage< ::ei::SubmitShellShowcaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SubmitShellShowcaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellShowcase* Arena::CreateMaybeMessage< ::ei::ShellShowcase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellShowcase >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellShowcaseListingInfo* Arena::CreateMaybeMessage< ::ei::ShellShowcaseListingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellShowcaseListingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShowcaseRoyaltyDeliveryConfirmation* Arena::CreateMaybeMessage< ::ei::ShowcaseRoyaltyDeliveryConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShowcaseRoyaltyDeliveryConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellShowcaseListingSet* Arena::CreateMaybeMessage< ::ei::ShellShowcaseListingSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellShowcaseListingSet >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::ShellsActionBatch* Arena::CreateMaybeMessage< ::ei::ShellsActionBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::ShellsActionBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UserVerificationAnalysis* Arena::CreateMaybeMessage< ::ei::UserVerificationAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UserVerificationAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UserSubscriptionInfo_HistoryEntry* Arena::CreateMaybeMessage< ::ei::UserSubscriptionInfo_HistoryEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UserSubscriptionInfo_HistoryEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::UserSubscriptionInfo* Arena::CreateMaybeMessage< ::ei::UserSubscriptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::UserSubscriptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::SubscriptionChangeHintRequest* Arena::CreateMaybeMessage< ::ei::SubscriptionChangeHintRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::SubscriptionChangeHintRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ei::CXPEvalRolloutInfo* Arena::CreateMaybeMessage< ::ei::CXPEvalRolloutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ei::CXPEvalRolloutInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
